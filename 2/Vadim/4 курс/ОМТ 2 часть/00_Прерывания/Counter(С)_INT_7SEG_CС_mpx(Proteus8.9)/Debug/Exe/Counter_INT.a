;/*******************************************************
;Chip type               : ATmega16
;AVR Core Clock frequency: 12,000000 MHz
;*******************************************************/
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Declare your global variables here
;//библиотека графики 16 шестнадцатеричных цифр (знакогенератор)
;//////////////////////////0////1////2////3////4////5////6////7////8////9////A////B////C////D////E////F///
;flash char GRAPH_HEX[16]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7C,0x39,0x5E,0x79,0x71};
;unsigned int counter=0;     //счётчик событий (кликов кнопки)
;//массив для цифр четырехразрядного шестнадцатеричного числа
;unsigned char DIGITS[4]={0,0,0,0};
;// External Interrupt 1 service routine Обработчик внешнего прерывания INT1
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0010 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0011 // Place your code here
; 0000 0012 int i;
; 0000 0013 delay_ms(3);                //антидребезговая задержка
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	i -> R16,R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0014 counter++;                  //инкремент счётчика
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0015 //Нахождение всех цифр шестнадцатеричного числа и запись их в массив DIGITS[4], начиная со старшей
; 0000 0016 for (i=0;i<4;i++)
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0017     {
; 0000 0018     DIGITS[i]=(((char)(counter>>(4*(3-i)))) & 0b00001111);  //нахождение очередной цифры шестнадцатиричного числа
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0019     };
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 001A GIFR|=0b10000000;       //сброс флага прерывания INT1, который установится повторно из-за дребезга
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 001B }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;
;void main(void)
; 0000 001E {
;PCODE: $00000038 VOL: 0
; 0000 001F // Declare your local variables here
; 0000 0020 
; 0000 0021 // Port B initialization Младшая тетрада - на вывод для включения катодных ключей (выбора знакомест)
; 0000 0022 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0023 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0024 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0025 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0026 
; 0000 0027 // Port C initialization На вывод для зажигания сегментов графики знака
; 0000 0028 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0029 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 002A // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 002B PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 002C 
; 0000 002D // External Interrupt(s) initialization
; 0000 002E // INT0: Off
; 0000 002F // INT1: On
; 0000 0030 // INT1 Mode: Falling Edge
; 0000 0031 // INT2: Off
; 0000 0032 GICR|=(1<<INT1) | (0<<INT0) | (0<<INT2);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0033 MCUCR=(1<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0034 MCUCSR=(0<<ISC2);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0035 //GIFR=(1<<INTF1) | (0<<INTF0) | (0<<INTF2);
; 0000 0036 
; 0000 0037 // Global enable interrupts
; 0000 0038 #asm("sei")
;PCODE: $00000048 VOL: 0
	sei
;PCODE: $00000049 VOL: 0
; 0000 0039 
; 0000 003A while (1)
;PCODE: $0000004A VOL: 0
; 0000 003B       {
; 0000 003C       // Place your code here
; 0000 003D       unsigned char i;                      //индекс элемента массива шестнадщатеричных цифр числа
; 0000 003E       for (i=0; i<4; i++)                   //отображение по очереди всех цифр числа
;PCODE: $0000004B VOL: 0
;	i -> Y+0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 003F             {
; 0000 0040             PORTB=0b1000>>i;                //Активизируем очередной общий катод
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0041             PORTC=GRAPH_HEX[DIGITS[i]];     //Код 7-сег. дисплея для очередного знакоместа (очередная цифра)
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0042             delay_ms(4);                    //Задержка для подсветки очередного знакоместа
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0043             PORTB=0x00;                     //Гашение текущего знакоместа (нужно только для инд. PROTEUS)
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0044             //PORTC=0;                      //Для реальных в гашении нет необходимости (если только
; 0000 0045             delay_us(5);                    //не стоит задача регулировки яркости свечения индикатора)
;PCODE: $00000067 VOL: 0
; 0000 0046             }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0047       }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0048 }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
