;/*******************************************************
;Chip type               : ATmega328P
;AVR Core Clock frequency: 16,000000 MHz
;*******************************************************/
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Declare your global variables here
;//Определение линий портов для SPI МК Atmega328p
;#define SS PORTB2
;#define SCK PORTB5
;#define MOSI PORTB3
;
;//Определение адресов функциональных регистров max7219
;#define Intensity   0x0A        // интенсивность свечения дисплея
;#define ScanLimit   0x0B        // подключение числа столбцов
;#define ShutDown    0x0C        // погасить дисплей
;#define DecodeMode  0x09        // режим декодирования
;
;long int freq;
;   char i;
;   int a;
;void SET(char addr, char data);
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0018 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0019     freq++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001A }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 001D {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001E // Place your code here
; 0000 001F // TCNT1H=0x00;
; 0000 0020 //TCNT1L=0x00;
; 0000 0021 freq=0;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0022 
; 0000 0023 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0024 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0025 }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;
;// Timer1 output compare A interrupt service routine, обработчик прерывания по совпадению A
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 002A {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10); //отключение счётчика
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002C //TCNT1H=0x00;        //Обнуление счетного регистра TC1
; 0000 002D //TCNT1L=0x00;        //для того, чтобы последующее измерение было верным
; 0000 002E //OCR1AH=0x0B;
; 0000 002F //OCR1AL=0xDC;
; 0000 0030 
; 0000 0031  for(i=0;i<8;i++)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0032  {
; 0000 0033  SET(i+1,i);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0034 
; 0000 0035  }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0036  freq=0;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0037 }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;
;
;
;/*ФУНКЦИЯ ПЕРЕДАЧИ БАЙТА ПО SPI-ИНТЕРФЕЙСУ ОТ MASTER-устройства(МК)*/
;void SPI_MasterTransmit(char d) //в переменную d принимаем байт для отправки по SPI интерфейсу
; 0000 003D   {
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003E   SPDR = d;                     //передаем байт в сдвиговый регистр SPDR
;PCODE: $0000003C VOL: 0
;	d -> Y+0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 003F   while(~SPSR & (1<<SPIF));     //ждем пока появится 1 в разряде SPIF (7) регистра
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0040                                 //SPSR - признак завершения передачи байта
; 0000 0041   }                             //байт передан устройству Slave, возврат
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;/*ФУНКЦИЯ ОТПРАВКИ АДРЕСА И ДАННЫХ ИМС MAX7219 ПО SPI-ИНТЕРФЕЙСУ*/
;void SET(char addr, char data)
; 0000 0045 {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0046 PORTB&=~(1<<SS);    //на /SS установить 0 для выбора ведомого устройства (MAX7219)
;PCODE: $0000004B VOL: 0
;	addr -> Y+1
;	data -> Y+0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0047 //Отправляем по SPI старший байт, содержащий в младшей тетраде адрес функционального регистра,
; 0000 0048 SPI_MasterTransmit(addr);       //отправляем по SPI addr:
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0049 //Отправляем младший байт - данные режима
; 0000 004A SPI_MasterTransmit(data);       //Отправляем по SPI data
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 004B //на /SS установить 1, т.е. отключить MAX7219 и одновременно защелкнуть в нём 16-битное слово
; 0000 004C PORTB|=(1<<SS);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 004D }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;
;
;/*ГЛАВНАЯ ФУНКЦИЯ*/
;void main(void)
; 0000 0053 {
;PCODE: $00000057 VOL: 0
; 0000 0054 // Declare your local variables here
; 0000 0055 
; 0000 0056 
; 0000 0057 // External Interrupt(s) initialization
; 0000 0058 // INT0: On
; 0000 0059 // INT0 Mode: Low level
; 0000 005A // INT1: On
; 0000 005B // INT1 Mode: Rising Edge
; 0000 005C // Interrupt on any change on pins PCINT0-7: Off
; 0000 005D // Interrupt on any change on pins PCINT8-14: Off
; 0000 005E // Interrupt on any change on pins PCINT16-23: Off
; 0000 005F EICRA=(1<<ISC11) | (1<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0060 EIMSK=(1<<INT1) | (1<<INT0);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0061 EIFR=(1<<INTF1) | (1<<INTF0);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0062 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0063 
; 0000 0064 // Crystal Oscillator division factor: 1
; 0000 0065 #pragma optsize-
; 0000 0066 CLKPR=(1<<CLKPCE);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0067 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0068 #ifdef _OPTIMIZE_SIZE_
; 0000 0069 #pragma optsize+
; 0000 006A #endif
; 0000 006B 
; 0000 006C 
; 0000 006D // Timer/Counter 0 initialization
; 0000 006E // Clock source: T0 pin Rising Edge
; 0000 006F // Mode: Normal top=0xFF
; 0000 0070 // OC0A output: Disconnected
; 0000 0071 // OC0B output: Disconnected
; 0000 0072 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0073 TCCR0B=(0<<WGM02) | (1<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0074 TCNT0=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0075 OCR0A=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0076 OCR0B=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0077 
; 0000 0078 // Timer/Counter 1 initialization
; 0000 0079 // Clock source: System Clock
; 0000 007A // Clock value: 16000,000 kHz
; 0000 007B // Mode: CTC top=OCR1A
; 0000 007C // OC1A output: Disconnected
; 0000 007D // OC1B output: Disconnected
; 0000 007E // Noise Canceler: Off
; 0000 007F // Input Capture on Falling Edge
; 0000 0080 // Timer Period: 1 ms
; 0000 0081 // Timer1 Overflow Interrupt: On
; 0000 0082 // Input Capture Interrupt: Off
; 0000 0083 // Compare A Match Interrupt: On
; 0000 0084 // Compare B Match Interrupt: Off
; 0000 0085 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0086 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0087 TCNT1H=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0088 TCNT1L=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0089 ICR1H=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 008A ICR1L=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 008B OCR1AH=0xFF;// 0x3E
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 008C OCR1AL=0x7F;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 008D OCR1BH=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 008E OCR1BL=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 008F 
; 0000 0090 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0091 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (1<<OCIE1A) | (0<<TOIE1);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0092 
; 0000 0093 /*НАСТРОЙКА ПЕРИФЕРИИ*/
; 0000 0094 // Input/Output Ports initialization
; 0000 0095 // Port B initialization
; 0000 0096 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 0097 // Выходные линии инт. SPI:   PB5-SCK;               PB3-MOSI;    PB2-/SS
; 0000 0098 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0099 // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=0 Bit1=T Bit0=T
; 0000 009A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 009B 
; 0000 009C // SPI initialization
; 0000 009D // SPI Type: Master
; 0000 009E // SPI Clock Rate: 2*4000,000 kHz - максимально возможная скорость передачи по SPI для данного МК
; 0000 009F // SPI Clock Phase: Cycle Start
; 0000 00A0 // SPI Clock Polarity: Low
; 0000 00A1 // SPI Data Order: MSB First
; 0000 00A2 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00A3 SPSR=(1<<SPI2X);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00A4 
; 0000 00A5 // Инициализация Max7219
; 0000 00A6 SET(Intensity, 0x03);      // Установка интенсивности свечения (от 0 до F)
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00A7 SET(ScanLimit, 0x07);      // Индикация всех 8 знакомест 7SEG разрешена
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00A8 SET(ShutDown, 1);          // Установка режима индикации, а не выключения
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00A9 SET(DecodeMode, 0xFF);     // Установка режима декодирования (с декодированием встроенным знакогенератором)
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00AA 
; 0000 00AB #asm("sei");
;PCODE: $0000009C VOL: 0
	sei
;PCODE: $0000009D VOL: 0
; 0000 00AC while (1)
;PCODE: $0000009E VOL: 0
; 0000 00AD     {
; 0000 00AE 
; 0000 00AF     }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00B0 
; 0000 00B1 }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
