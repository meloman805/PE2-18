
AVRASM ver. 2.1.30  F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\Курсач\MAX7219_7SEG\Debug\List\7SEG.asm Mon Dec 20 22:46:32 2021

F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\Курсач\MAX7219_7SEG\Debug\List\7SEG.asm(1090): warning: Register r4 already defined by the .DEF directive
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\Курсач\MAX7219_7SEG\Debug\List\7SEG.asm(1091): warning: Register r5 already defined by the .DEF directive
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\Курсач\MAX7219_7SEG\Debug\List\7SEG.asm(1092): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 16,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _a=R5
                 	.DEF _a_msb=R6
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0034 	JMP  __RESET
000002 940c 0051 	JMP  _ext_int0_isr
000004 940c 006c 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0071 	JMP  _timer1_compa_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 __RESET:
000034 94f8      	CLI
000035 27ee      	CLR  R30
000036 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000037 e0f1      	LDI  R31,1
000038 bff5      	OUT  MCUCR,R31
000039 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003a e08d      	LDI  R24,(14-2)+1
00003b e0a2      	LDI  R26,2
00003c 27bb      	CLR  R27
                 __CLEAR_REG:
00003d 93ed      	ST   X+,R30
00003e 958a      	DEC  R24
00003f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000040 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000041 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000042 e0a0      	LDI  R26,LOW(__SRAM_START)
000043 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000044 93ed      	ST   X+,R30
000045 9701      	SBIW R24,1
000046 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GPIOR0 INITIALIZATION
000047 e0e0      	LDI  R30,__GPIOR0_INIT
000048 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000049 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00004a bfed      	OUT  SPL,R30
00004b e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004d e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004e e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004f 940c 00ad 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Chip type               : ATmega328P
                 ;AVR Core Clock frequency: 16,000000 MHz
                 ;*******************************************************/
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;// Declare your global variables here
                 ;//Определение линий портов для SPI МК Atmega328p
                 ;#define SS PORTB2
                 ;#define SCK PORTB5
                 ;#define MOSI PORTB3
                 ;
                 ;//Определение адресов функциональных регистров max7219
                 ;#define Intensity   0x0A        // интенсивность свечения дисплея
                 ;#define ScanLimit   0x0B        // подключение числа столбцов
                 ;#define ShutDown    0x0C        // погасить дисплей
                 ;#define DecodeMode  0x09        // режим декодирования
                 ;
                 ;long int freq;
                 ;   char i;
                 ;   int a;
                 ;void SET(char addr, char data);
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0018 {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000051 936a      	ST   -Y,R22
000052 937a      	ST   -Y,R23
000053 93aa      	ST   -Y,R26
000054 93ba      	ST   -Y,R27
000055 93ea      	ST   -Y,R30
000056 93fa      	ST   -Y,R31
000057 b7ef      	IN   R30,SREG
000058 93ea      	ST   -Y,R30
                 ; 0000 0019     freq++;
000059 e0a0      	LDI  R26,LOW(_freq)
00005a e0b3      	LDI  R27,HIGH(_freq)
00005b 940e 0107 	CALL __GETD1P_INC
                +
00005d 5fef     +SUBI R30 , LOW ( - 1 )
00005e 4fff     +SBCI R31 , HIGH ( - 1 )
00005f 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000060 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
000061 940e 010c 	CALL __PUTDP1_DEC
                 ; 0000 001A }
000063 91e9      	LD   R30,Y+
000064 bfef      	OUT  SREG,R30
000065 91f9      	LD   R31,Y+
000066 91e9      	LD   R30,Y+
000067 91b9      	LD   R27,Y+
000068 91a9      	LD   R26,Y+
000069 9179      	LD   R23,Y+
00006a 9169      	LD   R22,Y+
00006b 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 001D {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
00006c 93ea      	ST   -Y,R30
                 ; 0000 001E // Place your code here
                 ; 0000 001F // TCNT1H=0x00;
                 ; 0000 0020 //TCNT1L=0x00;
                 ; 0000 0021 freq=0;
00006d d088      	RCALL SUBOPT_0x0
                 ; 0000 0022 
                 ; 0000 0023 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00006e d091      	RCALL SUBOPT_0x1
                 ; 0000 0024 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
                 ; 0000 0025 }
00006f 91e9      	LD   R30,Y+
000070 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;// Timer1 output compare A interrupt service routine, обработчик прерывания по совпадению A
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 002A {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
000071 920a      	ST   -Y,R0
000072 921a      	ST   -Y,R1
000073 92fa      	ST   -Y,R15
000074 936a      	ST   -Y,R22
000075 937a      	ST   -Y,R23
000076 938a      	ST   -Y,R24
000077 939a      	ST   -Y,R25
000078 93aa      	ST   -Y,R26
000079 93ba      	ST   -Y,R27
00007a 93ea      	ST   -Y,R30
00007b 93fa      	ST   -Y,R31
00007c b7ef      	IN   R30,SREG
00007d 93ea      	ST   -Y,R30
                 ; 0000 002B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10); //отключение счётчика
00007e e0e0      	LDI  R30,LOW(0)
00007f 93e0 0081 	STS  129,R30
                 ; 0000 002C //TCNT1H=0x00;        //Обнуление счетного регистра TC1
                 ; 0000 002D //TCNT1L=0x00;        //для того, чтобы последующее измерение было верным
                 ; 0000 002E //OCR1AH=0x0B;
                 ; 0000 002F //OCR1AL=0xDC;
                 ; 0000 0030 
                 ; 0000 0031  for(i=0;i<8;i++)
000081 2444      	CLR  R4
                 _0x4:
000082 e0e8      	LDI  R30,LOW(8)
000083 164e      	CP   R4,R30
000084 f438      	BRSH _0x5
                 ; 0000 0032  {
                 ; 0000 0033  SET(i+1,i);
000085 2de4      	MOV  R30,R4
000086 5fef      	SUBI R30,-LOW(1)
000087 93ea      	ST   -Y,R30
000088 2da4      	MOV  R26,R4
000089 d01a      	RCALL _SET
                 ; 0000 0034 
                 ; 0000 0035  }
00008a 9443      	INC  R4
00008b cff6      	RJMP _0x4
                 _0x5:
                 ; 0000 0036  freq=0;
00008c d069      	RCALL SUBOPT_0x0
                 ; 0000 0037 }
00008d 91e9      	LD   R30,Y+
00008e bfef      	OUT  SREG,R30
00008f 91f9      	LD   R31,Y+
000090 91e9      	LD   R30,Y+
000091 91b9      	LD   R27,Y+
000092 91a9      	LD   R26,Y+
000093 9199      	LD   R25,Y+
000094 9189      	LD   R24,Y+
000095 9179      	LD   R23,Y+
000096 9169      	LD   R22,Y+
000097 90f9      	LD   R15,Y+
000098 9019      	LD   R1,Y+
000099 9009      	LD   R0,Y+
00009a 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;/*ФУНКЦИЯ ПЕРЕДАЧИ БАЙТА ПО SPI-ИНТЕРФЕЙСУ ОТ MASTER-устройства(МК)*/
                 ;void SPI_MasterTransmit(char d) //в переменную d принимаем байт для отправки по SPI интерфейсу
                 ; 0000 003D   {
                 _SPI_MasterTransmit:
                 ; .FSTART _SPI_MasterTransmit
                 ; 0000 003E   SPDR = d;                     //передаем байт в сдвиговый регистр SPDR
00009b 93aa      	ST   -Y,R26
                 ;	d -> Y+0
00009c 81e8      	LD   R30,Y
00009d bdee      	OUT  0x2E,R30
                 ; 0000 003F   while(~SPSR & (1<<SPIF));     //ждем пока появится 1 в разряде SPIF (7) регистра
                 _0x6:
00009e b5ed      	IN   R30,0x2D
00009f 95e0      	COM  R30
0000a0 78e0      	ANDI R30,LOW(0x80)
0000a1 f7e1      	BRNE _0x6
                 ; 0000 0040                                 //SPSR - признак завершения передачи байта
                 ; 0000 0041   }                             //байт передан устройству Slave, возврат
0000a2 9621      	ADIW R28,1
0000a3 9508      	RET
                 ; .FEND
                 ;
                 ;/*ФУНКЦИЯ ОТПРАВКИ АДРЕСА И ДАННЫХ ИМС MAX7219 ПО SPI-ИНТЕРФЕЙСУ*/
                 ;void SET(char addr, char data)
                 ; 0000 0045 {
                 _SET:
                 ; .FSTART _SET
                 ; 0000 0046 PORTB&=~(1<<SS);    //на /SS установить 0 для выбора ведомого устройства (MAX7219)
0000a4 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	data -> Y+0
0000a5 982a      	CBI  0x5,2
                 ; 0000 0047 //Отправляем по SPI старший байт, содержащий в младшей тетраде адрес функционального регистра,
                 ; 0000 0048 SPI_MasterTransmit(addr);       //отправляем по SPI addr:
0000a6 81a9      	LDD  R26,Y+1
0000a7 dff3      	RCALL _SPI_MasterTransmit
                 ; 0000 0049 //Отправляем младший байт - данные режима
                 ; 0000 004A SPI_MasterTransmit(data);       //Отправляем по SPI data
0000a8 81a8      	LD   R26,Y
0000a9 dff1      	RCALL _SPI_MasterTransmit
                 ; 0000 004B //на /SS установить 1, т.е. отключить MAX7219 и одновременно защелкнуть в нём 16-битное слово
                 ; 0000 004C PORTB|=(1<<SS);
0000aa 9a2a      	SBI  0x5,2
                 ; 0000 004D }
0000ab 9622      	ADIW R28,2
0000ac 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;/*ГЛАВНАЯ ФУНКЦИЯ*/
                 ;void main(void)
                 ; 0000 0053 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0054 // Declare your local variables here
                 ; 0000 0055 
                 ; 0000 0056 
                 ; 0000 0057 // External Interrupt(s) initialization
                 ; 0000 0058 // INT0: On
                 ; 0000 0059 // INT0 Mode: Low level
                 ; 0000 005A // INT1: On
                 ; 0000 005B // INT1 Mode: Rising Edge
                 ; 0000 005C // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 005D // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 005E // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 005F EICRA=(1<<ISC11) | (1<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000ad e0ec      	LDI  R30,LOW(12)
0000ae 93e0 0069 	STS  105,R30
                 ; 0000 0060 EIMSK=(1<<INT1) | (1<<INT0);
0000b0 e0e3      	LDI  R30,LOW(3)
0000b1 bbed      	OUT  0x1D,R30
                 ; 0000 0061 EIFR=(1<<INTF1) | (1<<INTF0);
0000b2 bbec      	OUT  0x1C,R30
                 ; 0000 0062 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 93e0 0068 	STS  104,R30
                 ; 0000 0063 
                 ; 0000 0064 // Crystal Oscillator division factor: 1
                 ; 0000 0065 #pragma optsize-
                 ; 0000 0066 CLKPR=(1<<CLKPCE);
0000b6 e8e0      	LDI  R30,LOW(128)
0000b7 93e0 0061 	STS  97,R30
                 ; 0000 0067 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
0000b9 e0e0      	LDI  R30,LOW(0)
0000ba 93e0 0061 	STS  97,R30
                 ; 0000 0068 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0069 #pragma optsize+
                 ; 0000 006A #endif
                 ; 0000 006B 
                 ; 0000 006C 
                 ; 0000 006D // Timer/Counter 0 initialization
                 ; 0000 006E // Clock source: T0 pin Rising Edge
                 ; 0000 006F // Mode: Normal top=0xFF
                 ; 0000 0070 // OC0A output: Disconnected
                 ; 0000 0071 // OC0B output: Disconnected
                 ; 0000 0072 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
0000bc bde4      	OUT  0x24,R30
                 ; 0000 0073 TCCR0B=(0<<WGM02) | (1<<CS02) | (1<<CS01) | (1<<CS00);
0000bd e0e7      	LDI  R30,LOW(7)
0000be bde5      	OUT  0x25,R30
                 ; 0000 0074 TCNT0=0x00;
0000bf e0e0      	LDI  R30,LOW(0)
0000c0 bde6      	OUT  0x26,R30
                 ; 0000 0075 OCR0A=0x00;
0000c1 bde7      	OUT  0x27,R30
                 ; 0000 0076 OCR0B=0x00;
0000c2 bde8      	OUT  0x28,R30
                 ; 0000 0077 
                 ; 0000 0078 // Timer/Counter 1 initialization
                 ; 0000 0079 // Clock source: System Clock
                 ; 0000 007A // Clock value: 16000,000 kHz
                 ; 0000 007B // Mode: CTC top=OCR1A
                 ; 0000 007C // OC1A output: Disconnected
                 ; 0000 007D // OC1B output: Disconnected
                 ; 0000 007E // Noise Canceler: Off
                 ; 0000 007F // Input Capture on Falling Edge
                 ; 0000 0080 // Timer Period: 1 ms
                 ; 0000 0081 // Timer1 Overflow Interrupt: On
                 ; 0000 0082 // Input Capture Interrupt: Off
                 ; 0000 0083 // Compare A Match Interrupt: On
                 ; 0000 0084 // Compare B Match Interrupt: Off
                 ; 0000 0085 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000c3 d03c      	RCALL SUBOPT_0x1
                 ; 0000 0086 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
                 ; 0000 0087 TCNT1H=0x00;
0000c4 e0e0      	LDI  R30,LOW(0)
0000c5 93e0 0085 	STS  133,R30
                 ; 0000 0088 TCNT1L=0x00;
0000c7 93e0 0084 	STS  132,R30
                 ; 0000 0089 ICR1H=0x00;
0000c9 93e0 0087 	STS  135,R30
                 ; 0000 008A ICR1L=0x00;
0000cb 93e0 0086 	STS  134,R30
                 ; 0000 008B OCR1AH=0xFF;// 0x3E
0000cd efef      	LDI  R30,LOW(255)
0000ce 93e0 0089 	STS  137,R30
                 ; 0000 008C OCR1AL=0x7F;
0000d0 e7ef      	LDI  R30,LOW(127)
0000d1 93e0 0088 	STS  136,R30
                 ; 0000 008D OCR1BH=0x00;
0000d3 e0e0      	LDI  R30,LOW(0)
0000d4 93e0 008b 	STS  139,R30
                 ; 0000 008E OCR1BL=0x00;
0000d6 93e0 008a 	STS  138,R30
                 ; 0000 008F 
                 ; 0000 0090 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0091 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (1<<OCIE1A) | (0<<TOIE1);
0000d8 e0e2      	LDI  R30,LOW(2)
0000d9 93e0 006f 	STS  111,R30
                 ; 0000 0092 
                 ; 0000 0093 /*НАСТРОЙКА ПЕРИФЕРИИ*/
                 ; 0000 0094 // Input/Output Ports initialization
                 ; 0000 0095 // Port B initialization
                 ; 0000 0096 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=In Bit0=In
                 ; 0000 0097 // Выходные линии инт. SPI:   PB5-SCK;               PB3-MOSI;    PB2-/SS
                 ; 0000 0098 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000db e2ec      	LDI  R30,LOW(44)
0000dc b9e4      	OUT  0x4,R30
                 ; 0000 0099 // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=0 Bit1=T Bit0=T
                 ; 0000 009A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000dd e0e0      	LDI  R30,LOW(0)
0000de b9e5      	OUT  0x5,R30
                 ; 0000 009B 
                 ; 0000 009C // SPI initialization
                 ; 0000 009D // SPI Type: Master
                 ; 0000 009E // SPI Clock Rate: 2*4000,000 kHz - максимально возможная скорость передачи по SPI для данного МК
                 ; 0000 009F // SPI Clock Phase: Cycle Start
                 ; 0000 00A0 // SPI Clock Polarity: Low
                 ; 0000 00A1 // SPI Data Order: MSB First
                 ; 0000 00A2 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000df e5e0      	LDI  R30,LOW(80)
0000e0 bdec      	OUT  0x2C,R30
                 ; 0000 00A3 SPSR=(1<<SPI2X);
0000e1 e0e1      	LDI  R30,LOW(1)
0000e2 bded      	OUT  0x2D,R30
                 ; 0000 00A4 
                 ; 0000 00A5 // Инициализация Max7219
                 ; 0000 00A6 SET(Intensity, 0x03);      // Установка интенсивности свечения (от 0 до F)
0000e3 e0ea      	LDI  R30,LOW(10)
0000e4 93ea      	ST   -Y,R30
0000e5 e0a3      	LDI  R26,LOW(3)
0000e6 dfbd      	RCALL _SET
                 ; 0000 00A7 SET(ScanLimit, 0x07);      // Индикация всех 8 знакомест 7SEG разрешена
0000e7 e0eb      	LDI  R30,LOW(11)
0000e8 93ea      	ST   -Y,R30
0000e9 e0a7      	LDI  R26,LOW(7)
0000ea dfb9      	RCALL _SET
                 ; 0000 00A8 SET(ShutDown, 1);          // Установка режима индикации, а не выключения
0000eb e0ec      	LDI  R30,LOW(12)
0000ec 93ea      	ST   -Y,R30
0000ed e0a1      	LDI  R26,LOW(1)
0000ee dfb5      	RCALL _SET
                 ; 0000 00A9 SET(DecodeMode, 0xFF);     // Установка режима декодирования (с декодированием встроенным знакогенератором)
0000ef e0e9      	LDI  R30,LOW(9)
0000f0 93ea      	ST   -Y,R30
0000f1 efaf      	LDI  R26,LOW(255)
0000f2 dfb1      	RCALL _SET
                 ; 0000 00AA 
                 ; 0000 00AB #asm("sei");
0000f3 9478      	sei
                 ; 0000 00AC while (1)
                 _0x9:
                 ; 0000 00AD     {
                 ; 0000 00AE 
                 ; 0000 00AF     }
0000f4 cfff      	RJMP _0x9
                 ; 0000 00B0 
                 ; 0000 00B1 }
                 _0xC:
0000f5 cfff      	RJMP _0xC
                 ; .FEND
                 
                 	.DSEG
                 _freq:
000300           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
0000f6 e0e0      	LDI  R30,LOW(0)
0000f7 93e0 0300 	STS  _freq,R30
0000f9 93e0 0301 	STS  _freq+1,R30
0000fb 93e0 0302 	STS  _freq+2,R30
0000fd 93e0 0303 	STS  _freq+3,R30
0000ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000100 e0e0      	LDI  R30,LOW(0)
000101 93e0 0080 	STS  128,R30
000103 e0e9      	LDI  R30,LOW(9)
000104 93e0 0081 	STS  129,R30
000106 9508      	RET
                 
                 
                 	.CSEG
                 __GETD1P_INC:
000107 91ed      	LD   R30,X+
000108 91fd      	LD   R31,X+
000109 916d      	LD   R22,X+
00010a 917d      	LD   R23,X+
00010b 9508      	RET
                 
                 __PUTDP1_DEC:
00010c 937e      	ST   -X,R23
00010d 936e      	ST   -X,R22
00010e 93fe      	ST   -X,R31
00010f 93ee      	ST   -X,R30
000110 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   2 r1 :   2 r2 :   0 r3 :   0 r4 :   5 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   7 r23:   7 
r24:   6 r25:   3 r26:  16 r27:   7 r28:   3 r29:   1 r30:  97 r31:   9 
x  :  10 y  :  50 z  :   0 
Registers used: 16 out of 35 (45.7%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   2 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   0 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   3 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   2 
cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   1 
cp    :   1 cpc   :   0 cpi   :   0 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   1 jmp   :  27 ld    :  26 ldd   :   1 ldi   :  43 
lds   :   0 lpm   :   0 lsl   :   0 lsr   :   0 mov   :   2 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  20 pop   :   0 push  :   0 rcall :  11 ret   :   6 
reti  :   3 rjmp  :   3 rol   :   0 ror   :   0 sbc   :   0 sbci  :   3 
sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  33 std   :   0 sts   :  20 sub   :   0 subi  :   2 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 30 out of 116 (25.9%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000222    546      0    546   32768   1.7%
[.dseg] 0x000100 0x000304      0      4      4    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
