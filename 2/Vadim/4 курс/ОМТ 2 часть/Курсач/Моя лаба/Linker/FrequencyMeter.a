;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Declare your global variables here
;//Определение линий портов для SPI МК Atmega328p
;#define SS PORTB4
;#define SCK PORTB7
;#define MOSI PORTB5
; void SET(char addr, char data);
;//Определение адресов функциональных регистров max7219
;#define Intensity   0x0A        // интенсивность свечения дисплея
;#define ScanLimit   0x0B        // подключение числа столбцов
;#define ShutDown    0x0C        // погасить дисплей
;#define DecodeMode  0x09        // режим декодирования
;
;int FREQH=0;
;int DISPL=0;
;int i;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0015 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0016 // Place your code here
; 0000 0017  FREQH++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0018  DISPL= FREQH;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0019  for(i=0;i<8;i++)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001A  {
; 0000 001B  SET(i+1,DISPL%10);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 001C   DISPL= DISPL/10;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 001D  }
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 001E }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;
;// External Interrupt 1 service routine, обработчик внешнего прерывания INT1
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0022 {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0023 FREQH=0;             //обнуления счётчика переполнения старшего регистра
;PCODE: $00000034 VOL: 0
; 0000 0024 TCNT0=0x00;         //запуск ТС0 с нуля
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0025 TCCR0=0x07;         //в режиме счета импульсов с внешнего входа PB0/T0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0026 TCCR1B=0x05;        //Запуск ТС1 - начало формирования Тэт
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0027 }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;
;// Timer1 output compare A interrupt service routine, обработчик прерывания по совпадению A
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 002B {
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 002C TCCR0=0x00;         //Останов TC0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 002D TCCR1B=0x00;        //Останов TC1
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 002E TCNT1H=0x00;        //Обнуление счетного регистра TC1
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 002F TCNT1L=0x00;        //для того, чтобы последующее измерение было верным
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0030 PORTA=TCNT0;        //Вывод в порт A частоты в герцах
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0031 TCNT2=FREQH;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0032 PORTC=FREQH;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0033 //SET(2,6);
; 0000 0034 
; 0000 0035 }
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;
;// Declare your global variables here
;
;/*ФУНКЦИЯ ПЕРЕДАЧИ БАЙТА ПО SPI-ИНТЕРФЕЙСУ ОТ MASTER-устройства(МК)*/
;void SPI_MasterTransmit(char d) //в переменную d принимаем байт для отправки по SPI интерфейсу
; 0000 003B   {
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 003C   SPDR = d;                     //передаем байт в сдвиговый регистр SPDR
;PCODE: $00000053 VOL: 0
;	d -> Y+0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 003D   while(~SPSR & (1<<SPIF));     //ждем пока появится 1 в разряде SPIF (7) регистра
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 003E                                 //SPSR - признак завершения передачи байта
; 0000 003F   }                             //байт передан устройству Slave, возврат
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;/*ФУНКЦИЯ ОТПРАВ    КИ АДРЕСА И ДАННЫХ ИМС MAX7219 ПО SPI-ИНТЕРФЕЙСУ*/
;void SET(char addr, char data)
; 0000 0043 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0044 PORTB&=~(1<<SS);    //на /SS установить 0 для выбора ведомого устройства (MAX7219)
;PCODE: $00000062 VOL: 0
;	addr -> Y+1
;	data -> Y+0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0045 //Отправляем по SPI старший байт, содержащий в младшей тетраде адрес функционального регистра,
; 0000 0046 SPI_MasterTransmit(addr);       //отправляем по SPI addr:
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0047 //Отправляем младший байт - данные режима
; 0000 0048 SPI_MasterTransmit(data);       //Отправляем по SPI data
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0049 //на /SS установить 1, т.е. отключить MAX7219 и одновременно защелкнуть в нём 16-битное слово
; 0000 004A PORTB|=(1<<SS);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 004B }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;
;void main(void)
; 0000 004E {
;PCODE: $0000006E VOL: 0
; 0000 004F // Declare your local variables here
; 0000 0050 
; 0000 0051 // Input/Output Ports initialization
; 0000 0052 // Port A initialization, Все разряды порта A - на вывод с нулевыми нач. значениями
; 0000 0053 PORTA=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0054 DDRA=0xFF;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0055 
; 0000 0056 
; 0000 0057 // Port B initialization
; 0000 0058 // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0059 DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 005A // State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 005C 
; 0000 005D // Port C initialization
; 0000 005E PORTC=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 005F DDRC=0xFF;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0060 
; 0000 0061 // Port D initialization
; 0000 0062 PORTD=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0063 DDRD=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0064 
; 0000 0065 
; 0000 0066 
; 0000 0067 // Timer/Counter 0 initialization
; 0000 0068 // Clock source: System Clock
; 0000 0069 // Clock value: Timer 0 Stopped
; 0000 006A // Mode: Normal top=FFh
; 0000 006B // OC0 output: Disconnected
; 0000 006C TCCR0=0x00;         //в исходном состоянии TC0 остановлен и обнулен
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 006D TCNT0=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 006E OCR0=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 006F 
; 0000 0070 // Timer/Counter 1 initialization
; 0000 0071 // Clock source: System Clock
; 0000 0072 // Clock value: Timer1 Stopped
; 0000 0073 // Mode: Normal top=FFFFh
; 0000 0074 // OC1A output: Discon.
; 0000 0075 // OC1B output: Discon.
; 0000 0076 // Noise Canceler: Off
; 0000 0077 // Input Capture on Falling Edge
; 0000 0078 // Timer1 Overflow Interrupt: Off
; 0000 0079 // Input Capture Interrupt: Off
; 0000 007A // Compare A Match Interrupt: On
; 0000 007B // Compare B Match Interrupt: Off
; 0000 007C TCCR1A=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 007D TCCR1B=0x00;        //В исходном состоянии TC1 остановлен и обнулен
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 007E TCNT1H=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 007F TCNT1L=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0080 ICR1H=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0081 ICR1L=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0082 OCR1AH=0x1E;        //Занесение в регистр сравнения A значения
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0083 OCR1AL=0x83;        //для формирования Tэт=1сек (7813)
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0084 OCR1BH=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0085 OCR1BL=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0086 
; 0000 0087 // External Interrupt(s) initialization
; 0000 0088 // INT0: Off
; 0000 0089 // INT1: On
; 0000 008A // INT1 Mode: Rising Edge
; 0000 008B // INT2: Off
; 0000 008C GICR|=1<<INT1;              //Разрешение внешнего прерывания INT1
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 008D MCUCR=1<<ISC11 | 1<<ISC10;  //Запуск - по переднему фронту
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 008E MCUCSR=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 008F GIFR=1<<INTF1;				//Сброс флага прерывания
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0090 
; 0000 0091 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0092 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);	//Разреш ...
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0093 
; 0000 0094 // Analog Comparator initialization
; 0000 0095 // Analog Comparator: Off
; 0000 0096 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0097 ACSR=0x80;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0098 SFIOR=0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0099 
; 0000 009A 
; 0000 009B // SPI initialization
; 0000 009C // SPI Type: Master
; 0000 009D // SPI Clock Rate: 2000,000 kHz
; 0000 009E // SPI Clock Phase: Cycle Start
; 0000 009F // SPI Clock Polarity: Low
; 0000 00A0 // SPI Data Order: MSB First
; 0000 00A1 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00A2 SPSR=(1<<SPI2X);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00A3 
; 0000 00A4 // Инициализация Max7219
; 0000 00A5 SET(Intensity, 0x03);      // Установка интенсивности свечения (от 0 до F)
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00A6 SET(ScanLimit, 0x07);      // Индикация всех 8 знакомест 7SEG разрешена
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00A7 SET(ShutDown, 1);          // Установка режима индикации, а не выключения
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00A8 SET(DecodeMode, 0xFF);     // Установка режима декодирования (с декодированием встроенным знакогенератором)
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00A9 // Global enable interrupts
; 0000 00AA #asm("sei")         //Разрешение прерываний
;PCODE: $000000BC VOL: 0
	sei
;PCODE: $000000BD VOL: 0
; 0000 00AB 
; 0000 00AC while (1)           //Бесконечный цикл
;PCODE: $000000BE VOL: 0
; 0000 00AD       {
; 0000 00AE 
; 0000 00AF       };
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00B0 }
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
