
AVRASM ver. 2.1.30  F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\Курсач\Моя лаба\List\FrequencyMeter.asm Wed Dec 22 22:05:47 2021

F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\Курсач\Моя лаба\List\FrequencyMeter.asm(1088): warning: Register r4 already defined by the .DEF directive
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\Курсач\Моя лаба\List\FrequencyMeter.asm(1089): warning: Register r5 already defined by the .DEF directive
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\Курсач\Моя лаба\List\FrequencyMeter.asm(1090): warning: Register r6 already defined by the .DEF directive
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\Курсач\Моя лаба\List\FrequencyMeter.asm(1091): warning: Register r7 already defined by the .DEF directive
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\Курсач\Моя лаба\List\FrequencyMeter.asm(1092): warning: Register r8 already defined by the .DEF directive
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\Курсач\Моя лаба\List\FrequencyMeter.asm(1093): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _FREQH=R4
                 	.DEF _FREQH_msb=R5
                 	.DEF _DISPL=R6
                 	.DEF _DISPL_msb=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0030 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 009a 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 00a9 	JMP  _timer1_compa_isr
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0060 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
00002c 0004      	.DW  0x04
00002d 0004      	.DW  0x04
00002e 0054      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00002f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000030 94f8      	CLI
000031 27ee      	CLR  R30
000032 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000033 e0f1      	LDI  R31,1
000034 bffb      	OUT  GICR,R31
000035 bfeb      	OUT  GICR,R30
000036 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000037 e1f8      	LDI  R31,0x18
000038 bdf1      	OUT  WDTCR,R31
000039 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00003a e08d      	LDI  R24,(14-2)+1
00003b e0a2      	LDI  R26,2
00003c 27bb      	CLR  R27
                 __CLEAR_REG:
00003d 93ed      	ST   X+,R30
00003e 958a      	DEC  R24
00003f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000040 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000041 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000042 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000043 93ed      	ST   X+,R30
000044 9701      	SBIW R24,1
000045 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000046 e5e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000047 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000048 9185      	LPM  R24,Z+
000049 9195      	LPM  R25,Z+
00004a 9700      	SBIW R24,0
00004b f061      	BREQ __GLOBAL_INI_END
00004c 91a5      	LPM  R26,Z+
00004d 91b5      	LPM  R27,Z+
00004e 9005      	LPM  R0,Z+
00004f 9015      	LPM  R1,Z+
000050 01bf      	MOVW R22,R30
000051 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000052 9005      	LPM  R0,Z+
000053 920d      	ST   X+,R0
000054 9701      	SBIW R24,1
000055 f7e1      	BRNE __GLOBAL_INI_LOOP
000056 01fb      	MOVW R30,R22
000057 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000058 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000059 bfed      	OUT  SPL,R30
00005a e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005d e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005e 940c 00c5 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;// Declare your global variables here
                 ;//Определение линий портов для SPI МК Atmega328p
                 ;#define SS PORTB4
                 ;#define SCK PORTB7
                 ;#define MOSI PORTB5
                 ; void SET(char addr, char data);
                 ;//Определение адресов функциональных регистров max7219
                 ;#define Intensity   0x0A        // интенсивность свечения дисплея
                 ;#define ScanLimit   0x0B        // подключение числа столбцов
                 ;#define ShutDown    0x0C        // погасить дисплей
                 ;#define DecodeMode  0x09        // режим декодирования
                 ;
                 ;int FREQH=0;
                 ;int DISPL=0;
                 ;int i;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0015 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000060 920a      	ST   -Y,R0
000061 921a      	ST   -Y,R1
000062 92fa      	ST   -Y,R15
000063 936a      	ST   -Y,R22
000064 937a      	ST   -Y,R23
000065 938a      	ST   -Y,R24
000066 939a      	ST   -Y,R25
000067 93aa      	ST   -Y,R26
000068 93ba      	ST   -Y,R27
000069 93ea      	ST   -Y,R30
00006a 93fa      	ST   -Y,R31
00006b b7ef      	IN   R30,SREG
00006c 93ea      	ST   -Y,R30
                 ; 0000 0016 // Place your code here
                 ; 0000 0017  FREQH++;
00006d 01f2      	MOVW R30,R4
00006e 9631      	ADIW R30,1
00006f 012f      	MOVW R4,R30
                 ; 0000 0018  DISPL= FREQH;
000070 0132      	MOVW R6,R4
                 ; 0000 0019  for(i=0;i<8;i++)
000071 2488      	CLR  R8
000072 2499      	CLR  R9
                 _0x4:
000073 e0e8      	LDI  R30,LOW(8)
000074 e0f0      	LDI  R31,HIGH(8)
000075 168e      	CP   R8,R30
000076 069f      	CPC  R9,R31
000077 f4a4      	BRGE _0x5
                 ; 0000 001A  {
                 ; 0000 001B  SET(i+1,DISPL%10);
000078 2de8      	MOV  R30,R8
000079 5fef      	SUBI R30,-LOW(1)
00007a 93ea      	ST   -Y,R30
00007b 01d3      	MOVW R26,R6
00007c e0ea      	LDI  R30,LOW(10)
00007d e0f0      	LDI  R31,HIGH(10)
00007e 940e 0129 	CALL __MODW21
000080 2fae      	MOV  R26,R30
000081 d03a      	RCALL _SET
                 ; 0000 001C   DISPL= DISPL/10;
000082 01d3      	MOVW R26,R6
000083 e0ea      	LDI  R30,LOW(10)
000084 e0f0      	LDI  R31,HIGH(10)
000085 940e 0124 	CALL __DIVW21
000087 013f      	MOVW R6,R30
                 ; 0000 001D  }
000088 01f4      	MOVW R30,R8
000089 9631      	ADIW R30,1
00008a 014f      	MOVW R8,R30
00008b cfe7      	RJMP _0x4
                 _0x5:
                 ; 0000 001E }
00008c 91e9      	LD   R30,Y+
00008d bfef      	OUT  SREG,R30
00008e 91f9      	LD   R31,Y+
00008f 91e9      	LD   R30,Y+
000090 91b9      	LD   R27,Y+
000091 91a9      	LD   R26,Y+
000092 9199      	LD   R25,Y+
000093 9189      	LD   R24,Y+
000094 9179      	LD   R23,Y+
000095 9169      	LD   R22,Y+
000096 90f9      	LD   R15,Y+
000097 9019      	LD   R1,Y+
000098 9009      	LD   R0,Y+
000099 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 1 service routine, обработчик внешнего прерывания INT1
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0022 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
00009a 93ea      	ST   -Y,R30
00009b b7ef      	IN   R30,SREG
00009c 93ea      	ST   -Y,R30
                 ; 0000 0023 FREQH=0;             //обнуления счётчика переполнения старшего регистра
00009d 2444      	CLR  R4
00009e 2455      	CLR  R5
                 ; 0000 0024 TCNT0=0x00;         //запуск ТС0 с нуля
00009f e0e0      	LDI  R30,LOW(0)
0000a0 bfe2      	OUT  0x32,R30
                 ; 0000 0025 TCCR0=0x07;         //в режиме счета импульсов с внешнего входа PB0/T0
0000a1 e0e7      	LDI  R30,LOW(7)
0000a2 bfe3      	OUT  0x33,R30
                 ; 0000 0026 TCCR1B=0x05;        //Запуск ТС1 - начало формирования Тэт
0000a3 e0e5      	LDI  R30,LOW(5)
0000a4 bdee      	OUT  0x2E,R30
                 ; 0000 0027 }
0000a5 91e9      	LD   R30,Y+
0000a6 bfef      	OUT  SREG,R30
0000a7 91e9      	LD   R30,Y+
0000a8 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer1 output compare A interrupt service routine, обработчик прерывания по совпадению A
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 002B {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
0000a9 93ea      	ST   -Y,R30
                 ; 0000 002C TCCR0=0x00;         //Останов TC0
0000aa e0e0      	LDI  R30,LOW(0)
0000ab bfe3      	OUT  0x33,R30
                 ; 0000 002D TCCR1B=0x00;        //Останов TC1
0000ac d05b      	RCALL SUBOPT_0x0
                 ; 0000 002E TCNT1H=0x00;        //Обнуление счетного регистра TC1
                 ; 0000 002F TCNT1L=0x00;        //для того, чтобы последующее измерение было верным
                 ; 0000 0030 PORTA=TCNT0;        //Вывод в порт A частоты в герцах
0000ad b7e2      	IN   R30,0x32
0000ae bbeb      	OUT  0x1B,R30
                 ; 0000 0031 TCNT2=FREQH;
0000af bc44      	OUT  0x24,R4
                 ; 0000 0032 PORTC=FREQH;
0000b0 ba45      	OUT  0x15,R4
                 ; 0000 0033 //SET(2,6);
                 ; 0000 0034 
                 ; 0000 0035 }
0000b1 91e9      	LD   R30,Y+
0000b2 9518      	RETI
                 ; .FEND
                 ;
                 ;// Declare your global variables here
                 ;
                 ;/*ФУНКЦИЯ ПЕРЕДАЧИ БАЙТА ПО SPI-ИНТЕРФЕЙСУ ОТ MASTER-устройства(МК)*/
                 ;void SPI_MasterTransmit(char d) //в переменную d принимаем байт для отправки по SPI интерфейсу
                 ; 0000 003B   {
                 _SPI_MasterTransmit:
                 ; .FSTART _SPI_MasterTransmit
                 ; 0000 003C   SPDR = d;                     //передаем байт в сдвиговый регистр SPDR
0000b3 93aa      	ST   -Y,R26
                 ;	d -> Y+0
0000b4 81e8      	LD   R30,Y
0000b5 b9ef      	OUT  0xF,R30
                 ; 0000 003D   while(~SPSR & (1<<SPIF));     //ждем пока появится 1 в разряде SPIF (7) регистра
                 _0x6:
0000b6 b1ee      	IN   R30,0xE
0000b7 95e0      	COM  R30
0000b8 78e0      	ANDI R30,LOW(0x80)
0000b9 f7e1      	BRNE _0x6
                 ; 0000 003E                                 //SPSR - признак завершения передачи байта
                 ; 0000 003F   }                             //байт передан устройству Slave, возврат
0000ba 9621      	ADIW R28,1
0000bb 9508      	RET
                 ; .FEND
                 ;
                 ;/*ФУНКЦИЯ ОТПРАВ    КИ АДРЕСА И ДАННЫХ ИМС MAX7219 ПО SPI-ИНТЕРФЕЙСУ*/
                 ;void SET(char addr, char data)
                 ; 0000 0043 {
                 _SET:
                 ; .FSTART _SET
                 ; 0000 0044 PORTB&=~(1<<SS);    //на /SS установить 0 для выбора ведомого устройства (MAX7219)
0000bc 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	data -> Y+0
0000bd 98c4      	CBI  0x18,4
                 ; 0000 0045 //Отправляем по SPI старший байт, содержащий в младшей тетраде адрес функционального регистра,
                 ; 0000 0046 SPI_MasterTransmit(addr);       //отправляем по SPI addr:
0000be 81a9      	LDD  R26,Y+1
0000bf dff3      	RCALL _SPI_MasterTransmit
                 ; 0000 0047 //Отправляем младший байт - данные режима
                 ; 0000 0048 SPI_MasterTransmit(data);       //Отправляем по SPI data
0000c0 81a8      	LD   R26,Y
0000c1 dff1      	RCALL _SPI_MasterTransmit
                 ; 0000 0049 //на /SS установить 1, т.е. отключить MAX7219 и одновременно защелкнуть в нём 16-битное слово
                 ; 0000 004A PORTB|=(1<<SS);
0000c2 9ac4      	SBI  0x18,4
                 ; 0000 004B }
0000c3 9622      	ADIW R28,2
0000c4 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 004E {
                 _main:
                 ; .FSTART _main
                 ; 0000 004F // Declare your local variables here
                 ; 0000 0050 
                 ; 0000 0051 // Input/Output Ports initialization
                 ; 0000 0052 // Port A initialization, Все разряды порта A - на вывод с нулевыми нач. значениями
                 ; 0000 0053 PORTA=0x00;
0000c5 e0e0      	LDI  R30,LOW(0)
0000c6 bbeb      	OUT  0x1B,R30
                 ; 0000 0054 DDRA=0xFF;
0000c7 efef      	LDI  R30,LOW(255)
0000c8 bbea      	OUT  0x1A,R30
                 ; 0000 0055 
                 ; 0000 0056 
                 ; 0000 0057 // Port B initialization
                 ; 0000 0058 // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0059 DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000c9 ebe0      	LDI  R30,LOW(176)
0000ca bbe7      	OUT  0x17,R30
                 ; 0000 005A // State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000cb e0e0      	LDI  R30,LOW(0)
0000cc bbe8      	OUT  0x18,R30
                 ; 0000 005C 
                 ; 0000 005D // Port C initialization
                 ; 0000 005E PORTC=0x00;
0000cd bbe5      	OUT  0x15,R30
                 ; 0000 005F DDRC=0xFF;
0000ce efef      	LDI  R30,LOW(255)
0000cf bbe4      	OUT  0x14,R30
                 ; 0000 0060 
                 ; 0000 0061 // Port D initialization
                 ; 0000 0062 PORTD=0x00;
0000d0 e0e0      	LDI  R30,LOW(0)
0000d1 bbe2      	OUT  0x12,R30
                 ; 0000 0063 DDRD=0x00;
0000d2 bbe1      	OUT  0x11,R30
                 ; 0000 0064 
                 ; 0000 0065 
                 ; 0000 0066 
                 ; 0000 0067 // Timer/Counter 0 initialization
                 ; 0000 0068 // Clock source: System Clock
                 ; 0000 0069 // Clock value: Timer 0 Stopped
                 ; 0000 006A // Mode: Normal top=FFh
                 ; 0000 006B // OC0 output: Disconnected
                 ; 0000 006C TCCR0=0x00;         //в исходном состоянии TC0 остановлен и обнулен
0000d3 bfe3      	OUT  0x33,R30
                 ; 0000 006D TCNT0=0x00;
0000d4 bfe2      	OUT  0x32,R30
                 ; 0000 006E OCR0=0x00;
0000d5 bfec      	OUT  0x3C,R30
                 ; 0000 006F 
                 ; 0000 0070 // Timer/Counter 1 initialization
                 ; 0000 0071 // Clock source: System Clock
                 ; 0000 0072 // Clock value: Timer1 Stopped
                 ; 0000 0073 // Mode: Normal top=FFFFh
                 ; 0000 0074 // OC1A output: Discon.
                 ; 0000 0075 // OC1B output: Discon.
                 ; 0000 0076 // Noise Canceler: Off
                 ; 0000 0077 // Input Capture on Falling Edge
                 ; 0000 0078 // Timer1 Overflow Interrupt: Off
                 ; 0000 0079 // Input Capture Interrupt: Off
                 ; 0000 007A // Compare A Match Interrupt: On
                 ; 0000 007B // Compare B Match Interrupt: Off
                 ; 0000 007C TCCR1A=0x00;
0000d6 bdef      	OUT  0x2F,R30
                 ; 0000 007D TCCR1B=0x00;        //В исходном состоянии TC1 остановлен и обнулен
0000d7 d030      	RCALL SUBOPT_0x0
                 ; 0000 007E TCNT1H=0x00;
                 ; 0000 007F TCNT1L=0x00;
                 ; 0000 0080 ICR1H=0x00;
0000d8 e0e0      	LDI  R30,LOW(0)
0000d9 bde7      	OUT  0x27,R30
                 ; 0000 0081 ICR1L=0x00;
0000da bde6      	OUT  0x26,R30
                 ; 0000 0082 OCR1AH=0x1E;        //Занесение в регистр сравнения A значения
0000db e1ee      	LDI  R30,LOW(30)
0000dc bdeb      	OUT  0x2B,R30
                 ; 0000 0083 OCR1AL=0x83;        //для формирования Tэт=1сек (7813)
0000dd e8e3      	LDI  R30,LOW(131)
0000de bdea      	OUT  0x2A,R30
                 ; 0000 0084 OCR1BH=0x00;
0000df e0e0      	LDI  R30,LOW(0)
0000e0 bde9      	OUT  0x29,R30
                 ; 0000 0085 OCR1BL=0x00;
0000e1 bde8      	OUT  0x28,R30
                 ; 0000 0086 
                 ; 0000 0087 // External Interrupt(s) initialization
                 ; 0000 0088 // INT0: Off
                 ; 0000 0089 // INT1: On
                 ; 0000 008A // INT1 Mode: Rising Edge
                 ; 0000 008B // INT2: Off
                 ; 0000 008C GICR|=1<<INT1;              //Разрешение внешнего прерывания INT1
0000e2 b7eb      	IN   R30,0x3B
0000e3 68e0      	ORI  R30,0x80
0000e4 bfeb      	OUT  0x3B,R30
                 ; 0000 008D MCUCR=1<<ISC11 | 1<<ISC10;  //Запуск - по переднему фронту
0000e5 e0ec      	LDI  R30,LOW(12)
0000e6 bfe5      	OUT  0x35,R30
                 ; 0000 008E MCUCSR=0x00;
0000e7 e0e0      	LDI  R30,LOW(0)
0000e8 bfe4      	OUT  0x34,R30
                 ; 0000 008F GIFR=1<<INTF1;				//Сброс флага прерывания
0000e9 e8e0      	LDI  R30,LOW(128)
0000ea bfea      	OUT  0x3A,R30
                 ; 0000 0090 
                 ; 0000 0091 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0092 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);	//Разреш ...
0000eb e1e1      	LDI  R30,LOW(17)
0000ec bfe9      	OUT  0x39,R30
                 ; 0000 0093 
                 ; 0000 0094 // Analog Comparator initialization
                 ; 0000 0095 // Analog Comparator: Off
                 ; 0000 0096 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0097 ACSR=0x80;
0000ed e8e0      	LDI  R30,LOW(128)
0000ee b9e8      	OUT  0x8,R30
                 ; 0000 0098 SFIOR=0x00;
0000ef e0e0      	LDI  R30,LOW(0)
0000f0 bfe0      	OUT  0x30,R30
                 ; 0000 0099 
                 ; 0000 009A 
                 ; 0000 009B // SPI initialization
                 ; 0000 009C // SPI Type: Master
                 ; 0000 009D // SPI Clock Rate: 2000,000 kHz
                 ; 0000 009E // SPI Clock Phase: Cycle Start
                 ; 0000 009F // SPI Clock Polarity: Low
                 ; 0000 00A0 // SPI Data Order: MSB First
                 ; 0000 00A1 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000f1 e5e0      	LDI  R30,LOW(80)
0000f2 b9ed      	OUT  0xD,R30
                 ; 0000 00A2 SPSR=(1<<SPI2X);
0000f3 e0e1      	LDI  R30,LOW(1)
0000f4 b9ee      	OUT  0xE,R30
                 ; 0000 00A3 
                 ; 0000 00A4 // Инициализация Max7219
                 ; 0000 00A5 SET(Intensity, 0x03);      // Установка интенсивности свечения (от 0 до F)
0000f5 e0ea      	LDI  R30,LOW(10)
0000f6 93ea      	ST   -Y,R30
0000f7 e0a3      	LDI  R26,LOW(3)
0000f8 dfc3      	RCALL _SET
                 ; 0000 00A6 SET(ScanLimit, 0x07);      // Индикация всех 8 знакомест 7SEG разрешена
0000f9 e0eb      	LDI  R30,LOW(11)
0000fa 93ea      	ST   -Y,R30
0000fb e0a7      	LDI  R26,LOW(7)
0000fc dfbf      	RCALL _SET
                 ; 0000 00A7 SET(ShutDown, 1);          // Установка режима индикации, а не выключения
0000fd e0ec      	LDI  R30,LOW(12)
0000fe 93ea      	ST   -Y,R30
0000ff e0a1      	LDI  R26,LOW(1)
000100 dfbb      	RCALL _SET
                 ; 0000 00A8 SET(DecodeMode, 0xFF);     // Установка режима декодирования (с декодированием встроенным знакогенератором)
000101 e0e9      	LDI  R30,LOW(9)
000102 93ea      	ST   -Y,R30
000103 efaf      	LDI  R26,LOW(255)
000104 dfb7      	RCALL _SET
                 ; 0000 00A9 // Global enable interrupts
                 ; 0000 00AA #asm("sei")         //Разрешение прерываний
000105 9478      	sei
                 ; 0000 00AB 
                 ; 0000 00AC while (1)           //Бесконечный цикл
                 _0x9:
                 ; 0000 00AD       {
                 ; 0000 00AE 
                 ; 0000 00AF       };
000106 cfff      	RJMP _0x9
                 ; 0000 00B0 }
                 _0xC:
000107 cfff      	RJMP _0xC
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000108 e0e0      	LDI  R30,LOW(0)
000109 bdee      	OUT  0x2E,R30
00010a bded      	OUT  0x2D,R30
00010b bdec      	OUT  0x2C,R30
00010c 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
00010d 95f1      	NEG  R31
00010e 95e1      	NEG  R30
00010f 40f0      	SBCI R31,0
000110 9508      	RET
                 
                 __DIVW21U:
000111 2400      	CLR  R0
000112 2411      	CLR  R1
000113 e190      	LDI  R25,16
                 __DIVW21U1:
000114 0faa      	LSL  R26
000115 1fbb      	ROL  R27
000116 1c00      	ROL  R0
000117 1c11      	ROL  R1
000118 1a0e      	SUB  R0,R30
000119 0a1f      	SBC  R1,R31
00011a f418      	BRCC __DIVW21U2
00011b 0e0e      	ADD  R0,R30
00011c 1e1f      	ADC  R1,R31
00011d c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00011e 60a1      	SBR  R26,1
                 __DIVW21U3:
00011f 959a      	DEC  R25
000120 f799      	BRNE __DIVW21U1
000121 01fd      	MOVW R30,R26
000122 01d0      	MOVW R26,R0
000123 9508      	RET
                 
                 __DIVW21:
000124 d012      	RCALL __CHKSIGNW
000125 dfeb      	RCALL __DIVW21U
000126 f40e      	BRTC __DIVW211
000127 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000128 9508      	RET
                 
                 __MODW21:
000129 94e8      	CLT
00012a ffb7      	SBRS R27,7
00012b c004      	RJMP __MODW211
00012c 95a0      	COM  R26
00012d 95b0      	COM  R27
00012e 9611      	ADIW R26,1
00012f 9468      	SET
                 __MODW211:
000130 fdf7      	SBRC R31,7
000131 dfdb      	RCALL __ANEGW1
000132 dfde      	RCALL __DIVW21U
000133 01fd      	MOVW R30,R26
000134 f40e      	BRTC __MODW212
000135 dfd7      	RCALL __ANEGW1
                 __MODW212:
000136 9508      	RET
                 
                 __CHKSIGNW:
000137 94e8      	CLT
000138 fff7      	SBRS R31,7
000139 c002      	RJMP __CHKSW1
00013a dfd2      	RCALL __ANEGW1
00013b 9468      	SET
                 __CHKSW1:
00013c ffb7      	SBRS R27,7
00013d c006      	RJMP __CHKSW2
00013e 95a0      	COM  R26
00013f 95b0      	COM  R27
000140 9611      	ADIW R26,1
000141 f800      	BLD  R0,0
000142 9403      	INC  R0
000143 fa00      	BST  R0,0
                 __CHKSW2:
000144 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  14 r1 :   7 r2 :   0 r3 :   0 r4 :   6 r5 :   1 r6 :   4 r7 :   0 
r8 :   5 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:   9 r25:   6 r26:  25 r27:   9 r28:   3 r29:   1 r30: 123 r31:  17 
x  :   3 y  :  40 z  :   7 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   6 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   1 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   5 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   2 
cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   5 
cp    :   1 cpc   :   1 cpi   :   0 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   1 jmp   :  22 ld    :  17 ldd   :   1 ldi   :  51 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   2 movw  :  14 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   1 out   :  48 pop   :   0 push  :   0 rcall :  16 ret   :   8 
reti  :   3 rjmp  :   8 rol   :   3 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :   3 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  25 std   :   0 sts   :   0 sub   :   1 subi  :   1 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 50 out of 116 (43.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00028a    638     12    650   16384   4.0%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
