;/*******************************************************
;Chip type               : ATmega16
;AVR Core Clock frequency: 12,000000 MHz
;арефмитическая функция реализованая в МК Atmega16
;PORTC.0
;*******************************************************/
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;    #include <math.h>
;// Переменные в SRAM
;// asm
;// (
;//    .DSEG
;//    .ORG 0x0000
;//    g:	.db  	1,2,3
;//    .CSEG
;//    );
;
;unsigned  char a1@0x75;
;unsigned  char b1@0x76;
;    int i=0;
;
;// Переменный в FLSASH
;
;flash int x=7;
;  float s[4];
;// Переменные в EEPROM
; eeprom float a[4]={1,2,3,4};
; eeprom  float *adr=&a[0];
; //переменные в ОЗУ
;  float b[4];
;
;
; void calc(float *arr);
;
;
;
;void calc(float *arr)
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028 register int t;
; 0000 0029 for(t=0; arr[t]; ++t)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	*arr -> Y+2
;	t -> R16,R17
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002A {
; 0000 002B int x= a[t];
; 0000 002C arr[t] = tan((x)/5);
;PCODE: $0000001F VOL: 0
;	*arr -> Y+4
;	x -> Y+0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002D 
; 0000 002E }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 002F }
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0032 {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0033 // Place your code here
; 0000 0034 //Обработчик прерывания, увеличивающий counter при клике кнопки
; 0000 0035 
; 0000 0036 }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;
;void main(void)
; 0000 0039 {
;PCODE: $00000046 VOL: 0
; 0000 003A // Declare your local variables here
; 0000 003B 
; 0000 003C // Input/Output Ports initialization
; 0000 003D // Port A initialization
; 0000 003E DDRA=0b11111111;    //PORTA - все биты на вывод данных
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 003F PORTA=0b00000000;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0040 
; 0000 0041 // Port C initialization
; 0000 0042 DDRC=0b00000001;        //младший бит PORTC - на вывод
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0043 PORTC=0b00000000;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0044 
; 0000 0045 // External Interrupt(s) initialization
; 0000 0046 // INT0: On
; 0000 0047 // INT0 Mode: Rising Edge
; 0000 0048 // INT1: Off
; 0000 0049 // INT2: Off
; 0000 004A GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 004B MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 004C MCUCSR=(0<<ISC2);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004D GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 004E 
; 0000 004F 
; 0000 0050 
; 0000 0051 
; 0000 0052 
; 0000 0053 
; 0000 0054 
; 0000 0055 
; 0000 0056 // Global enable interrupts
; 0000 0057 #asm("sei")
;PCODE: $00000058 VOL: 0
	sei
;PCODE: $00000059 VOL: 0
; 0000 0058 //
; 0000 0059 
; 0000 005A 
; 0000 005B 
; 0000 005C   calc(b);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 005D 
; 0000 005E for (i=0;i<4;i++) {
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 005F // b[i]=s[i]
; 0000 0060     };
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0061 while (1)
;PCODE: $0000006B VOL: 0
; 0000 0062  {
; 0000 0063       delay_ms(250);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0064 
; 0000 0065 }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0066 }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
