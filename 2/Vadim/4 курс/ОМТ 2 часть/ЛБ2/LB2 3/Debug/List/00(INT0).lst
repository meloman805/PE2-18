
AVRASM ver. 2.1.30  C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ2\LB2 3\Debug\List\00(INT0).asm Thu Sep 16 01:25:50 2021

C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ2\LB2 3\Debug\List\00(INT0).asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ2\LB2 3\Debug\List\00(INT0).asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ2\LB2 3\Debug\List\00(INT0).asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ2\LB2 3\Debug\List\00(INT0).asm(1091): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 12,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 	.DEF _adr=R6
                 	.DEF _adr_msb=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0039 	JMP  __RESET
000002 940c 00a9 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,LOW(_a),HIGH(_a)
                 
                 _0x2020060:
C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ2\LB2 3\Debug\List\00(INT0).asm(1127): warning: .cseg .db misalignment - padding zero byte
00002c 0001      	.DB  0x1
                 _0x2020000:
00002d 4e2d
00002e 4e41
00002f 4900
000030 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ2\LB2 3\Debug\List\00(INT0).asm(1130): warning: .cseg .db misalignment - padding zero byte
000031 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000032 0004      	.DW  0x04
000033 0004      	.DW  0x04
000034 0054      	.DW  __REG_VARS*2
                 
000035 0001      	.DW  0x01
000036 0170      	.DW  __seed_G101
000037 0058      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000038 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000039 94f8      	CLI
00003a 27ee      	CLR  R30
00003b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003c e0f1      	LDI  R31,1
00003d bffb      	OUT  GICR,R31
00003e bfeb      	OUT  GICR,R30
00003f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000040 e08d      	LDI  R24,(14-2)+1
000041 e0a2      	LDI  R26,2
000042 27bb      	CLR  R27
                 __CLEAR_REG:
000043 93ed      	ST   X+,R30
000044 958a      	DEC  R24
000045 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000046 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000047 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000048 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000049 93ed      	ST   X+,R30
00004a 9701      	SBIW R24,1
00004b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004c e6e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004e 9185      	LPM  R24,Z+
00004f 9195      	LPM  R25,Z+
000050 9700      	SBIW R24,0
000051 f061      	BREQ __GLOBAL_INI_END
000052 91a5      	LPM  R26,Z+
000053 91b5      	LPM  R27,Z+
000054 9005      	LPM  R0,Z+
000055 9015      	LPM  R1,Z+
000056 01bf      	MOVW R22,R30
000057 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000058 9005      	LPM  R0,Z+
000059 920d      	ST   X+,R0
00005a 9701      	SBIW R24,1
00005b f7e1      	BRNE __GLOBAL_INI_LOOP
00005c 01fb      	MOVW R30,R22
00005d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005f bfed      	OUT  SPL,R30
000060 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000061 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000062 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000063 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000064 940c 00aa 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Chip type               : ATmega16
                 ;AVR Core Clock frequency: 12,000000 MHz
                 ;арефмитическая функция реализованая в МК Atmega16
                 ;PORTC.0
                 ;*******************************************************/
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;    #include <math.h>
                 ;// Переменные в SRAM
                 ;// asm
                 ;// (
                 ;//    .DSEG
                 ;//    .ORG 0x0000
                 ;//    g:	.db  	1,2,3
                 ;//    .CSEG
                 ;//    );
                 ;
                 ;unsigned  char a1@0x75;
                 ;unsigned  char b1@0x76;
                 ;    int i=0;
                 ;
                 ;// Переменный в FLSASH
                 ;
                 ;flash int x=7;
                 ;  float s[4];
                 ;// Переменные в EEPROM
                 ; eeprom float a[4]={1,2,3,4};
                 ; eeprom  float *adr=&a[0];
                 ; //переменные в ОЗУ
                 ;  float b[4];
                 ;
                 ;
                 ; void calc(float *arr);
                 ;
                 ;
                 ;
                 ;void calc(float *arr)
                 ; 0000 0027 {
                 
                 	.CSEG
                 _calc:
                 ; .FSTART _calc
                 ; 0000 0028 register int t;
                 ; 0000 0029 for(t=0; arr[t]; ++t)
000066 93ba      	ST   -Y,R27
000067 93aa      	ST   -Y,R26
000068 931a      	ST   -Y,R17
000069 930a      	ST   -Y,R16
                 ;	*arr -> Y+2
                 ;	t -> R16,R17
                +
00006a e000     +LDI R16 , LOW ( 0 )
00006b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4:
00006c 01f8      	MOVW R30,R16
00006d 81aa      	LDD  R26,Y+2
00006e 81bb      	LDD  R27,Y+2+1
00006f 940e 03bc 	CALL __LSLW2
000071 0fae      	ADD  R26,R30
000072 1fbf      	ADC  R27,R31
000073 940e 03ec 	CALL __GETD1P
000075 940e 0428 	CALL __CPD10
000077 f169      	BREQ _0x5
                 ; 0000 002A {
                 ; 0000 002B int x= a[t];
                 ; 0000 002C arr[t] = tan((x)/5);
000078 9722      	SBIW R28,2
                 ;	*arr -> Y+4
                 ;	x -> Y+0
000079 01f8      	MOVW R30,R16
00007a e0a0      	LDI  R26,LOW(_a)
00007b e0b0      	LDI  R27,HIGH(_a)
00007c 940e 03bc 	CALL __LSLW2
00007e 0fae      	ADD  R26,R30
00007f 1fbf      	ADC  R27,R31
000080 940e 0418 	CALL __EEPROMRDW
000082 940e 023a 	CALL __CFD1U
000084 83e8      	ST   Y,R30
000085 83f9      	STD  Y+1,R31
000086 01f8      	MOVW R30,R16
000087 81ac      	LDD  R26,Y+4
000088 81bd      	LDD  R27,Y+4+1
000089 940e 03bc 	CALL __LSLW2
00008b 0fea      	ADD  R30,R26
00008c 1ffb      	ADC  R31,R27
00008d 93ff      	PUSH R31
00008e 93ef      	PUSH R30
00008f 81a8      	LD   R26,Y
000090 81b9      	LDD  R27,Y+1
000091 e0e5      	LDI  R30,LOW(5)
000092 e0f0      	LDI  R31,HIGH(5)
000093 940e 03d9 	CALL __DIVW21
000095 940e 03c1 	CALL __CWD1
000097 940e 0273 	CALL __CDF1
000099 01df      	MOVW R26,R30
00009a 01cb      	MOVW R24,R22
00009b 940e 01ae 	CALL _tan
00009d 91af      	POP  R26
00009e 91bf      	POP  R27
00009f 940e 03f2 	CALL __PUTDP1
                 ; 0000 002D 
                 ; 0000 002E }
0000a1 9622      	ADIW R28,2
                +
0000a2 5f0f     +SUBI R16 , LOW ( - 1 )
0000a3 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000a4 cfc7      	RJMP _0x4
                 _0x5:
                 ; 0000 002F }
0000a5 8119      	LDD  R17,Y+1
0000a6 8108      	LDD  R16,Y+0
0000a7 940c 01ac 	JMP  _0x2080002
                 ; .FEND
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0032 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
                 ; 0000 0033 // Place your code here
                 ; 0000 0034 //Обработчик прерывания, увеличивающий counter при клике кнопки
                 ; 0000 0035 
                 ; 0000 0036 }
0000a9 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0039 {
                 _main:
                 ; .FSTART _main
                 ; 0000 003A // Declare your local variables here
                 ; 0000 003B 
                 ; 0000 003C // Input/Output Ports initialization
                 ; 0000 003D // Port A initialization
                 ; 0000 003E DDRA=0b11111111;    //PORTA - все биты на вывод данных
0000aa efef      	LDI  R30,LOW(255)
0000ab bbea      	OUT  0x1A,R30
                 ; 0000 003F PORTA=0b00000000;
0000ac e0e0      	LDI  R30,LOW(0)
0000ad bbeb      	OUT  0x1B,R30
                 ; 0000 0040 
                 ; 0000 0041 // Port C initialization
                 ; 0000 0042 DDRC=0b00000001;        //младший бит PORTC - на вывод
0000ae e0e1      	LDI  R30,LOW(1)
0000af bbe4      	OUT  0x14,R30
                 ; 0000 0043 PORTC=0b00000000;
0000b0 e0e0      	LDI  R30,LOW(0)
0000b1 bbe5      	OUT  0x15,R30
                 ; 0000 0044 
                 ; 0000 0045 // External Interrupt(s) initialization
                 ; 0000 0046 // INT0: On
                 ; 0000 0047 // INT0 Mode: Rising Edge
                 ; 0000 0048 // INT1: Off
                 ; 0000 0049 // INT2: Off
                 ; 0000 004A GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
0000b2 b7eb      	IN   R30,0x3B
0000b3 64e0      	ORI  R30,0x40
0000b4 bfeb      	OUT  0x3B,R30
                 ; 0000 004B MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
0000b5 e0e3      	LDI  R30,LOW(3)
0000b6 bfe5      	OUT  0x35,R30
                 ; 0000 004C MCUCSR=(0<<ISC2);
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 bfe4      	OUT  0x34,R30
                 ; 0000 004D GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
0000b9 e4e0      	LDI  R30,LOW(64)
0000ba bfea      	OUT  0x3A,R30
                 ; 0000 004E 
                 ; 0000 004F 
                 ; 0000 0050 
                 ; 0000 0051 
                 ; 0000 0052 
                 ; 0000 0053 
                 ; 0000 0054 
                 ; 0000 0055 
                 ; 0000 0056 // Global enable interrupts
                 ; 0000 0057 #asm("sei")
0000bb 9478      	sei
                 ; 0000 0058 //
                 ; 0000 0059 
                 ; 0000 005A 
                 ; 0000 005B 
                 ; 0000 005C   calc(b);
0000bc e6a0      	LDI  R26,LOW(_b)
0000bd e0b1      	LDI  R27,HIGH(_b)
0000be dfa7      	RCALL _calc
                 ; 0000 005D 
                 ; 0000 005E for (i=0;i<4;i++) {
0000bf 2444      	CLR  R4
0000c0 2455      	CLR  R5
                 _0x7:
0000c1 e0e4      	LDI  R30,LOW(4)
0000c2 e0f0      	LDI  R31,HIGH(4)
0000c3 164e      	CP   R4,R30
0000c4 065f      	CPC  R5,R31
0000c5 f424      	BRGE _0x8
                 ; 0000 005F // b[i]=s[i]
                 ; 0000 0060     };
0000c6 01f2      	MOVW R30,R4
0000c7 9631      	ADIW R30,1
0000c8 012f      	MOVW R4,R30
0000c9 cff7      	RJMP _0x7
                 _0x8:
                 ; 0000 0061 while (1)
                 _0x9:
                 ; 0000 0062  {
                 ; 0000 0063       delay_ms(250);
0000ca efaa      	LDI  R26,LOW(250)
0000cb e0b0      	LDI  R27,0
0000cc 940e 01fd 	CALL _delay_ms
                 ; 0000 0064 
                 ; 0000 0065 }
0000ce cffb      	RJMP _0x9
                 ; 0000 0066 }
                 _0xC:
0000cf cfff      	RJMP _0xC
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0000d0 940e 0406 	CALL __PUTPARD2
0000d2 817b         ldd  r23,y+3
0000d3 816a         ldd  r22,y+2
0000d4 81f9         ldd  r31,y+1
0000d5 81e8         ld   r30,y
0000d6 fb77         bst  r23,7
0000d7 0f77         lsl  r23
0000d8 fd67         sbrc r22,7
0000d9 6071         sbr  r23,1
0000da 2f97         mov  r25,r23
0000db 579e         subi r25,0x7e
0000dc f081         breq __ftrunc0
0000dd f078         brcs __ftrunc0
0000de 3198         cpi  r25,24
0000df f490         brsh __ftrunc1
0000e0 27aa         clr  r26
0000e1 27bb         clr  r27
0000e2 2788         clr  r24
                 __ftrunc2:
0000e3 9408         sec
0000e4 9587         ror  r24
0000e5 95b7         ror  r27
0000e6 95a7         ror  r26
0000e7 959a         dec  r25
0000e8 f7d1         brne __ftrunc2
0000e9 23ea         and  r30,r26
0000ea 23fb         and  r31,r27
0000eb 2368         and  r22,r24
0000ec c005         rjmp __ftrunc1
                 __ftrunc0:
0000ed 94e8         clt
0000ee 2777         clr  r23
0000ef 27ee         clr  r30
0000f0 27ff         clr  r31
0000f1 2766         clr  r22
                 __ftrunc1:
0000f2 776f         cbr  r22,0x80
0000f3 9576         lsr  r23
0000f4 f408         brcc __ftrunc3
0000f5 6860         sbr  r22,0x80
                 __ftrunc3:
0000f6 f977         bld  r23,7
0000f7 91a9         ld   r26,y+
0000f8 91b9         ld   r27,y+
0000f9 9189         ld   r24,y+
0000fa 9199         ld   r25,y+
0000fb 17ea         cp   r30,r26
0000fc 07fb         cpc  r31,r27
0000fd 0768         cpc  r22,r24
0000fe 0779         cpc  r23,r25
0000ff fb97         bst  r25,7
000100 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000101 940e 01d3 	CALL SUBOPT_0x0
000103 940e 00d0 	CALL _ftrunc
000105 940e 0401 	CALL __PUTD1S0
000107 f419          brne __floor1
                 __floor0:
000108 940e 01d8 	CALL SUBOPT_0x1
00010a c0a1      	RJMP _0x2080002
                 __floor1:
00010b f7e6          brtc __floor0
00010c 940e 01d8 	CALL SUBOPT_0x1
                +
00010e e0a0     +LDI R26 , LOW ( 0x3F800000 )
00010f e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000110 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000111 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000112 940e 02a6 	CALL __SUBF12
000114 c097      	RJMP _0x2080002
                 ; .FEND
                 _sin:
                 ; .FSTART _sin
000115 940e 0406 	CALL __PUTPARD2
000117 9724      	SBIW R28,4
000118 931a      	ST   -Y,R17
000119 e010      	LDI  R17,0
00011a 940e 01db 	CALL SUBOPT_0x2
                +
00011c e8e3     +LDI R30 , LOW ( 0x3E22F983 )
00011d eff9     +LDI R31 , HIGH ( 0x3E22F983 )
00011e e262     +LDI R22 , BYTE3 ( 0x3E22F983 )
00011f e37e     +LDI R23 , BYTE4 ( 0x3E22F983 )
                 	__GETD1N 0x3E22F983
000120 940e 02fd 	CALL __MULF12
000122 940e 01e0 	CALL SUBOPT_0x3
000124 dfdc      	RCALL _floor
000125 940e 01db 	CALL SUBOPT_0x2
000127 940e 040b 	CALL __SWAPD12
000129 940e 02a6 	CALL __SUBF12
00012b 940e 01e0 	CALL SUBOPT_0x3
                +
00012d e0e0     +LDI R30 , LOW ( 0x3F000000 )
00012e e0f0     +LDI R31 , HIGH ( 0x3F000000 )
00012f e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000130 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000131 940e 0390 	CALL __CMPF12
000133 f009      	BREQ PC+2
000134 f408      	BRCC PC+2
000135 c009      	RJMP _0x2000017
000136 940e 01e5 	CALL SUBOPT_0x4
                +
000138 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000139 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
00013a e080     +LDI R24 , BYTE3 ( 0x3F000000 )
00013b e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
00013c 940e 01ea 	CALL SUBOPT_0x5
00013e e011      	LDI  R17,LOW(1)
                 _0x2000017:
00013f 940e 01db 	CALL SUBOPT_0x2
                +
000141 e0e0     +LDI R30 , LOW ( 0x3E800000 )
000142 e0f0     +LDI R31 , HIGH ( 0x3E800000 )
000143 e860     +LDI R22 , BYTE3 ( 0x3E800000 )
000144 e37e     +LDI R23 , BYTE4 ( 0x3E800000 )
                 	__GETD1N 0x3E800000
000145 940e 0390 	CALL __CMPF12
000147 f009      	BREQ PC+2
000148 f408      	BRCC PC+2
000149 c008      	RJMP _0x2000018
00014a 940e 01db 	CALL SUBOPT_0x2
                +
00014c e0e0     +LDI R30 , LOW ( 0x3F000000 )
00014d e0f0     +LDI R31 , HIGH ( 0x3F000000 )
00014e e060     +LDI R22 , BYTE3 ( 0x3F000000 )
00014f e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000150 940e 01ea 	CALL SUBOPT_0x5
                 _0x2000018:
000152 3010      	CPI  R17,0
000153 f041      	BREQ _0x2000019
000154 940e 01e5 	CALL SUBOPT_0x4
000156 940e 0207 	CALL __ANEGF1
                +
000158 83ed     +STD Y + 5 , R30
000159 83fe     +STD Y + 5 + 1 , R31
00015a 836f     +STD Y + 5 + 2 , R22
00015b 8778     +STD Y + 5 + 3 , R23
                 	__PUTD1S 5
                 _0x2000019:
00015c 940e 01e5 	CALL SUBOPT_0x4
00015e 940e 01db 	CALL SUBOPT_0x2
000160 940e 02fd 	CALL __MULF12
                +
000162 83e9     +STD Y + 1 , R30
000163 83fa     +STD Y + 1 + 1 , R31
000164 836b     +STD Y + 1 + 2 , R22
000165 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                +
000166 eba1     +LDI R26 , LOW ( 0x4226C4B1 )
000167 ecb4     +LDI R27 , HIGH ( 0x4226C4B1 )
000168 e286     +LDI R24 , BYTE3 ( 0x4226C4B1 )
000169 e492     +LDI R25 , BYTE4 ( 0x4226C4B1 )
                 	__GETD2N 0x4226C4B1
00016a 940e 02fd 	CALL __MULF12
00016c 01df      	MOVW R26,R30
00016d 01cb      	MOVW R24,R22
                +
00016e e1ed     +LDI R30 , LOW ( 0x422DE51D )
00016f eef5     +LDI R31 , HIGH ( 0x422DE51D )
000170 e26d     +LDI R22 , BYTE3 ( 0x422DE51D )
000171 e472     +LDI R23 , BYTE4 ( 0x422DE51D )
                 	__GETD1N 0x422DE51D
000172 940e 040b 	CALL __SWAPD12
000174 940e 02a6 	CALL __SUBF12
000176 940e 01f1 	CALL SUBOPT_0x6
                +
000178 e4ac     +LDI R26 , LOW ( 0x4104534C )
000179 e5b3     +LDI R27 , HIGH ( 0x4104534C )
00017a e084     +LDI R24 , BYTE3 ( 0x4104534C )
00017b e491     +LDI R25 , BYTE4 ( 0x4104534C )
                 	__GETD2N 0x4104534C
00017c 940e 02ad 	CALL __ADDF12
00017e 940e 01db 	CALL SUBOPT_0x2
000180 940e 02fd 	CALL __MULF12
000182 937f      	PUSH R23
000183 936f      	PUSH R22
000184 93ff      	PUSH R31
000185 93ef      	PUSH R30
                +
000186 81e9     +LDD R30 , Y + 1
000187 81fa     +LDD R31 , Y + 1 + 1
000188 816b     +LDD R22 , Y + 1 + 2
000189 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
                +
00018a e1a1     +LDI R26 , LOW ( 0x3FDEED11 )
00018b eebd     +LDI R27 , HIGH ( 0x3FDEED11 )
00018c ed8e     +LDI R24 , BYTE3 ( 0x3FDEED11 )
00018d e39f     +LDI R25 , BYTE4 ( 0x3FDEED11 )
                 	__GETD2N 0x3FDEED11
00018e 940e 02ad 	CALL __ADDF12
000190 940e 01f1 	CALL SUBOPT_0x6
                +
000192 e5ae     +LDI R26 , LOW ( 0x3FA87B5E )
000193 e7bb     +LDI R27 , HIGH ( 0x3FA87B5E )
000194 ea88     +LDI R24 , BYTE3 ( 0x3FA87B5E )
000195 e39f     +LDI R25 , BYTE4 ( 0x3FA87B5E )
                 	__GETD2N 0x3FA87B5E
000196 940e 02ad 	CALL __ADDF12
000198 91af      	POP  R26
000199 91bf      	POP  R27
00019a 918f      	POP  R24
00019b 919f      	POP  R25
00019c 940e 034b 	CALL __DIVF21
00019e 8118      	LDD  R17,Y+0
00019f 9629      	ADIW R28,9
0001a0 9508      	RET
                 ; .FEND
                 _cos:
                 ; .FSTART _cos
0001a1 940e 01d3 	CALL SUBOPT_0x0
                +
0001a3 edeb     +LDI R30 , LOW ( 0x3FC90FDB )
0001a4 e0ff     +LDI R31 , HIGH ( 0x3FC90FDB )
0001a5 ec69     +LDI R22 , BYTE3 ( 0x3FC90FDB )
0001a6 e37f     +LDI R23 , BYTE4 ( 0x3FC90FDB )
                 	__GETD1N 0x3FC90FDB
0001a7 940e 02a6 	CALL __SUBF12
0001a9 01df      	MOVW R26,R30
0001aa 01cb      	MOVW R24,R22
0001ab df69      	RCALL _sin
                 _0x2080002:
0001ac 9624      	ADIW R28,4
0001ad 9508      	RET
                 ; .FEND
                 _tan:
                 ; .FSTART _tan
0001ae 940e 0406 	CALL __PUTPARD2
0001b0 9724      	SBIW R28,4
0001b1 940e 01f8 	CALL SUBOPT_0x7
0001b3 dfed      	RCALL _cos
0001b4 940e 0401 	CALL __PUTD1S0
0001b6 940e 0428 	CALL __CPD10
0001b8 f479      	BRNE _0x200001A
0001b9 940e 01f8 	CALL SUBOPT_0x7
0001bb 940e 042c 	CALL __CPD02
0001bd f42c      	BRGE _0x200001B
                +
0001be efef     +LDI R30 , LOW ( 0x7F7FFFFF )
0001bf efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
0001c0 e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
0001c1 e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
0001c2 c00e      	RJMP _0x2080001
                 _0x200001B:
                +
0001c3 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
0001c4 efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
0001c5 e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
0001c6 ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
0001c7 c009      	RJMP _0x2080001
                 _0x200001A:
0001c8 940e 01f8 	CALL SUBOPT_0x7
0001ca df4a      	RCALL _sin
0001cb 01df      	MOVW R26,R30
0001cc 01cb      	MOVW R24,R22
0001cd 940e 01d8 	CALL SUBOPT_0x1
0001cf 940e 034b 	CALL __DIVF21
                 _0x2080001:
0001d1 9628      	ADIW R28,8
0001d2 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.ESEG
                 _a:
000000 00
000001 00
000002 80
000003 3f        	.DB  0x0,0x0,0x80,0x3F
000004 00
000005 00
000006 00
000007 40        	.DB  0x0,0x0,0x0,0x40
000008 00
000009 00
00000a 40
00000b 40        	.DB  0x0,0x0,0x40,0x40
00000c 00
00000d 00
00000e 80
00000f 40        	.DB  0x0,0x0,0x80,0x40
                 
                 	.DSEG
                 _b:
000160           	.BYTE 0x10
                 __seed_G101:
000170           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001d3 940e 0406 	CALL __PUTPARD2
0001d5 940e 03fc 	CALL __GETD2S0
0001d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001d8 940e 03f7 	CALL __GETD1S0
0001da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x2:
                +
0001db 81ad     +LDD R26 , Y + 5
0001dc 81be     +LDD R27 , Y + 5 + 1
0001dd 818f     +LDD R24 , Y + 5 + 2
0001de 8598     +LDD R25 , Y + 5 + 3
                 	__GETD2S 5
0001df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
                +
0001e0 83ed     +STD Y + 5 , R30
0001e1 83fe     +STD Y + 5 + 1 , R31
0001e2 836f     +STD Y + 5 + 2 , R22
0001e3 8778     +STD Y + 5 + 3 , R23
                 	__PUTD1S 5
0001e4 cff6      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
                +
0001e5 81ed     +LDD R30 , Y + 5
0001e6 81fe     +LDD R31 , Y + 5 + 1
0001e7 816f     +LDD R22 , Y + 5 + 2
0001e8 8578     +LDD R23 , Y + 5 + 3
                 	__GETD1S 5
0001e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0001ea 940e 02a6 	CALL __SUBF12
                +
0001ec 83ed     +STD Y + 5 , R30
0001ed 83fe     +STD Y + 5 + 1 , R31
0001ee 836f     +STD Y + 5 + 2 , R22
0001ef 8778     +STD Y + 5 + 3 , R23
                 	__PUTD1S 5
0001f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
                +
0001f1 81a9     +LDD R26 , Y + 1
0001f2 81ba     +LDD R27 , Y + 1 + 1
0001f3 818b     +LDD R24 , Y + 1 + 2
0001f4 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0001f5 940e 02fd 	CALL __MULF12
0001f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
                +
0001f8 81ac     +LDD R26 , Y + 4
0001f9 81bd     +LDD R27 , Y + 4 + 1
0001fa 818e     +LDD R24 , Y + 4 + 2
0001fb 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0001fc 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001fd 9610      	adiw r26,0
0001fe f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001ff eb88     +LDI R24 , LOW ( 0xBB8 )
000200 e09b     +LDI R25 , HIGH ( 0xBB8 )
                +__DELAY_USW_LOOP :
000201 9701     +SBIW R24 , 1
000202 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xBB8
000203 95a8      	wdr
000204 9711      	sbiw r26,1
000205 f7c9      	brne __delay_ms0
                 __delay_ms1:
000206 9508      	ret
                 
                 __ANEGF1:
000207 9730      	SBIW R30,0
000208 4060      	SBCI R22,0
000209 4070      	SBCI R23,0
00020a f009      	BREQ __ANEGF10
00020b 5870      	SUBI R23,0x80
                 __ANEGF10:
00020c 9508      	RET
                 
                 __ROUND_REPACK:
00020d 2355      	TST  R21
00020e f442      	BRPL __REPACK
00020f 3850      	CPI  R21,0x80
000210 f411      	BRNE __ROUND_REPACK0
000211 ffe0      	SBRS R30,0
000212 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000213 9631      	ADIW R30,1
000214 1f69      	ADC  R22,R25
000215 1f79      	ADC  R23,R25
000216 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000217 e850      	LDI  R21,0x80
000218 2757      	EOR  R21,R23
000219 f411      	BRNE __REPACK0
00021a 935f      	PUSH R21
00021b c0cf      	RJMP __ZERORES
                 __REPACK0:
00021c 3f5f      	CPI  R21,0xFF
00021d f031      	BREQ __REPACK1
00021e 0f66      	LSL  R22
00021f 0c00      	LSL  R0
000220 9557      	ROR  R21
000221 9567      	ROR  R22
000222 2f75      	MOV  R23,R21
000223 9508      	RET
                 __REPACK1:
000224 935f      	PUSH R21
000225 2000      	TST  R0
000226 f00a      	BRMI __REPACK2
000227 c0cf      	RJMP __MAXRES
                 __REPACK2:
000228 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000229 e850      	LDI  R21,0x80
00022a 2e19      	MOV  R1,R25
00022b 2215      	AND  R1,R21
00022c 0f88      	LSL  R24
00022d 1f99      	ROL  R25
00022e 2795      	EOR  R25,R21
00022f 0f55      	LSL  R21
000230 9587      	ROR  R24
                 
                 __UNPACK1:
000231 e850      	LDI  R21,0x80
000232 2e07      	MOV  R0,R23
000233 2205      	AND  R0,R21
000234 0f66      	LSL  R22
000235 1f77      	ROL  R23
000236 2775      	EOR  R23,R21
000237 0f55      	LSL  R21
000238 9567      	ROR  R22
000239 9508      	RET
                 
                 __CFD1U:
00023a 9468      	SET
00023b c001      	RJMP __CFD1U0
                 __CFD1:
00023c 94e8      	CLT
                 __CFD1U0:
00023d 935f      	PUSH R21
00023e dff2      	RCALL __UNPACK1
00023f 3870      	CPI  R23,0x80
000240 f018      	BRLO __CFD10
000241 3f7f      	CPI  R23,0xFF
000242 f408      	BRCC __CFD10
000243 c0a7      	RJMP __ZERORES
                 __CFD10:
000244 e156      	LDI  R21,22
000245 1b57      	SUB  R21,R23
000246 f4aa      	BRPL __CFD11
000247 9551      	NEG  R21
000248 3058      	CPI  R21,8
000249 f40e      	BRTC __CFD19
00024a 3059      	CPI  R21,9
                 __CFD19:
00024b f030      	BRLO __CFD17
00024c efef      	SER  R30
00024d efff      	SER  R31
00024e ef6f      	SER  R22
00024f e77f      	LDI  R23,0x7F
000250 f977      	BLD  R23,7
000251 c01a      	RJMP __CFD15
                 __CFD17:
000252 2777      	CLR  R23
000253 2355      	TST  R21
000254 f0b9      	BREQ __CFD15
                 __CFD18:
000255 0fee      	LSL  R30
000256 1fff      	ROL  R31
000257 1f66      	ROL  R22
000258 1f77      	ROL  R23
000259 955a      	DEC  R21
00025a f7d1      	BRNE __CFD18
00025b c010      	RJMP __CFD15
                 __CFD11:
00025c 2777      	CLR  R23
                 __CFD12:
00025d 3058      	CPI  R21,8
00025e f028      	BRLO __CFD13
00025f 2fef      	MOV  R30,R31
000260 2ff6      	MOV  R31,R22
000261 2f67      	MOV  R22,R23
000262 5058      	SUBI R21,8
000263 cff9      	RJMP __CFD12
                 __CFD13:
000264 2355      	TST  R21
000265 f031      	BREQ __CFD15
                 __CFD14:
000266 9576      	LSR  R23
000267 9567      	ROR  R22
000268 95f7      	ROR  R31
000269 95e7      	ROR  R30
00026a 955a      	DEC  R21
00026b f7d1      	BRNE __CFD14
                 __CFD15:
00026c 2000      	TST  R0
00026d f40a      	BRPL __CFD16
00026e d145      	RCALL __ANEGD1
                 __CFD16:
00026f 915f      	POP  R21
000270 9508      	RET
                 
                 __CDF1U:
000271 9468      	SET
000272 c001      	RJMP __CDF1U0
                 __CDF1:
000273 94e8      	CLT
                 __CDF1U0:
000274 9730      	SBIW R30,0
000275 4060      	SBCI R22,0
000276 4070      	SBCI R23,0
000277 f0b1      	BREQ __CDF10
000278 2400      	CLR  R0
000279 f026      	BRTS __CDF11
00027a 2377      	TST  R23
00027b f412      	BRPL __CDF11
00027c 9400      	COM  R0
00027d d136      	RCALL __ANEGD1
                 __CDF11:
00027e 2e17      	MOV  R1,R23
00027f e17e      	LDI  R23,30
000280 2011      	TST  R1
                 __CDF12:
000281 f032      	BRMI __CDF13
000282 957a      	DEC  R23
000283 0fee      	LSL  R30
000284 1fff      	ROL  R31
000285 1f66      	ROL  R22
000286 1c11      	ROL  R1
000287 cff9      	RJMP __CDF12
                 __CDF13:
000288 2fef      	MOV  R30,R31
000289 2ff6      	MOV  R31,R22
00028a 2d61      	MOV  R22,R1
00028b 935f      	PUSH R21
00028c df8a      	RCALL __REPACK
00028d 915f      	POP  R21
                 __CDF10:
00028e 9508      	RET
                 
                 __SWAPACC:
00028f 934f      	PUSH R20
000290 01af      	MOVW R20,R30
000291 01fd      	MOVW R30,R26
000292 01da      	MOVW R26,R20
000293 01ab      	MOVW R20,R22
000294 01bc      	MOVW R22,R24
000295 01ca      	MOVW R24,R20
000296 2d40      	MOV  R20,R0
000297 2c01      	MOV  R0,R1
000298 2e14      	MOV  R1,R20
000299 914f      	POP  R20
00029a 9508      	RET
                 
                 __UADD12:
00029b 0fea      	ADD  R30,R26
00029c 1ffb      	ADC  R31,R27
00029d 1f68      	ADC  R22,R24
00029e 9508      	RET
                 
                 __NEGMAN1:
00029f 95e0      	COM  R30
0002a0 95f0      	COM  R31
0002a1 9560      	COM  R22
0002a2 5fef      	SUBI R30,-1
0002a3 4fff      	SBCI R31,-1
0002a4 4f6f      	SBCI R22,-1
0002a5 9508      	RET
                 
                 __SUBF12:
0002a6 935f      	PUSH R21
0002a7 df81      	RCALL __UNPACK
0002a8 3890      	CPI  R25,0x80
0002a9 f171      	BREQ __ADDF129
0002aa e850      	LDI  R21,0x80
0002ab 2615      	EOR  R1,R21
                 
0002ac c004      	RJMP __ADDF120
                 
                 __ADDF12:
0002ad 935f      	PUSH R21
0002ae df7a      	RCALL __UNPACK
0002af 3890      	CPI  R25,0x80
0002b0 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0002b1 3870      	CPI  R23,0x80
0002b2 f121      	BREQ __ADDF128
                 __ADDF121:
0002b3 2f57      	MOV  R21,R23
0002b4 1b59      	SUB  R21,R25
0002b5 f12b      	BRVS __ADDF1211
0002b6 f412      	BRPL __ADDF122
0002b7 dfd7      	RCALL __SWAPACC
0002b8 cffa      	RJMP __ADDF121
                 __ADDF122:
0002b9 3158      	CPI  R21,24
0002ba f018      	BRLO __ADDF123
0002bb 27aa      	CLR  R26
0002bc 27bb      	CLR  R27
0002bd 2788      	CLR  R24
                 __ADDF123:
0002be 3058      	CPI  R21,8
0002bf f028      	BRLO __ADDF124
0002c0 2fab      	MOV  R26,R27
0002c1 2fb8      	MOV  R27,R24
0002c2 2788      	CLR  R24
0002c3 5058      	SUBI R21,8
0002c4 cff9      	RJMP __ADDF123
                 __ADDF124:
0002c5 2355      	TST  R21
0002c6 f029      	BREQ __ADDF126
                 __ADDF125:
0002c7 9586      	LSR  R24
0002c8 95b7      	ROR  R27
0002c9 95a7      	ROR  R26
0002ca 955a      	DEC  R21
0002cb f7d9      	BRNE __ADDF125
                 __ADDF126:
0002cc 2d50      	MOV  R21,R0
0002cd 2551      	EOR  R21,R1
0002ce f072      	BRMI __ADDF127
0002cf dfcb      	RCALL __UADD12
0002d0 f438      	BRCC __ADDF129
0002d1 9567      	ROR  R22
0002d2 95f7      	ROR  R31
0002d3 95e7      	ROR  R30
0002d4 9573      	INC  R23
0002d5 f413      	BRVC __ADDF129
0002d6 c020      	RJMP __MAXRES
                 __ADDF128:
0002d7 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0002d8 df3e      	RCALL __REPACK
0002d9 915f      	POP  R21
0002da 9508      	RET
                 __ADDF1211:
0002db f7d8      	BRCC __ADDF128
0002dc cffb      	RJMP __ADDF129
                 __ADDF127:
0002dd 1bea      	SUB  R30,R26
0002de 0bfb      	SBC  R31,R27
0002df 0b68      	SBC  R22,R24
0002e0 f051      	BREQ __ZERORES
0002e1 f410      	BRCC __ADDF1210
0002e2 9400      	COM  R0
0002e3 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0002e4 2366      	TST  R22
0002e5 f392      	BRMI __ADDF129
0002e6 0fee      	LSL  R30
0002e7 1fff      	ROL  R31
0002e8 1f66      	ROL  R22
0002e9 957a      	DEC  R23
0002ea f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0002eb 27ee      	CLR  R30
0002ec 27ff      	CLR  R31
0002ed 2766      	CLR  R22
0002ee 2777      	CLR  R23
0002ef 915f      	POP  R21
0002f0 9508      	RET
                 
                 __MINRES:
0002f1 efef      	SER  R30
0002f2 efff      	SER  R31
0002f3 e76f      	LDI  R22,0x7F
0002f4 ef7f      	SER  R23
0002f5 915f      	POP  R21
0002f6 9508      	RET
                 
                 __MAXRES:
0002f7 efef      	SER  R30
0002f8 efff      	SER  R31
0002f9 e76f      	LDI  R22,0x7F
0002fa e77f      	LDI  R23,0x7F
0002fb 915f      	POP  R21
0002fc 9508      	RET
                 
                 __MULF12:
0002fd 935f      	PUSH R21
0002fe df2a      	RCALL __UNPACK
0002ff 3870      	CPI  R23,0x80
000300 f351      	BREQ __ZERORES
000301 3890      	CPI  R25,0x80
000302 f341      	BREQ __ZERORES
000303 2401      	EOR  R0,R1
000304 9408      	SEC
000305 1f79      	ADC  R23,R25
000306 f423      	BRVC __MULF124
000307 f31c      	BRLT __ZERORES
                 __MULF125:
000308 2000      	TST  R0
000309 f33a      	BRMI __MINRES
00030a cfec      	RJMP __MAXRES
                 __MULF124:
00030b 920f      	PUSH R0
00030c 931f      	PUSH R17
00030d 932f      	PUSH R18
00030e 933f      	PUSH R19
00030f 934f      	PUSH R20
000310 2711      	CLR  R17
000311 2722      	CLR  R18
000312 2799      	CLR  R25
000313 9f68      	MUL  R22,R24
000314 01a0      	MOVW R20,R0
000315 9f8f      	MUL  R24,R31
000316 2d30      	MOV  R19,R0
000317 0d41      	ADD  R20,R1
000318 1f59      	ADC  R21,R25
000319 9f6b      	MUL  R22,R27
00031a 0d30      	ADD  R19,R0
00031b 1d41      	ADC  R20,R1
00031c 1f59      	ADC  R21,R25
00031d 9f8e      	MUL  R24,R30
00031e d027      	RCALL __MULF126
00031f 9fbf      	MUL  R27,R31
000320 d025      	RCALL __MULF126
000321 9f6a      	MUL  R22,R26
000322 d023      	RCALL __MULF126
000323 9fbe      	MUL  R27,R30
000324 d01d      	RCALL __MULF127
000325 9faf      	MUL  R26,R31
000326 d01b      	RCALL __MULF127
000327 9fae      	MUL  R26,R30
000328 0d11      	ADD  R17,R1
000329 1f29      	ADC  R18,R25
00032a 1f39      	ADC  R19,R25
00032b 1f49      	ADC  R20,R25
00032c 1f59      	ADC  R21,R25
00032d 2fe3      	MOV  R30,R19
00032e 2ff4      	MOV  R31,R20
00032f 2f65      	MOV  R22,R21
000330 2f52      	MOV  R21,R18
000331 914f      	POP  R20
000332 913f      	POP  R19
000333 912f      	POP  R18
000334 911f      	POP  R17
000335 900f      	POP  R0
000336 2366      	TST  R22
000337 f02a      	BRMI __MULF122
000338 0f55      	LSL  R21
000339 1fee      	ROL  R30
00033a 1fff      	ROL  R31
00033b 1f66      	ROL  R22
00033c c002      	RJMP __MULF123
                 __MULF122:
00033d 9573      	INC  R23
00033e f24b      	BRVS __MULF125
                 __MULF123:
00033f decd      	RCALL __ROUND_REPACK
000340 915f      	POP  R21
000341 9508      	RET
                 
                 __MULF127:
000342 0d10      	ADD  R17,R0
000343 1d21      	ADC  R18,R1
000344 1f39      	ADC  R19,R25
000345 c002      	RJMP __MULF128
                 __MULF126:
000346 0d20      	ADD  R18,R0
000347 1d31      	ADC  R19,R1
                 __MULF128:
000348 1f49      	ADC  R20,R25
000349 1f59      	ADC  R21,R25
00034a 9508      	RET
                 
                 __DIVF21:
00034b 935f      	PUSH R21
00034c dedc      	RCALL __UNPACK
00034d 3870      	CPI  R23,0x80
00034e f421      	BRNE __DIVF210
00034f 2011      	TST  R1
                 __DIVF211:
000350 f40a      	BRPL __DIVF219
000351 cf9f      	RJMP __MINRES
                 __DIVF219:
000352 cfa4      	RJMP __MAXRES
                 __DIVF210:
000353 3890      	CPI  R25,0x80
000354 f409      	BRNE __DIVF218
                 __DIVF217:
000355 cf95      	RJMP __ZERORES
                 __DIVF218:
000356 2401      	EOR  R0,R1
000357 9408      	SEC
000358 0b97      	SBC  R25,R23
000359 f41b      	BRVC __DIVF216
00035a f3d4      	BRLT __DIVF217
00035b 2000      	TST  R0
00035c cff3      	RJMP __DIVF211
                 __DIVF216:
00035d 2f79      	MOV  R23,R25
00035e 931f      	PUSH R17
00035f 932f      	PUSH R18
000360 933f      	PUSH R19
000361 934f      	PUSH R20
000362 2411      	CLR  R1
000363 2711      	CLR  R17
000364 2722      	CLR  R18
000365 2733      	CLR  R19
000366 2744      	CLR  R20
000367 2755      	CLR  R21
000368 e290      	LDI  R25,32
                 __DIVF212:
000369 17ae      	CP   R26,R30
00036a 07bf      	CPC  R27,R31
00036b 0786      	CPC  R24,R22
00036c 0741      	CPC  R20,R17
00036d f030      	BRLO __DIVF213
00036e 1bae      	SUB  R26,R30
00036f 0bbf      	SBC  R27,R31
000370 0b86      	SBC  R24,R22
000371 0b41      	SBC  R20,R17
000372 9408      	SEC
000373 c001      	RJMP __DIVF214
                 __DIVF213:
000374 9488      	CLC
                 __DIVF214:
000375 1f55      	ROL  R21
000376 1f22      	ROL  R18
000377 1f33      	ROL  R19
000378 1c11      	ROL  R1
000379 1faa      	ROL  R26
00037a 1fbb      	ROL  R27
00037b 1f88      	ROL  R24
00037c 1f44      	ROL  R20
00037d 959a      	DEC  R25
00037e f751      	BRNE __DIVF212
00037f 01f9      	MOVW R30,R18
000380 2d61      	MOV  R22,R1
000381 914f      	POP  R20
000382 913f      	POP  R19
000383 912f      	POP  R18
000384 911f      	POP  R17
000385 2366      	TST  R22
000386 f032      	BRMI __DIVF215
000387 0f55      	LSL  R21
000388 1fee      	ROL  R30
000389 1fff      	ROL  R31
00038a 1f66      	ROL  R22
00038b 957a      	DEC  R23
00038c f243      	BRVS __DIVF217
                 __DIVF215:
00038d de7f      	RCALL __ROUND_REPACK
00038e 915f      	POP  R21
00038f 9508      	RET
                 
                 __CMPF12:
000390 2399      	TST  R25
000391 f09a      	BRMI __CMPF120
000392 2377      	TST  R23
000393 f042      	BRMI __CMPF121
000394 1797      	CP   R25,R23
000395 f048      	BRLO __CMPF122
000396 f429      	BRNE __CMPF121
000397 17ae      	CP   R26,R30
000398 07bf      	CPC  R27,R31
000399 0786      	CPC  R24,R22
00039a f020      	BRLO __CMPF122
00039b f031      	BREQ __CMPF123
                 __CMPF121:
00039c 9498      	CLZ
00039d 9488      	CLC
00039e 9508      	RET
                 __CMPF122:
00039f 9498      	CLZ
0003a0 9408      	SEC
0003a1 9508      	RET
                 __CMPF123:
0003a2 9418      	SEZ
0003a3 9488      	CLC
0003a4 9508      	RET
                 __CMPF120:
0003a5 2377      	TST  R23
0003a6 f7c2      	BRPL __CMPF122
0003a7 1797      	CP   R25,R23
0003a8 f398      	BRLO __CMPF121
0003a9 f7a9      	BRNE __CMPF122
0003aa 17ea      	CP   R30,R26
0003ab 07fb      	CPC  R31,R27
0003ac 0768      	CPC  R22,R24
0003ad f388      	BRLO __CMPF122
0003ae f399      	BREQ __CMPF123
0003af cfec      	RJMP __CMPF121
                 
                 __ANEGW1:
0003b0 95f1      	NEG  R31
0003b1 95e1      	NEG  R30
0003b2 40f0      	SBCI R31,0
0003b3 9508      	RET
                 
                 __ANEGD1:
0003b4 95f0      	COM  R31
0003b5 9560      	COM  R22
0003b6 9570      	COM  R23
0003b7 95e1      	NEG  R30
0003b8 4fff      	SBCI R31,-1
0003b9 4f6f      	SBCI R22,-1
0003ba 4f7f      	SBCI R23,-1
0003bb 9508      	RET
                 
                 __LSLW2:
0003bc 0fee      	LSL  R30
0003bd 1fff      	ROL  R31
0003be 0fee      	LSL  R30
0003bf 1fff      	ROL  R31
0003c0 9508      	RET
                 
                 __CWD1:
0003c1 2f6f      	MOV  R22,R31
0003c2 0f66      	ADD  R22,R22
0003c3 0b66      	SBC  R22,R22
0003c4 2f76      	MOV  R23,R22
0003c5 9508      	RET
                 
                 __DIVW21U:
0003c6 2400      	CLR  R0
0003c7 2411      	CLR  R1
0003c8 e190      	LDI  R25,16
                 __DIVW21U1:
0003c9 0faa      	LSL  R26
0003ca 1fbb      	ROL  R27
0003cb 1c00      	ROL  R0
0003cc 1c11      	ROL  R1
0003cd 1a0e      	SUB  R0,R30
0003ce 0a1f      	SBC  R1,R31
0003cf f418      	BRCC __DIVW21U2
0003d0 0e0e      	ADD  R0,R30
0003d1 1e1f      	ADC  R1,R31
0003d2 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003d3 60a1      	SBR  R26,1
                 __DIVW21U3:
0003d4 959a      	DEC  R25
0003d5 f799      	BRNE __DIVW21U1
0003d6 01fd      	MOVW R30,R26
0003d7 01d0      	MOVW R26,R0
0003d8 9508      	RET
                 
                 __DIVW21:
0003d9 d004      	RCALL __CHKSIGNW
0003da dfeb      	RCALL __DIVW21U
0003db f40e      	BRTC __DIVW211
0003dc dfd3      	RCALL __ANEGW1
                 __DIVW211:
0003dd 9508      	RET
                 
                 __CHKSIGNW:
0003de 94e8      	CLT
0003df fff7      	SBRS R31,7
0003e0 c002      	RJMP __CHKSW1
0003e1 dfce      	RCALL __ANEGW1
0003e2 9468      	SET
                 __CHKSW1:
0003e3 ffb7      	SBRS R27,7
0003e4 c006      	RJMP __CHKSW2
0003e5 95a0      	COM  R26
0003e6 95b0      	COM  R27
0003e7 9611      	ADIW R26,1
0003e8 f800      	BLD  R0,0
0003e9 9403      	INC  R0
0003ea fa00      	BST  R0,0
                 __CHKSW2:
0003eb 9508      	RET
                 
                 __GETD1P:
0003ec 91ed      	LD   R30,X+
0003ed 91fd      	LD   R31,X+
0003ee 916d      	LD   R22,X+
0003ef 917c      	LD   R23,X
0003f0 9713      	SBIW R26,3
0003f1 9508      	RET
                 
                 __PUTDP1:
0003f2 93ed      	ST   X+,R30
0003f3 93fd      	ST   X+,R31
0003f4 936d      	ST   X+,R22
0003f5 937c      	ST   X,R23
0003f6 9508      	RET
                 
                 __GETD1S0:
0003f7 81e8      	LD   R30,Y
0003f8 81f9      	LDD  R31,Y+1
0003f9 816a      	LDD  R22,Y+2
0003fa 817b      	LDD  R23,Y+3
0003fb 9508      	RET
                 
                 __GETD2S0:
0003fc 81a8      	LD   R26,Y
0003fd 81b9      	LDD  R27,Y+1
0003fe 818a      	LDD  R24,Y+2
0003ff 819b      	LDD  R25,Y+3
000400 9508      	RET
                 
                 __PUTD1S0:
000401 83e8      	ST   Y,R30
000402 83f9      	STD  Y+1,R31
000403 836a      	STD  Y+2,R22
000404 837b      	STD  Y+3,R23
000405 9508      	RET
                 
                 __PUTPARD2:
000406 939a      	ST   -Y,R25
000407 938a      	ST   -Y,R24
000408 93ba      	ST   -Y,R27
000409 93aa      	ST   -Y,R26
00040a 9508      	RET
                 
                 __SWAPD12:
00040b 2e18      	MOV  R1,R24
00040c 2f86      	MOV  R24,R22
00040d 2d61      	MOV  R22,R1
00040e 2e19      	MOV  R1,R25
00040f 2f97      	MOV  R25,R23
000410 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000411 2e1b      	MOV  R1,R27
000412 2fbf      	MOV  R27,R31
000413 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000414 2e1a      	MOV  R1,R26
000415 2fae      	MOV  R26,R30
000416 2de1      	MOV  R30,R1
000417 9508      	RET
                 
                 __EEPROMRDW:
000418 9611      	ADIW R26,1
000419 d002      	RCALL __EEPROMRDB
00041a 2ffe      	MOV  R31,R30
00041b 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
00041c 99e1      	SBIC EECR,EEWE
00041d cffe      	RJMP __EEPROMRDB
00041e 93ff      	PUSH R31
00041f b7ff      	IN   R31,SREG
000420 94f8      	CLI
000421 bbae      	OUT  EEARL,R26
000422 bbbf      	OUT  EEARH,R27
000423 9ae0      	SBI  EECR,EERE
000424 b3ed      	IN   R30,EEDR
000425 bfff      	OUT  SREG,R31
000426 91ff      	POP  R31
000427 9508      	RET
                 
                 __CPD10:
000428 9730      	SBIW R30,0
000429 4060      	SBCI R22,0
00042a 4070      	SBCI R23,0
00042b 9508      	RET
                 
                 __CPD02:
00042c 2400      	CLR  R0
00042d 160a      	CP   R0,R26
00042e 060b      	CPC  R0,R27
00042f 0608      	CPC  R0,R24
000430 0609      	CPC  R0,R25
000431 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  39 r1 :  34 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:  19 r18:  12 r19:  12 r20:  22 r21:  63 r22:  83 r23:  75 
r24:  51 r25:  55 r26:  65 r27:  51 r28:   8 r29:   1 r30: 116 r31:  78 
x  :  11 y  :  76 z  :   7 
Registers used: 23 out of 35 (65.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  21 add   :  11 
adiw  :   9 and   :   5 andi  :   0 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   8 brcs  :   1 break :   0 breq  :  21 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   2 brmi  :   9 brne  :  19 brpl  :   7 brsh  :   1 brtc  :   3 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  :  67 
cbi   :   0 cbr   :   1 clc   :   3 clh   :   0 cli   :   2 cln   :   0 
clr   :  34 cls   :   0 clt   :   4 clv   :   0 clz   :   2 com   :  10 
cp    :   8 cpc   :  14 cpi   :  18 cpse  :   0 dec   :  10 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   3 jmp   :  23 ld    :  12 ldd   :  37 ldi   : 103 
lds   :   0 lpm   :   7 lsl   :  15 lsr   :   3 mov   :  40 movw  :  26 
mul   :   9 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   0 
ori   :   1 out   :  17 pop   :  25 push  :  25 rcall :  30 ret   :  47 
reti  :   1 rjmp  :  42 rol   :  29 ror   :  15 sbc   :   8 sbci  :  13 
sbi   :   1 sbic  :   1 sbis  :   0 sbiw  :  13 sbr   :   3 sbrc  :   1 
sbrs  :   3 sec   :   5 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  18 std   :  20 sts   :   0 sub   :   5 subi  :   6 swap  :   0 
tst   :  17 wdr   :   1 
Instructions used: 75 out of 116 (64.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000864   2118     30   2148   16384  13.1%
[.dseg] 0x000060 0x000174      0     20     20    1024   2.0%
[.eseg] 0x000000 0x000010      0     16     16     512   3.1%

Assembly complete, 0 errors, 6 warnings
