;/*****************************************************
;Project : ADC
;Version :
;Date    : 15.10.2014
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;/*Здесь запуск АЦП на преобразование - по прерыванию INT0, а считывание данных с АЦП -
;по опросу готовности (поллингу), все это делается внутри обработчика INT0*/
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x00 //определен код выбора внешнего опорного источника
;
;/* Read the AD conversion result: функция считывания
;результата аналого-цифрового преобразования */
;unsigned int read_adc(unsigned char adc_input)
; 0000 0016 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0017 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);//Установка выбранного опорного источника и канала АЦП
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0018 // Delay needed for the stabilization of the ADC input voltage
; 0000 0019 delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 001A //ADCSRA|=1<<ADSC;	//Запуск АЦП на преобр. – здесь не нужен (уже запущен)
; 0000 001B // Wait for the AD conversion to complete
; 0000 001C while ((ADCSRA & 1<<ADIF)==0);          /*ожидаем окончания преобразования
; 0000 001D                                         (пока не установился флаг прерывания АЦП ADIF)*/
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 001E ADCSRA|=1<<ADIF;                        //сбрасываем флаг готовности и считываем данные
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 001F return ADCW; //возвращаемая  величина - содержимое регистра данных АЦП
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0020 }
;PCODE: $0000001F VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0024 {               //АЦП по этому прерыванию уже запустился на преобразование
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0025 read_adc(0);    /*Считывание результата преобразования за счет
; 0000 0026                 обращения к функции преобразования сигнала, подаваемого на вход AIN0*/
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0027 PORTB=ADCL;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0028 PORTC=ADCH;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0029 }
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;
;void main(void)
; 0000 002C {
;PCODE: $0000002B VOL: 0
; 0000 002D // Port B initialization
; 0000 002E PORTB=0x00;     //Порт B - на вывод данных
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002F DDRB=0xff;      //для вывода младшего байта преобразованных АЦП данных
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0030 
; 0000 0031 // Port C initialization
; 0000 0032 PORTC=0x00;     //Порт С - на вывод данных
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0033 DDRC=0xff;      //для вывода старшего байта преобразованных АЦП данных
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0034 
; 0000 0035 // External Interrupt(s) initialization
; 0000 0036 // INT0: On
; 0000 0037 // INT0 Mode: Falling Edge
; 0000 0038 // INT1: Off
; 0000 0039 // INT2: Off
; 0000 003A GICR|=1<<INT0;  //Разрешение прерывания INT0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 003B MCUCR=1<<ISC01; //Запуск прерывания - по заднему фронту INT0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 003C MCUCSR=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 003D GIFR=1<<INTF0;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 003E 
; 0000 003F // ADC initialization
; 0000 0040 // ADC Clock frequency: 250,000 kHz
; 0000 0041 // ADC Voltage Reference: AREF pin
; 0000 0042 // ADC Auto Trigger Source: External IRQ0
; 0000 0043 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0044 ADCSRA=0xA5;    //частота 250 кГц, запуск в соотв. с уст. разрядов 7-5 SFIOR
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0045 SFIOR&=0x1F;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0046 SFIOR|=0x40;    //Запуск по внешнему прерыванию INT0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0047 
; 0000 0048 // Global enable interrupts
; 0000 0049 #asm("sei")
;PCODE: $00000047 VOL: 0
	sei
;PCODE: $00000048 VOL: 0
; 0000 004A 
; 0000 004B while (1)       //бесконечный цикл, выход из которого  происходит
;PCODE: $00000049 VOL: 0
; 0000 004C       {         //по прерываннию INT0
; 0000 004D       // Place your code here
; 0000 004E       };
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 004F }
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
