;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <bcd.h>            //библиотечная функция преобразования дв. числа (0...99) в упакованное BCD
;// Declare your global variables here
;//библиотека графики 10 десятичных цифр (знакогенератор)
;flash unsigned char  DIG_DEC[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
;//число в распакованном BCD (одна цифра в одном байте), ст. байт по младшему адресу
;unsigned char BCD_UNPACKED[4]={0,0,0,0};    //в исходном состоянии на индикаторе 0000
;/*Здесь znakomesto и i - глобальные, посккольку к ним должен быть доступ из обработчика совпадения T1*/
;unsigned char i=0;                           //индекс элементов массива расп. дес. цифр
;
;//////////External Interrupt 1 service routine, обработчик внешнего прерывания на входе INT1//////////
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 000E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000F if (MCUCR==0x0C)    {
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0010                     MCUCR=0x08;     //изменить тип прерывания - по срезу
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0011                     TCCR0=0x02;     //если прерывание было по фронту - запустить T0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0012                     }
; 0000 0013 else                {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0014                     //двоичное время и его десятичные разряды - однобайтные целые без знака
; 0000 0015                     unsigned char sot=0, bin_time;
; 0000 0016                     TCCR0=0x00;     //если прерывание по срезу - остановить T0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;	sot -> Y+1
;	bin_time -> Y+0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0017                     bin_time=TCNT0; //время в двоичном коде запомнить для послед. преобразований
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0018                     PORTA=TCNT0;    //вывести время в мкс в дв. коде в PORTA
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0019                     TCNT0=0x00;     //обнулить TCNT0 для последующих измерений
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 001A                     MCUCR=0x0C;     //изменить тип прерывания - по фронту, начать преобразование в распак. BCD
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 001B 
; 0000 001C 
; 0000 001D                     sot=0;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 001E                     while (bin_time>=100)   //Начинаем считать сотни
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 001F                         {
; 0000 0020                         bin_time-=100; sot++;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0021                         };                          //Здесь в bin_time остается число единиц (0...99)
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0022                     sot=bin2bcd(sot);               //Находим упакованный BCD-код числа сотен (0...99)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0023                     bin_time=bin2bcd(bin_time);     //Находим упакованный BCD-код числа единиц (0...99)
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0024                     BCD_UNPACKED[0]=sot>>4;         //Получаем распакованный BCD числа тысяч (0...9)
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0025                     BCD_UNPACKED[1]=sot&0x0F;       //Получаем распакованный BCD числа сотен (0...9)
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0026                     BCD_UNPACKED[2]=bin_time>>4;    //Получаем распакованный BCD числа десятков (0...9)
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0027                     BCD_UNPACKED[3]=bin_time&0x0F;  //Получаем распакованный BCD числа единиц (0...9)
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0028                     };
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0029 }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;////////// Timer1 output compare A interrupt service routine, обр. прер. по совп. A TC1//////////
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 002C {                   //Обнулять здесь TC1 не надо - он сам сбросился при совпадении и генерации прерывания (режим CTC)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 002D PORTB=0x00;         //Гашение текущего знакоместа, необходимо для модели PROTEUS
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 002E PORTC=0x00;         //Для реального индикатора необязательно
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 002F //delay_us(50);
; 0000 0030 PORTB=0b1000>>i;                    //Включаем катодный ключ очередного знакоместа
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0031 PORTC=DIG_DEC[BCD_UNPACKED[i]];     //Код знака 7-сег. дисплея для очередного знакоместа
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0032 i++;                //переходим к след. десятичной цифре и след. знакоместу
;PCODE: $0000005F VOL: 0
; 0000 0033 if (i>3) i=0;       //Если прошли все знакоместа, начинаем цикл дин. инд. сначала
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0034 }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;
;////////////////////Главная функция////////////////////
;void main(void)
; 0000 0038 {
;PCODE: $00000068 VOL: 0
; 0000 0039 // Declare your local variables here
; 0000 003A 
; 0000 003B PORTA=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 003C DDRA=0xFF;                          //порт A - на вывод, вывод в него нулей
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 003D 
; 0000 003E PORTB=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 003F DDRB=0x0F;                          //4 мл. разряда PORTB - на вывод
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0040 
; 0000 0041 PORTC=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0042 DDRC=0xFF;                          //порт С - на вывод, вывод в него нулей
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0043 
; 0000 0044 // Timer/Counter 0 initialization
; 0000 0045 // Clock source: System Clock
; 0000 0046 // Clock value: Timer 0 Stopped
; 0000 0047 // Mode: Normal top=FFh
; 0000 0048 // OC0 output: Disconnected
; 0000 0049 TCCR0=0x00;                         //Таймер T0 остановлен с нулевым значением
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 004A TCNT0=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 004B OCR0=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 004C 
; 0000 004D // Timer/Counter 1 initialization
; 0000 004E // Clock source: System Clock
; 0000 004F // Clock value: 8000,000 kHz
; 0000 0050 // Mode: CTC top=OCR1A
; 0000 0051 // OC1A output: Discon.
; 0000 0052 // OC1B output: Discon.
; 0000 0053 // Noise Canceler: Off
; 0000 0054 // Input Capture on Falling Edge
; 0000 0055 // Timer 1 Overflow Interrupt: Off
; 0000 0056 // Input Capture Interrupt: Off
; 0000 0057 // Compare A Match Interrupt: On
; 0000 0058 // Compare B Match Interrupt: Off
; 0000 0059 TCCR1A=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 005A TCCR1B=0x09;        //запуск таймера с сист. частотой в реж. CTC
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 005B TCNT1H=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 005C TCNT1L=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 005D ICR1H=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 005E ICR1L=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 005F OCR1AH=0x4E;        //загрузка регистра сравнения числом, обеспечивающем
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0060 OCR1AL=0x20;        //счет от нуля до совпадения в течение 2,5 мс (частота развертки 100 Гц)
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0061 OCR1BH=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0062 OCR1BL=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0063 
; 0000 0064 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0065 TIMSK=0x10;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0066 
; 0000 0067 // External Interrupt(s) initialization
; 0000 0068 // INT0: Off
; 0000 0069 // INT1: On
; 0000 006A // INT1 Mode: Rising Edge
; 0000 006B // INT2: Off
; 0000 006C GICR|=0x80;                         //Разрешение внешнего прерывания INT1
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 006D MCUCR=0x0C;                         //Запрос прер. - передний фронт на входе INT1
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 006E MCUCSR=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 006F GIFR=0x80;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0070 
; 0000 0071 // Global enable interrupts
; 0000 0072 #asm("sei")
;PCODE: $0000009A VOL: 0
	sei
;PCODE: $0000009B VOL: 0
; 0000 0073 
; 0000 0074 while (1)                               //бесконечный цикл (фоновая программа)
;PCODE: $0000009C VOL: 0
; 0000 0075       {                                 //Смена индикации знакомест происходит в обработчике прерывания по совпадению A timer1_compa_isr
; 0000 0076       // Place your code here
; 0000 0077       };
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0078 }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
