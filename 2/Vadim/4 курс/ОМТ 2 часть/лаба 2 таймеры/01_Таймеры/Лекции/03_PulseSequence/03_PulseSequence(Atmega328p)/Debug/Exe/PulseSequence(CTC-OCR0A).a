;/*********************************************************
;Chip type               : ATmega328P
;AVR Core Clock frequency: 16,000000 MHz
;Формирование периодической импульсной последовательности:
;|--|____|------|________|--|____
;10u 20u   30u     40u
; <--------- T --------->
;Количество интервалов в периоде должно быть чётным!!!
;Для переключения длительности интервалов используется
;прерывание по совпадению канала 0A. Модуль счета также -
;в регистре OCR0A.
;**********************************************************/
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;unsigned char interval=0;
;// Timer 0 output compare A interrupt service routine
;interrupt [TIM0_COMPA] void timer0_compa_isr(void)
; 0000 0013 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0014 // Place your code here
; 0000 0015 switch (interval)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0016    {
; 0000 0017     case 0 :  OCR0A=39; interval=1; break;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0018     case 1 :  OCR0A=59; interval=2; break;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0019     case 2 :  OCR0A=79; interval=3; break;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 001A     default:  OCR0A=19; interval=0; break;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 001B     };
;PCODE: $0000002D VOL: 0
; 0000 001C }
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;void main(void)
; 0000 001F {
;PCODE: $00000031 VOL: 0
; 0000 0020 // Declare your local variables here
; 0000 0021 
; 0000 0022 // Crystal Oscillator division factor: 1
; 0000 0023 #pragma optsize-
; 0000 0024 CLKPR=(1<<CLKPCE);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0025 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0026 #ifdef _OPTIMIZE_SIZE_
; 0000 0027 #pragma optsize+
; 0000 0028 #endif
; 0000 0029 
; 0000 002A // Input/Output Ports initialization
; 0000 002B // Port D initialization
; 0000 002C // Function: Bit7=In Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 002D DDRD=(0<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 002E // State: Bit7=T Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 002F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0030 
; 0000 0031 // Timer/Counter 0 initialization
; 0000 0032 // Clock source: System Clock
; 0000 0033 // Clock value: 2000,000 kHz
; 0000 0034 // Mode: CTC top=OCR0A
; 0000 0035 // OC0A output: Toggle on compare match
; 0000 0036 // OC0B output: Disconnected
; 0000 0037 // Timer Period: 0,01 ms
; 0000 0038 // Output Pulse(s):
; 0000 0039 // OC0A Period: 0,02 ms Width: 0,01 ms
; 0000 003A TCCR0A=(0<<COM0A1) | (1<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (1<<WGM01) | (0<<WGM00);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003B TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003C TCNT0=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 003D OCR0A=19;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 003E OCR0B=0;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 003F 
; 0000 0040 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0041 TIMSK0=(0<<OCIE0B) | (1<<OCIE0A) | (0<<TOIE0);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0042 
; 0000 0043 // Global enable interrupts
; 0000 0044 #asm("sei")
;PCODE: $00000046 VOL: 0
	sei
;PCODE: $00000047 VOL: 0
; 0000 0045 
; 0000 0046 while (1)
;PCODE: $00000048 VOL: 0
; 0000 0047       {
; 0000 0048       // Place your code here
; 0000 0049       }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 004A }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;
