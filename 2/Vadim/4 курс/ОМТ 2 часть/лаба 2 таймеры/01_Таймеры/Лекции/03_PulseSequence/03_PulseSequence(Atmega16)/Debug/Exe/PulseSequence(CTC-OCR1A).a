;/***************************************************************
;Chip type               : ATmega16
;AVR Core Clock frequency: 8,000000 MHz
;Формирование периодической импульсной последовательности:
;|--|____|------|________|--|____
;10u  20u   30u    40u
; <--------- T --------->
;Количество интервалов в периоде должно быть чётным!!!
;
;Для переключения длительности интервалов используется
;прерывание по совпадению канала 1A. Модуль счета также -
;в регистре OCR1A. Режим таймера 1 - СТС с вершиной счёта в OCR1A
;***************************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;unsigned char interval=0;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0015 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0016 // Place your code here
; 0000 0017 switch (interval)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0018     {
; 0000 0019     case 0 : OCR1AL=19; interval=1; break;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001A     case 1 : OCR1AL=29; interval=2; break;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 001B     case 2 : OCR1AL=39; interval=3; break;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 001C     default: OCR1AL=9;  interval=0; break;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 001D     };
;PCODE: $0000002D VOL: 0
; 0000 001E }
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;void main(void)
; 0000 0021 {
;PCODE: $00000031 VOL: 0
; 0000 0022 // Declare your local variables here
; 0000 0023 
; 0000 0024 // Input/Output Ports initialization
; 0000 0025 // Port D initialization
; 0000 0026 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0027 DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0028 // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0029 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 002A 
; 0000 002B // Timer/Counter 1 initialization
; 0000 002C // Clock source: System Clock
; 0000 002D // Clock value: 1000,000 kHz
; 0000 002E // Mode: CTC top=OCR1A
; 0000 002F // OC1A output: Toggle on compare match
; 0000 0030 // OC1B output: Disconnected
; 0000 0031 // Noise Canceler: Off
; 0000 0032 // Input Capture on Falling Edge
; 0000 0033 // Timer Period: 0,01 ms
; 0000 0034 // Output Pulse(s):
; 0000 0035 // OC1A Period: 0,02 ms Width: 0,01 ms
; 0000 0036 // Timer1 Overflow Interrupt: Off
; 0000 0037 // Input Capture Interrupt: Off
; 0000 0038 // Compare A Match Interrupt: On
; 0000 0039 // Compare B Match Interrupt: Off
; 0000 003A TCCR1A=(0<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 003C TCNT1H=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003D TCNT1L=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003E ICR1H=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 003F ICR1L=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0040 OCR1AH=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0041 OCR1AL=9;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0042 OCR1BH=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0043 OCR1BL=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0044 
; 0000 0045 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0046 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0047 
; 0000 0048 // Global enable interrupts
; 0000 0049 #asm("sei")
;PCODE: $0000004C VOL: 0
	sei
;PCODE: $0000004D VOL: 0
; 0000 004A 
; 0000 004B while (1)
;PCODE: $0000004E VOL: 0
; 0000 004C       {
; 0000 004D       // Place your code here
; 0000 004E 
; 0000 004F       }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0050 }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
