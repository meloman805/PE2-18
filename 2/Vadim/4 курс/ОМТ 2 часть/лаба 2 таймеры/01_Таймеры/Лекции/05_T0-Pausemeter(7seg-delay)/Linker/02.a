;/*************************************************************************************
;Chip type               : ATmega16
;AVR Core Clock frequency: 8,000000 MHz
;Измеритель длительности паузы периодической импульсной последовательности
;Динамическая индикация организована в бесконечном цикле фоновой программы.
;Измерение длительности паузы организовано с помощью внешнего прерывания INT0
;(по срезу - запускается подсчет импульсов с эталонной частотой 1МГц таймером TCNT0,
;по фронту - счет останавливается и содержимое TCNTO преобразуется в двоично-десятичный
;4-хразрядный распакованный код длительности паузы в микросекундах, который фоновой
;программой выводится на 4-хразрядный семисегментный индикатор).
;*************************************************************************************/
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>      //подключение библиотеки задержек
;// Declare your global variables here
;//библиотека графики 10 десятичных цифр и "-"  (знакогенератор)
;//////////////////////////0////1////2////3////4////5////6////7////8////9////-//
;flash char DIG_DEC[11]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x40};
;//число в распакованном BCD (одна цифра в одном байте), ст. байт по младшему адресу
;unsigned char BCD_UNPACKED[4]={0,0,0,0};    //в исх. сост. на инд. 0000
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0016 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0017 if (MCUCR==0x02)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0018         {
; 0000 0019         TCCR0=0x02;     //Запуск TCNT0 на счет от 0 в NORMAL c f=1 МГЦ
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 001A         MCUCR=0x03;     //следующее прерывание (конец паузы) - по фронту
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001B         }
; 0000 001C else
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001D         {
; 0000 001E         unsigned char sot=0, des=0, pause_bin;
; 0000 001F         TCCR0=0x00;     //Останов TCNT0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;	sot -> Y+2
;	des -> Y+1
;	pause_bin -> Y+0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0020         PORTA=TCNT0;    //вывод TCNT0 в порт A и в переменную pause_bin
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0021         pause_bin=TCNT0;//пауза в микросекундах в двоичном коде
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0022         TCNT0=0;        //сброс TCNT0 для подгот. к след. измерению
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0023         MCUCR=0x02;     //след. прерывание INT0 - по срезу
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0024         //получение распакованного BCD от pause_bin и запись его в массив BCD_UNPACKED[4]
; 0000 0025         while (pause_bin>=100)        //подсчет сотен в числе
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0026             {
; 0000 0027             pause_bin-=100; sot++;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0028             };
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0029         while (pause_bin>=10)        //подсчет десятков в числе
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 002A             {
; 0000 002B             pause_bin-=10; des++;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 002C             };                      //Здесь в pause_bin - число единиц (<=9)
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 002D         BCD_UNPACKED[0]=0, BCD_UNPACKED[1]=sot, BCD_UNPACKED[2]=des, BCD_UNPACKED[3]=pause_bin;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 002E         };
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 002F }
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0033 {
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0034 unsigned char i;
; 0000 0035 // Place your code here
; 0000 0036 PORTA=0xFF;             //Вывод на индикацию в порт A 0xFF в случае переполнения
;PCODE: $00000051 VOL: 0
;	i -> R17
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0037 for (i=0;i<4;i++)
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0038     {
; 0000 0039     BCD_UNPACKED[i]=10; //код изображения "-" на 7SEG,
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 003A     };                  // в случае переполнения на 7SEG индицируется "----"
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 003B TCCR0=0x00;             //Останов TCNT0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 003C TCNT0=0;                //сброс TCNT0 для подгот. к след. измерению
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 003D MCUCR=0x02;             //след. прерывание INT0 - по срезу
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 003E }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;
;void main(void)
; 0000 0041 {
;PCODE: $00000071 VOL: 0
; 0000 0042 // Declare your local variables here
; 0000 0043 // Input/Output Ports initialization
; 0000 0044 // Port A initialization
; 0000 0045 PORTA=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0046 DDRA=0xFF;              //порт A - на вывод данных
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0047 PORTB=0xFF;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0048 DDRB=0x0F;              //порт B (младшие 4 бита) - на вывод данных
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0049 PORTC=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 004A DDRC=0xFF;              //порт C - на вывод данных
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 004B 
; 0000 004C // Timer/Counter 0 initialization
; 0000 004D // Clock source: System Clock
; 0000 004E // Clock value: Timer 0 Stopped
; 0000 004F // Mode: Normal top=0xFF
; 0000 0050 // OC0 output: Disconnected
; 0000 0051 TCCR0=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0052 TCNT0=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0053 OCR0=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0054 
; 0000 0055 // External Interrupt(s) initialization
; 0000 0056 // INT0: On
; 0000 0057 // INT0 Mode: Falling Edge
; 0000 0058 // INT1: Off
; 0000 0059 // INT2: Off
; 0000 005A GICR|=0x40;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 005B MCUCR=0x02;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 005C MCUCSR=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 005D GIFR=0x40;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 005E 
; 0000 005F // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0060 TIMSK=0x01;             //разрешение прерывания TCNT0 по переполнению
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0061 
; 0000 0062 // Global enable interrupts
; 0000 0063 #asm("sei")
;PCODE: $0000008F VOL: 0
	sei
;PCODE: $00000090 VOL: 0
; 0000 0064 
; 0000 0065 while (1)
;PCODE: $00000091 VOL: 0
; 0000 0066       {                 //фоновая программа - развертка изображения числа микросекунд в паузе
; 0000 0067       unsigned char i;  //на семисегментном индикаторе с общим катодом 7SEG-MPX4-CC
; 0000 0068       for (i=0;i<4;i++)
;PCODE: $00000092 VOL: 0
;	i -> Y+0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0069         {
; 0000 006A         PORTB=~(0b00001000>>i);             //активиз. очередной общий катод (низким уровнем)
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 006B         PORTC=DIG_DEC[BCD_UNPACKED[i]];     //Графика очередного знакоместа (извлекаем из таблицы знакогенератора)
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 006C         delay_us(2500);                     //Задержка подсветки очередного знакоместа 2.5 мс
;PCODE: $000000AA VOL: 0
; 0000 006D         PORTB=0x0F;                         //Гашение сегментов очередного знакоместа перед переходом к след.
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 006E         };
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 006F       };
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0070 }
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
