
AVRASM ver. 2.1.30  D:\000_AMA-STUD\OMT_P2\Примеры на лекциях и практиках(В работе)\Примеры на лекциях и практиках\Лекции\03_T0-Pausemeter(7seg-T2CTC)\List\03.asm Tue Oct 04 09:50:17 2016

D:\000_AMA-STUD\OMT_P2\Примеры на лекциях и практиках(В работе)\Примеры на лекциях и практиках\Лекции\03_T0-Pausemeter(7seg-T2CTC)\List\03.asm(1072): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 8,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _n_znak=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0030 	JMP  __RESET
000002 940c 004e 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 00bf 	JMP  _timer2_comp_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 00a0 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _DIG_DEC:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f
D:\000_AMA-STUD\OMT_P2\Примеры на лекциях и практиках(В работе)\Примеры на лекциях и практиках\Лекции\03_T0-Pausemeter(7seg-T2CTC)\List\03.asm(1105): warning: .cseg .db misalignment - padding zero byte
00002f 0040      	.DB  0x7F,0x6F,0x40
                 
                 __RESET:
000030 94f8      	CLI
000031 27ee      	CLR  R30
000032 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000033 e0f1      	LDI  R31,1
000034 bffb      	OUT  GICR,R31
000035 bfeb      	OUT  GICR,R30
000036 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000037 e1f8      	LDI  R31,0x18
000038 bdf1      	OUT  WDTCR,R31
000039 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00003a e08d      	LDI  R24,(14-2)+1
00003b e0a2      	LDI  R26,2
00003c 27bb      	CLR  R27
                 __CLEAR_REG:
00003d 93ed      	ST   X+,R30
00003e 958a      	DEC  R24
00003f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000040 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000041 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000042 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000043 93ed      	ST   X+,R30
000044 9701      	SBIW R24,1
000045 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000046 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000047 bfed      	OUT  SPL,R30
000048 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000049 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004b e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004c 940c 00e3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/************************************************************************************
                 ;Chip type               : ATmega16
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Измеритель длительности паузы периодической импульсной последовательности в мкс
                 ;Динамическая индикация организована с помощью прерывания от таймера TCNT2
                 ;по совпадению в режиме CTC, происходящего через каждые 2.5 мс (длительность
                 ;подсветки одного знакоместа).
                 ;Измерение длительности паузы организовано с помощью внешнего прерывания INT0
                 ;(по срезу - запускается подсчет импульсов с эталонной частотой 1МГц таймером TCNT0,
                 ;по фронту - счет останавливается и содержимое TCNTO преобразуется в двоично-десятичный
                 ;4-хразрядный распакованный код длительности паузы в микросекундах, который обработчиком
                 ;прерывания по совпадению TCNT2 выводится на 4-хразрядный семисегментный индикатор).
                 ;Фоновая программа - пустой бесконечный цикл, прерываемый обработчиками прерываний.
                 ;*************************************************************************************/
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <bcd.h>        //подключение библиотеки двоично-десятичных преобразований
                 ;// Declare your global variables here
                 ;//библиотека графики 10 десятичных цифр и "-" для переполнения (знакогенератор)
                 ;//////////////////////////0////1////2////3////4////5////6////7////8////9////-//
                 ;flash char DIG_DEC[11]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x40};
                 ;//число мкс в паузе в распакованном BCD (одна цифра в одном байте), ст. байт по младшему адресу
                 ;unsigned char BCD_UNPACKED[4]={0,0,0,0};    //в исх. сост. на инд. 0000
                 ;unsigned char n_znak;                       //номер подсвечиваемого знакоместа, здесь глобальная
                 ;                                            //переменная, доступная обработчикам прерываний
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 001B {
                 
                 	.CSEG
                 _ext_int0_isr:
00004e 920a      	ST   -Y,R0
00004f 921a      	ST   -Y,R1
000050 92fa      	ST   -Y,R15
000051 936a      	ST   -Y,R22
000052 937a      	ST   -Y,R23
000053 938a      	ST   -Y,R24
000054 939a      	ST   -Y,R25
000055 93aa      	ST   -Y,R26
000056 93ba      	ST   -Y,R27
000057 93ea      	ST   -Y,R30
000058 93fa      	ST   -Y,R31
000059 b7ef      	IN   R30,SREG
00005a 93ea      	ST   -Y,R30
                 ; 0000 001C // Place your code here
                 ; 0000 001D if (MCUCR==0x02)
00005b b7e5      	IN   R30,0x35
00005c 30e2      	CPI  R30,LOW(0x2)
00005d f429      	BRNE _0x3
                 ; 0000 001E         {
                 ; 0000 001F         TCCR0=0x02;     //Запуск TCNT0 на счет от 0 в NORMAL c f=1МГЦ
00005e e0e2      	LDI  R30,LOW(2)
00005f bfe3      	OUT  0x33,R30
                 ; 0000 0020         MCUCR=0x03;     //следующее прерывание (конец паузы) - по фронту
000060 e0e3      	LDI  R30,LOW(3)
000061 bfe5      	OUT  0x35,R30
                 ; 0000 0021         }
                 ; 0000 0022 else
000062 c02f      	RJMP _0x4
                 _0x3:
                 ; 0000 0023         {
                 ; 0000 0024         unsigned char sot=0, pause;
                 ; 0000 0025         TCCR0=0x00;     //Останов TCNT0
000063 9722      	SBIW R28,2
000064 e0e0      	LDI  R30,LOW(0)
000065 83e9      	STD  Y+1,R30
                 ;	sot -> Y+1
                 ;	pause -> Y+0
000066 bfe3      	OUT  0x33,R30
                 ; 0000 0026         PORTA=TCNT0;    //вывод TCNT0 в порт A
000067 b7e2      	IN   R30,0x32
000068 bbeb      	OUT  0x1B,R30
                 ; 0000 0027         pause=TCNT0;    //и в переменную pause
000069 b7e2      	IN   R30,0x32
00006a 83e8      	ST   Y,R30
                 ; 0000 0028         TCNT0=0;        //сброс TCNT0 для подгот. к след. измерению
00006b e0e0      	LDI  R30,LOW(0)
00006c bfe2      	OUT  0x32,R30
                 ; 0000 0029         MCUCR=0x02;     //след. прерывание INT0 - по срезу
00006d e0e2      	LDI  R30,LOW(2)
00006e bfe5      	OUT  0x35,R30
                 ; 0000 002A         while (pause>=100)
                 _0x5:
00006f 81a8      	LD   R26,Y
000070 36a4      	CPI  R26,LOW(0x64)
000071 f038      	BRLO _0x7
                 ; 0000 002B             {
                 ; 0000 002C             pause-=100, sot++;
000072 81e8      	LD   R30,Y
000073 56e4      	SUBI R30,LOW(100)
000074 83e8      	ST   Y,R30
000075 81e9      	LDD  R30,Y+1
000076 5fef      	SUBI R30,-LOW(1)
000077 83e9      	STD  Y+1,R30
                 ; 0000 002D             };          //Здесь в sot - количество сотен микросекунд (<=99), в pause - кол-во микросекунд (<=99)
000078 cff6      	RJMP _0x5
                 _0x7:
                 ; 0000 002E         sot=bin2bcd(sot);       //библиотечная функция преобразования в упакованный BCD, здесь тысячи и сотни
000079 81a9      	LDD  R26,Y+1
00007a d08c      	RCALL _bin2bcd
00007b 83e9      	STD  Y+1,R30
                 ; 0000 002F         pause=bin2bcd(pause);   //здесь десятки и единицы
00007c 81a8      	LD   R26,Y
00007d d089      	RCALL _bin2bcd
00007e 83e8      	ST   Y,R30
                 ; 0000 0030         //получение распакованного BCD кода цифр из упакованного
                 ; 0000 0031         BCD_UNPACKED[0]=sot>>4, BCD_UNPACKED[1]=sot&0x0F, BCD_UNPACKED[2]=pause>>4,BCD_UNPACKED[3]=pause&0x0F;
00007f 81e9      	LDD  R30,Y+1
000080 95e2      	SWAP R30
000081 70ef      	ANDI R30,0xF
000082 93e0 0160 	STS  _BCD_UNPACKED,R30
000084 81e9      	LDD  R30,Y+1
000085 70ef      	ANDI R30,LOW(0xF)
                +
000086 93e0 0161+STS _BCD_UNPACKED + ( 1 ) , R30
                 	__PUTB1MN _BCD_UNPACKED,1
000088 81e8      	LD   R30,Y
000089 95e2      	SWAP R30
00008a 70ef      	ANDI R30,0xF
                +
00008b 93e0 0162+STS _BCD_UNPACKED + ( 2 ) , R30
                 	__PUTB1MN _BCD_UNPACKED,2
00008d 81e8      	LD   R30,Y
00008e 70ef      	ANDI R30,LOW(0xF)
                +
00008f 93e0 0163+STS _BCD_UNPACKED + ( 3 ) , R30
                 	__PUTB1MN _BCD_UNPACKED,3
                 ; 0000 0032         };
000091 9622      	ADIW R28,2
                 _0x4:
                 ; 0000 0033 }
000092 91e9      	LD   R30,Y+
000093 bfef      	OUT  SREG,R30
000094 91f9      	LD   R31,Y+
000095 91e9      	LD   R30,Y+
000096 91b9      	LD   R27,Y+
000097 91a9      	LD   R26,Y+
000098 9199      	LD   R25,Y+
000099 9189      	LD   R24,Y+
00009a 9179      	LD   R23,Y+
00009b 9169      	LD   R22,Y+
00009c 90f9      	LD   R15,Y+
00009d 9019      	LD   R1,Y+
00009e 9009      	LD   R0,Y+
00009f 9518      	RETI
                 ;
                 ;// Timer 0 overflow interrupt service routine - индикация "----" в случае переполнения
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0037 {
                 _timer0_ovf_isr:
0000a0 93aa      	ST   -Y,R26
0000a1 93ea      	ST   -Y,R30
0000a2 93fa      	ST   -Y,R31
0000a3 b7ef      	IN   R30,SREG
0000a4 93ea      	ST   -Y,R30
                 ; 0000 0038 // Place your code here
                 ; 0000 0039 unsigned char i;
                 ; 0000 003A PORTA=0xFF;             //Вывод на индикацию в порт A 0xFF в случае переполнения
0000a5 931a      	ST   -Y,R17
                 ;	i -> R17
0000a6 efef      	LDI  R30,LOW(255)
0000a7 bbeb      	OUT  0x1B,R30
                 ; 0000 003B for (i=0;i<4;i++)
0000a8 e010      	LDI  R17,LOW(0)
                 _0x9:
0000a9 3014      	CPI  R17,4
0000aa f440      	BRSH _0xA
                 ; 0000 003C     {
                 ; 0000 003D     BCD_UNPACKED[i]=10; //код изображения "-" на 7SEG,
0000ab 2fe1      	MOV  R30,R17
0000ac e0f0      	LDI  R31,0
0000ad 5ae0      	SUBI R30,LOW(-_BCD_UNPACKED)
0000ae 4ffe      	SBCI R31,HIGH(-_BCD_UNPACKED)
0000af e0aa      	LDI  R26,LOW(10)
0000b0 83a0      	STD  Z+0,R26
                 ; 0000 003E     };                  // в случае переполнения на 7SEG индицируется "----"
0000b1 5f1f      	SUBI R17,-1
0000b2 cff6      	RJMP _0x9
                 _0xA:
                 ; 0000 003F TCCR0=0x00;             //Останов TCNT0
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 bfe3      	OUT  0x33,R30
                 ; 0000 0040 TCNT0=0;                //сброс TCNT0 для подгот. к след. измерению
0000b5 bfe2      	OUT  0x32,R30
                 ; 0000 0041 MCUCR=0x02;             //след. прерывание INT0 - по срезу
0000b6 e0e2      	LDI  R30,LOW(2)
0000b7 bfe5      	OUT  0x35,R30
                 ; 0000 0042 }
0000b8 9119      	LD   R17,Y+
0000b9 91e9      	LD   R30,Y+
0000ba bfef      	OUT  SREG,R30
0000bb 91f9      	LD   R31,Y+
0000bc 91e9      	LD   R30,Y+
0000bd 91a9      	LD   R26,Y+
0000be 9518      	RETI
                 ;
                 ;// Timer2 output compare interrupt service routine - смена индицируемых семисегментных знакомест при динамической индикации
                 ;interrupt [TIM2_COMP] void timer2_comp_isr(void)
                 ; 0000 0046 {
                 _timer2_comp_isr:
0000bf 920a      	ST   -Y,R0
0000c0 93aa      	ST   -Y,R26
0000c1 93ea      	ST   -Y,R30
0000c2 93fa      	ST   -Y,R31
0000c3 b7ef      	IN   R30,SREG
0000c4 93ea      	ST   -Y,R30
                 ; 0000 0047 // Смена знакоместа при динамической индикации
                 ; 0000 0048 PORTB=0xFF;                         //Кратковременное гашение текущего знакоместа (для модели PROTEUS)
0000c5 efef      	LDI  R30,LOW(255)
0000c6 bbe8      	OUT  0x18,R30
                 ; 0000 0049 PORTB=~(0b00001000>>n_znak);        //Включаем катод очередного знакоместа (низким уровнем)
0000c7 2de5      	MOV  R30,R5
0000c8 e0a8      	LDI  R26,LOW(8)
0000c9 940e 0111 	CALL __LSRB12
0000cb 95e0      	COM  R30
0000cc bbe8      	OUT  0x18,R30
                 ; 0000 004A PORTC=DIG_DEC[BCD_UNPACKED[n_znak]];//Код знака 7-сег. дисплея для очередного знакоместа
0000cd 2de5      	MOV  R30,R5
0000ce e0f0      	LDI  R31,0
0000cf 5ae0      	SUBI R30,LOW(-_BCD_UNPACKED)
0000d0 4ffe      	SBCI R31,HIGH(-_BCD_UNPACKED)
0000d1 81e0      	LD   R30,Z
0000d2 e0f0      	LDI  R31,0
0000d3 5aec      	SUBI R30,LOW(-_DIG_DEC*2)
0000d4 4fff      	SBCI R31,HIGH(-_DIG_DEC*2)
0000d5 9004      	LPM  R0,Z
0000d6 ba05      	OUT  0x15,R0
                 ; 0000 004B n_znak++;                           //переходим к след. десятичной цифре и след. знакоместу
0000d7 9453      	INC  R5
                 ; 0000 004C if (n_znak>3) n_znak=0;             //Если прошли все знакоместа, начинаем цикл дин. инд. сначала
0000d8 e0e3      	LDI  R30,LOW(3)
0000d9 15e5      	CP   R30,R5
0000da f408      	BRSH _0xB
0000db 2455      	CLR  R5
                 ; 0000 004D }
                 _0xB:
0000dc 91e9      	LD   R30,Y+
0000dd bfef      	OUT  SREG,R30
0000de 91f9      	LD   R31,Y+
0000df 91e9      	LD   R30,Y+
0000e0 91a9      	LD   R26,Y+
0000e1 9009      	LD   R0,Y+
0000e2 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 0050 {
                 _main:
                 ; 0000 0051 // Declare your local variables here
                 ; 0000 0052 
                 ; 0000 0053 // Input/Output Ports initialization
                 ; 0000 0054 // Port A initialization
                 ; 0000 0055 PORTA=0x00;
0000e3 e0e0      	LDI  R30,LOW(0)
0000e4 bbeb      	OUT  0x1B,R30
                 ; 0000 0056 DDRA=0xFF;                  //порт A - на вывод данных
0000e5 efef      	LDI  R30,LOW(255)
0000e6 bbea      	OUT  0x1A,R30
                 ; 0000 0057 PORTB=0xFF;
0000e7 bbe8      	OUT  0x18,R30
                 ; 0000 0058 DDRB=0x0F;                  //порт B (младшие 4 бита) - на вывод данных
0000e8 e0ef      	LDI  R30,LOW(15)
0000e9 bbe7      	OUT  0x17,R30
                 ; 0000 0059 PORTC=0x00;
0000ea e0e0      	LDI  R30,LOW(0)
0000eb bbe5      	OUT  0x15,R30
                 ; 0000 005A DDRC=0xFF;                  //порт C - на вывод данных
0000ec efef      	LDI  R30,LOW(255)
0000ed bbe4      	OUT  0x14,R30
                 ; 0000 005B 
                 ; 0000 005C // Timer/Counter 0 initialization
                 ; 0000 005D // Clock source: System Clock
                 ; 0000 005E // Clock value: Timer 0 Stopped
                 ; 0000 005F // Mode: Normal top=0xFF
                 ; 0000 0060 // OC0 output: Disconnected
                 ; 0000 0061 TCCR0=0x00;
0000ee e0e0      	LDI  R30,LOW(0)
0000ef bfe3      	OUT  0x33,R30
                 ; 0000 0062 TCNT0=0x00;
0000f0 bfe2      	OUT  0x32,R30
                 ; 0000 0063 OCR0=0x00;
0000f1 bfec      	OUT  0x3C,R30
                 ; 0000 0064 
                 ; 0000 0065 // Timer/Counter 2 initialization
                 ; 0000 0066 // Clock source: System Clock
                 ; 0000 0067 // Clock value: 31,250 kHz
                 ; 0000 0068 // Mode: CTC top=OCR2
                 ; 0000 0069 // OC2 output: Disconnected
                 ; 0000 006A ASSR=0x00;
0000f2 bde2      	OUT  0x22,R30
                 ; 0000 006B TCCR2=0x0E;
0000f3 e0ee      	LDI  R30,LOW(14)
0000f4 bde5      	OUT  0x25,R30
                 ; 0000 006C TCNT2=0x00;
0000f5 e0e0      	LDI  R30,LOW(0)
0000f6 bde4      	OUT  0x24,R30
                 ; 0000 006D OCR2=77;                   //При данном значении OCR2 интервал между прерываниями по совпадению
0000f7 e4ed      	LDI  R30,LOW(77)
0000f8 bde3      	OUT  0x23,R30
                 ; 0000 006E                            //в режиме CTC - (77+1)/31250=2.5 мс
                 ; 0000 006F // External Interrupt(s) initialization
                 ; 0000 0070 // INT0: On
                 ; 0000 0071 // INT0 Mode: Falling Edge
                 ; 0000 0072 // INT1: Off
                 ; 0000 0073 // INT2: Off
                 ; 0000 0074 GICR|=0x40;
0000f9 b7eb      	IN   R30,0x3B
0000fa 64e0      	ORI  R30,0x40
0000fb bfeb      	OUT  0x3B,R30
                 ; 0000 0075 MCUCR=0x02;
0000fc e0e2      	LDI  R30,LOW(2)
0000fd bfe5      	OUT  0x35,R30
                 ; 0000 0076 MCUCSR=0x00;
0000fe e0e0      	LDI  R30,LOW(0)
0000ff bfe4      	OUT  0x34,R30
                 ; 0000 0077 GIFR=0x40;
000100 e4e0      	LDI  R30,LOW(64)
000101 bfea      	OUT  0x3A,R30
                 ; 0000 0078 
                 ; 0000 0079 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 007A TIMSK=0x81;                //разрешение прерываний: по переполнению TCNT0 и по совпадению TCNT2
000102 e8e1      	LDI  R30,LOW(129)
000103 bfe9      	OUT  0x39,R30
                 ; 0000 007B 
                 ; 0000 007C // Global enable interrupts
                 ; 0000 007D #asm("sei")
000104 9478      	sei
                 ; 0000 007E while (1);
                 _0xC:
000105 cfff      	RJMP _0xC
                 ; 0000 007F }
                 _0xF:
000106 cfff      	RJMP _0xF
                 
                 	.CSEG
                 _bin2bcd:
000107 93aa      	ST   -Y,R26
000108 91a9          ld   r26,y+
000109 27ee          clr  r30
                 bin2bcd0:
00010a 50aa          subi r26,10
00010b f012          brmi bin2bcd1
00010c 5fe0          subi r30,-16
00010d cffc          rjmp bin2bcd0
                 bin2bcd1:
00010e 5fa6          subi r26,-10
00010f 0fea          add  r30,r26
000110 9508          ret
                 
                 	.DSEG
                 _BCD_UNPACKED:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 
                 	.CSEG
                 __LSRB12:
000111 23ee      	TST  R30
000112 2e0e      	MOV  R0,R30
000113 2fea      	MOV  R30,R26
000114 f019      	BREQ __LSRB12R
                 __LSRB12L:
000115 95e6      	LSR  R30
000116 940a      	DEC  R0
000117 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
000118 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   8 r1 :   2 r2 :   0 r3 :   0 r4 :   0 r5 :   5 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   0 r17:   6 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   2 
r24:   6 r25:   3 r26:  21 r27:   3 r28:   3 r29:   1 r30: 128 r31:  16 
x  :   2 y  :  61 z  :   3 
Registers used: 18 out of 35 (51.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   1 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   1 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   1 brne  :   4 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   1 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   1 
cp    :   1 cpc   :   0 cpi   :   3 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   1 jmp   :  22 ld    :  29 ldd   :   4 ldi   :  40 
lds   :   0 lpm   :   2 lsl   :   0 lsr   :   1 mov   :   5 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   1 out   :  42 pop   :   0 push  :   0 rcall :   2 ret   :   2 
reti  :   3 rjmp  :   6 rol   :   0 ror   :   0 sbc   :   0 sbci  :   3 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   2 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  28 std   :   4 sts   :   4 sub   :   0 subi  :   9 swap  :   2 
tst   :   1 wdr   :   0 
Instructions used: 39 out of 116 (33.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000232    550     12    562   16384   3.4%
[.dseg] 0x000060 0x000164      0      4      4    1119   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 2 warnings
