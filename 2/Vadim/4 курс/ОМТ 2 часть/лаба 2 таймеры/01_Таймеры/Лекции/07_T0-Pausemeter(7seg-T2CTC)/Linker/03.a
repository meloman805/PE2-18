;/************************************************************************************
;Chip type               : ATmega16
;AVR Core Clock frequency: 8,000000 MHz
;Измеритель длительности паузы периодической импульсной последовательности в мкс
;Динамическая индикация организована с помощью прерывания от таймера TCNT2
;по совпадению в режиме CTC, происходящего через каждые 2.5 мс (длительность
;подсветки одного знакоместа).
;Измерение длительности паузы организовано с помощью внешнего прерывания INT0
;(по срезу - запускается подсчет импульсов с эталонной частотой 1МГц таймером TCNT0,
;по фронту - счет останавливается и содержимое TCNTO преобразуется в двоично-десятичный
;4-хразрядный распакованный код длительности паузы в микросекундах, который обработчиком
;прерывания по совпадению TCNT2 выводится на 4-хразрядный семисегментный индикатор).
;Фоновая программа - пустой бесконечный цикл, прерываемый обработчиками прерываний.
;*************************************************************************************/
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <bcd.h>        //подключение библиотеки двоично-десятичных преобразований
;// Declare your global variables here
;//библиотека графики 10 десятичных цифр и "-" для переполнения (знакогенератор)
;//////////////////////////0////1////2////3////4////5////6////7////8////9////-//
;flash char DIG_DEC[11]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x40};
;//число мкс в паузе в распакованном BCD (одна цифра в одном байте), ст. байт по младшему адресу
;unsigned char BCD_UNPACKED[4]={0,0,0,0};    //в исх. сост. на инд. 0000
;unsigned char n_znak;                       //номер подсвечиваемого знакоместа, здесь глобальная
;                                            //переменная, доступная обработчикам прерываний
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 001B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001C // Place your code here
; 0000 001D if (MCUCR==0x02)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001E         {
; 0000 001F         TCCR0=0x02;     //Запуск TCNT0 на счет от 0 в NORMAL c f=1МГЦ
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0020         MCUCR=0x03;     //следующее прерывание (конец паузы) - по фронту
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0021         }
; 0000 0022 else
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0023         {
; 0000 0024         unsigned char sot=0, pause;
; 0000 0025         TCCR0=0x00;     //Останов TCNT0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;	sot -> Y+1
;	pause -> Y+0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0026         PORTA=TCNT0;    //вывод TCNT0 в порт A
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0027         pause=TCNT0;    //и в переменную pause
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0028         TCNT0=0;        //сброс TCNT0 для подгот. к след. измерению
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0029         MCUCR=0x02;     //след. прерывание INT0 - по срезу
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002A         while (pause>=100)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 002B             {
; 0000 002C             pause-=100, sot++;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 002D             };          //Здесь в sot - количество сотен микросекунд (<=99), в pause - кол-во микросекунд (<=99)
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 002E         sot=bin2bcd(sot);       //библиотечная функция преобразования в упакованный BCD, здесь тысячи и сотни
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002F         pause=bin2bcd(pause);   //здесь десятки и единицы
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0030         //получение распакованного BCD кода цифр из упакованного
; 0000 0031         BCD_UNPACKED[0]=sot>>4, BCD_UNPACKED[1]=sot&0x0F, BCD_UNPACKED[2]=pause>>4,BCD_UNPACKED[3]=pause&0x0F;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0032         };
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0033 }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;
;// Timer 0 overflow interrupt service routine - индикация "----" в случае переполнения
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0037 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0038 // Place your code here
; 0000 0039 unsigned char i;
; 0000 003A PORTA=0xFF;             //Вывод на индикацию в порт A 0xFF в случае переполнения
;PCODE: $0000004D VOL: 0
;	i -> R17
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 003B for (i=0;i<4;i++)
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 003C     {
; 0000 003D     BCD_UNPACKED[i]=10; //код изображения "-" на 7SEG,
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 003E     };                  // в случае переполнения на 7SEG индицируется "----"
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 003F TCCR0=0x00;             //Останов TCNT0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0040 TCNT0=0;                //сброс TCNT0 для подгот. к след. измерению
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0041 MCUCR=0x02;             //след. прерывание INT0 - по срезу
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0042 }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;
;// Timer2 output compare interrupt service routine - смена индицируемых семисегментных знакомест при динамической индикации
;interrupt [TIM2_COMP] void timer2_comp_isr(void)
; 0000 0046 {
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0047 // Смена знакоместа при динамической индикации
; 0000 0048 PORTB=0xFF;                         //Кратковременное гашение текущего знакоместа (для модели PROTEUS)
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0049 PORTB=~(0b00001000>>n_znak);        //Включаем катод очередного знакоместа (низким уровнем)
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 004A PORTC=DIG_DEC[BCD_UNPACKED[n_znak]];//Код знака 7-сег. дисплея для очередного знакоместа
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 004B n_znak++;                           //переходим к след. десятичной цифре и след. знакоместу
;PCODE: $0000007E VOL: 0
; 0000 004C if (n_znak>3) n_znak=0;             //Если прошли все знакоместа, начинаем цикл дин. инд. сначала
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 004D }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;
;void main(void)
; 0000 0050 {
;PCODE: $00000087 VOL: 0
; 0000 0051 // Declare your local variables here
; 0000 0052 
; 0000 0053 // Input/Output Ports initialization
; 0000 0054 // Port A initialization
; 0000 0055 PORTA=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0056 DDRA=0xFF;                  //порт A - на вывод данных
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0057 PORTB=0xFF;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0058 DDRB=0x0F;                  //порт B (младшие 4 бита) - на вывод данных
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0059 PORTC=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 005A DDRC=0xFF;                  //порт C - на вывод данных
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 005B 
; 0000 005C // Timer/Counter 0 initialization
; 0000 005D // Clock source: System Clock
; 0000 005E // Clock value: Timer 0 Stopped
; 0000 005F // Mode: Normal top=0xFF
; 0000 0060 // OC0 output: Disconnected
; 0000 0061 TCCR0=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0062 TCNT0=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0063 OCR0=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0064 
; 0000 0065 // Timer/Counter 2 initialization
; 0000 0066 // Clock source: System Clock
; 0000 0067 // Clock value: 31,250 kHz
; 0000 0068 // Mode: CTC top=OCR2
; 0000 0069 // OC2 output: Disconnected
; 0000 006A ASSR=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 006B TCCR2=0x0E;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 006C TCNT2=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 006D OCR2=77;                   //При данном значении OCR2 интервал между прерываниями по совпадению
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 006E                            //в режиме CTC - (77+1)/31250=2.5 мс
; 0000 006F // External Interrupt(s) initialization
; 0000 0070 // INT0: On
; 0000 0071 // INT0 Mode: Falling Edge
; 0000 0072 // INT1: Off
; 0000 0073 // INT2: Off
; 0000 0074 GICR|=0x40;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0075 MCUCR=0x02;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0076 MCUCSR=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0077 GIFR=0x40;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0078 
; 0000 0079 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 007A TIMSK=0x81;                //разрешение прерываний: по переполнению TCNT0 и по совпадению TCNT2
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 007B 
; 0000 007C // Global enable interrupts
; 0000 007D #asm("sei")
;PCODE: $000000AD VOL: 0
	sei
;PCODE: $000000AE VOL: 0
; 0000 007E while (1);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 007F }
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
