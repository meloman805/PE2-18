
AVRASM ver. 2.1.30  D:\000_AMA-STUD\OMT_P2\Примеры на лекциях и практиках(В работе)\Примеры на лекциях и практиках\Лекции\04_T0-Pausemeter(LCD)\Debug\List\04.asm Mon Nov 20 00:26:20 2017

D:\000_AMA-STUD\OMT_P2\Примеры на лекциях и практиках(В работе)\Примеры на лекциях и практиках\Лекции\04_T0-Pausemeter(LCD)\Debug\List\04.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\000_AMA-STUD\OMT_P2\Примеры на лекциях и практиках(В работе)\Примеры на лекциях и практиках\Лекции\04_T0-Pausemeter(LCD)\Debug\List\04.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\000_AMA-STUD\OMT_P2\Примеры на лекциях и практиках(В работе)\Примеры на лекциях и практиках\Лекции\04_T0-Pausemeter(LCD)\Debug\List\04.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\000_AMA-STUD\OMT_P2\Примеры на лекциях и практиках(В работе)\Примеры на лекциях и практиках\Лекции\04_T0-Pausemeter(LCD)\Debug\List\04.asm(1091): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _pause=R5
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R7
                 	.DEF __lcd_maxx=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0058 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 009a 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0085 	JMP  _ext_int2_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 _0x0:
000034 654d
000035 7361
000036 7275
000037 6e69      	.DB  0x4D,0x65,0x61,0x73,0x75,0x72,0x69,0x6E
000038 2067
000039 6150
00003a 7375
00003b 2065      	.DB  0x67,0x20,0x50,0x61,0x75,0x73,0x65,0x20
00003c 6974
00003d 656d
00003e 5400
00003f 6170      	.DB  0x74,0x69,0x6D,0x65,0x0,0x54,0x70,0x61
000040 7375
000041 2065
000042 203e
000043 3532      	.DB  0x75,0x73,0x65,0x20,0x3E,0x20,0x32,0x35
000044 2035
000045 6b6d
000046 0073
000047 7054      	.DB  0x35,0x20,0x6D,0x6B,0x73,0x0,0x54,0x70
000048 7561
000049 6573
00004a 253d
00004b 7533      	.DB  0x61,0x75,0x73,0x65,0x3D,0x25,0x33,0x75
00004c 6d20
00004d 736b
00004e 2020
D:\000_AMA-STUD\OMT_P2\Примеры на лекциях и практиках(В работе)\Примеры на лекциях и практиках\Лекции\04_T0-Pausemeter(LCD)\Debug\List\04.asm(1139): warning: .cseg .db misalignment - padding zero byte
00004f 0000      	.DB  0x20,0x6D,0x6B,0x73,0x20,0x20,0x0
                 _0x2020003:
000050 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000051 0001      	.DW  0x01
000052 0002      	.DW  0x02
000053 0066      	.DW  __REG_BIT_VARS*2
                 
000054 0002      	.DW  0x02
000055 0182      	.DW  __base_y_G101
000056 00a0      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000057 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000058 94f8      	CLI
000059 27ee      	CLR  R30
00005a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005b e0f1      	LDI  R31,1
00005c bffb      	OUT  GICR,R31
00005d bfeb      	OUT  GICR,R30
00005e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00005f e08d      	LDI  R24,(14-2)+1
000060 e0a2      	LDI  R26,2
000061 27bb      	CLR  R27
                 __CLEAR_REG:
000062 93ed      	ST   X+,R30
000063 958a      	DEC  R24
000064 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000065 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000066 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000067 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000068 93ed      	ST   X+,R30
000069 9701      	SBIW R24,1
00006a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006b eae2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006d 9185      	LPM  R24,Z+
00006e 9195      	LPM  R25,Z+
00006f 9700      	SBIW R24,0
000070 f061      	BREQ __GLOBAL_INI_END
000071 91a5      	LPM  R26,Z+
000072 91b5      	LPM  R27,Z+
000073 9005      	LPM  R0,Z+
000074 9015      	LPM  R1,Z+
000075 01bf      	MOVW R22,R30
000076 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000077 9005      	LPM  R0,Z+
000078 920d      	ST   X+,R0
000079 9701      	SBIW R24,1
00007a f7e1      	BRNE __GLOBAL_INI_LOOP
00007b 01fb      	MOVW R30,R22
00007c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007e bfed      	OUT  SPL,R30
00007f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000080 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000081 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000082 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000083 940c 00a9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/**********************************************************************************
                 ;Chip type               : ATmega16
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Измеритель длительности паузы в микросекундах с выводом на ТЖКИ
                 ;Циклическая индикация измеренной паузы в мкс на ЖКИ организована в бесконечном
                 ;цикле фоновой программы.
                 ;Измерение длительности паузы организовано с помощью внешнего прерывания INT2
                 ;(по срезу - запускается подсчет импульсов с эталонной частотой 1МГц таймером TCNT0,
                 ;по фронту - счет останавливается и содержимое TCNTO запоминается в глобальной
                 ;переменной pause, значение которой фоновой программой выводится на ТЖКИ).
                 ;Здесь используется битовый признак переполнения overflow
                 ;***********************************************************************************/
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;unsigned char pause;            //длительность паузы в целом количестве микросекунд
                 ;bit overflow;                   //признак pause>255 мкс
                 ;char string_lcd1[17];           //текстовый буфер для 1-ой строки LCD включая нуль-терминатор
                 ;char string_lcd2[17];           //текстовый буфер для 2-ой строки LCD включая нуль-терминатор
                 ;
                 ;// External Interrupt 2 service routine
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 001B {
                 
                 	.CSEG
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
000085 93ea      	ST   -Y,R30
000086 b7ef      	IN   R30,SREG
000087 93ea      	ST   -Y,R30
                 ; 0000 001C // Place your code here
                 ; 0000 001D if (MCUCSR==0x00)
000088 b7e4      	IN   R30,0x34
000089 30e0      	CPI  R30,0
00008a f421      	BRNE _0x3
                 ; 0000 001E         {
                 ; 0000 001F         TCCR0=0x02;     //Запуск TCNT0 на счет от 0 в NORMAL c f=1МГЦ
00008b e0e2      	LDI  R30,LOW(2)
00008c bfe3      	OUT  0x33,R30
                 ; 0000 0020         MCUCSR=0x40;    //следующее прерывание INT2(конец паузы) - по фронту
00008d e4e0      	LDI  R30,LOW(64)
00008e c009      	RJMP _0xB
                 ; 0000 0021         }
                 ; 0000 0022 else
                 _0x3:
                 ; 0000 0023         {
                 ; 0000 0024         TCCR0=0x00;     //Останов TCNT0
00008f e0e0      	LDI  R30,LOW(0)
000090 bfe3      	OUT  0x33,R30
                 ; 0000 0025         PORTA=TCNT0;    //вывод TCNT0 в порт A
000091 b7e2      	IN   R30,0x32
000092 bbeb      	OUT  0x1B,R30
                 ; 0000 0026         pause=TCNT0;
000093 b652      	IN   R5,50
                 ; 0000 0027         overflow=0;     //сброс признака переполнения
000094 94e8      	CLT
000095 f820      	BLD  R2,0
                 ; 0000 0028         TCNT0=0;        //сброс TCNT0 для подгот. к след. измерению
000096 e0e0      	LDI  R30,LOW(0)
000097 bfe2      	OUT  0x32,R30
                 ; 0000 0029         MCUCSR=0x00;    //след. прерывание INT0 - по срезу
                 _0xB:
000098 bfe4      	OUT  0x34,R30
                 ; 0000 002A         };
                 ; 0000 002B }
000099 c00b      	RJMP _0xC
                 ; .FEND
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 002F {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
00009a 93ea      	ST   -Y,R30
00009b b7ef      	IN   R30,SREG
00009c 93ea      	ST   -Y,R30
                 ; 0000 0030 // Place your code here
                 ; 0000 0031 PORTA=0xFF;             //Вывод на индикацию 0xFF в случае переполнения
00009d efef      	LDI  R30,LOW(255)
00009e bbeb      	OUT  0x1B,R30
                 ; 0000 0032 overflow=1;             //установка признака переполнения pause > 255
00009f 9468      	SET
0000a0 f820      	BLD  R2,0
                 ; 0000 0033 TCCR0=0x00;             //Останов TCNT0
0000a1 e0e0      	LDI  R30,LOW(0)
0000a2 bfe3      	OUT  0x33,R30
                 ; 0000 0034 TCNT0=0;                //сброс TCNT0 для подгот. к след. измерению
0000a3 bfe2      	OUT  0x32,R30
                 ; 0000 0035 MCUCSR=0x00;            //след. прерывание INT0 - по срезу
0000a4 bfe4      	OUT  0x34,R30
                 ; 0000 0036 }
                 _0xC:
0000a5 91e9      	LD   R30,Y+
0000a6 bfef      	OUT  SREG,R30
0000a7 91e9      	LD   R30,Y+
0000a8 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0039 {
                 _main:
                 ; .FSTART _main
                 ; 0000 003A // Input/Output Ports initialization
                 ; 0000 003B PORTA=0x00;
0000a9 e0e0      	LDI  R30,LOW(0)
0000aa bbeb      	OUT  0x1B,R30
                 ; 0000 003C DDRA=0xFF;              //в порт А будет выводиться двоичный код
0000ab efef      	LDI  R30,LOW(255)
0000ac bbea      	OUT  0x1A,R30
                 ; 0000 003D 
                 ; 0000 003E // Timer/Counter 0 initialization
                 ; 0000 003F // Clock source: System Clock
                 ; 0000 0040 // Clock value: Timer 0 Stopped
                 ; 0000 0041 // Mode: Normal top=0xFF
                 ; 0000 0042 // OC0 output: Disconnected
                 ; 0000 0043 TCCR0=0x00;
0000ad e0e0      	LDI  R30,LOW(0)
0000ae bfe3      	OUT  0x33,R30
                 ; 0000 0044 TCNT0=0x00;
0000af bfe2      	OUT  0x32,R30
                 ; 0000 0045 OCR0=0x00;
0000b0 bfec      	OUT  0x3C,R30
                 ; 0000 0046 
                 ; 0000 0047 // External Interrupt(s) initialization
                 ; 0000 0048 // INT0: Off
                 ; 0000 0049 // INT1: Off
                 ; 0000 004A // INT2: On
                 ; 0000 004B // INT2 Mode: Falling Edge
                 ; 0000 004C GICR|=0x20;
0000b1 b7eb      	IN   R30,0x3B
0000b2 62e0      	ORI  R30,0x20
0000b3 bfeb      	OUT  0x3B,R30
                 ; 0000 004D MCUCR=0x00;
0000b4 e0e0      	LDI  R30,LOW(0)
0000b5 bfe5      	OUT  0x35,R30
                 ; 0000 004E MCUCSR=0x00;            //прерывание INT2 - по срезу
0000b6 bfe4      	OUT  0x34,R30
                 ; 0000 004F GIFR=0x20;
0000b7 e2e0      	LDI  R30,LOW(32)
0000b8 bfea      	OUT  0x3A,R30
                 ; 0000 0050 
                 ; 0000 0051 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0052 TIMSK=0x01;             //разрешение прерывания по переполнению TCNT0
0000b9 e0e1      	LDI  R30,LOW(1)
0000ba bfe9      	OUT  0x39,R30
                 ; 0000 0053 
                 ; 0000 0054 // Alphanumeric LCD initialization
                 ; 0000 0055 // Connections are specified in the
                 ; 0000 0056 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0057 // RS - PORTD Bit 2
                 ; 0000 0058 // RD - PORTD Bit 1
                 ; 0000 0059 // EN - PORTD Bit 3
                 ; 0000 005A // D4 - PORTD Bit 4
                 ; 0000 005B // D5 - PORTD Bit 5
                 ; 0000 005C // D6 - PORTD Bit 6
                 ; 0000 005D // D7 - PORTD Bit 7
                 ; 0000 005E // Characters/line: 16
                 ; 0000 005F lcd_init(16);
0000bb e1a0      	LDI  R26,LOW(16)
0000bc 940e 02fc 	CALL _lcd_init
                 ; 0000 0060 lcd_clear();
0000be 940e 02ca 	CALL _lcd_clear
                 ; 0000 0061 sprintf (string_lcd1,"Measuring Pause time");   //Формирование текстового буфера для 1-ой строки LCD
0000c0 e6e0      	LDI  R30,LOW(_string_lcd1)
0000c1 e0f1      	LDI  R31,HIGH(_string_lcd1)
0000c2 93fa      	ST   -Y,R31
0000c3 93ea      	ST   -Y,R30
                +
0000c4 e6e8     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000c5 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000c6 940e 0343 	CALL SUBOPT_0x0
                 ; 0000 0062 lcd_puts(string_lcd1);                          //Выводим на LCD 1-ю строку текста
0000c8 e6a0      	LDI  R26,LOW(_string_lcd1)
0000c9 e0b1      	LDI  R27,HIGH(_string_lcd1)
0000ca 940e 02eb 	CALL _lcd_puts
                 ; 0000 0063 // Global enable interrupts
                 ; 0000 0064 #asm("sei")
0000cc 9478      	sei
                 ; 0000 0065 
                 ; 0000 0066 while (1)               //цикл индикации на LCD переменной pause
                 _0x5:
                 ; 0000 0067       {
                 ; 0000 0068       // Place your code here
                 ; 0000 0069       if (overflow)
0000cd fe20      	SBRS R2,0
0000ce c009      	RJMP _0x8
                 ; 0000 006A             sprintf (string_lcd2,"Tpause > 255 mks");       //вывод диагностического сообщения
0000cf e7e1      	LDI  R30,LOW(_string_lcd2)
0000d0 e0f1      	LDI  R31,HIGH(_string_lcd2)
0000d1 93fa      	ST   -Y,R31
0000d2 93ea      	ST   -Y,R30
                +
0000d3 e7ed     +LDI R30 , LOW ( 2 * _0x0 + ( 21 ) )
0000d4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 21 ) )
                 	__POINTW1FN _0x0,21
0000d5 940e 0343 	CALL SUBOPT_0x0
                 ; 0000 006B       else
0000d7 c012      	RJMP _0x9
                 _0x8:
                 ; 0000 006C             sprintf (string_lcd2,"Tpause=%3u mks  ",pause);  //Формирование текстового буфера для 2-ой строки LCD
0000d8 e7e1      	LDI  R30,LOW(_string_lcd2)
0000d9 e0f1      	LDI  R31,HIGH(_string_lcd2)
0000da 93fa      	ST   -Y,R31
0000db 93ea      	ST   -Y,R30
                +
0000dc e8ee     +LDI R30 , LOW ( 2 * _0x0 + ( 38 ) )
0000dd e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 38 ) )
                 	__POINTW1FN _0x0,38
0000de 93fa      	ST   -Y,R31
0000df 93ea      	ST   -Y,R30
0000e0 2de5      	MOV  R30,R5
0000e1 27ff      	CLR  R31
0000e2 2766      	CLR  R22
0000e3 2777      	CLR  R23
0000e4 940e 039e 	CALL __PUTPARD1
0000e6 e084      	LDI  R24,4
0000e7 940e 0269 	CALL _sprintf
0000e9 9628      	ADIW R28,8
                 ; 0000 006D       lcd_gotoxy (0, 1);                        //переход на 1-ое знакоместо 2-ой строки
                 _0x9:
0000ea e0e0      	LDI  R30,LOW(0)
0000eb 93ea      	ST   -Y,R30
0000ec e0a1      	LDI  R26,LOW(1)
0000ed 940e 02bd 	CALL _lcd_gotoxy
                 ; 0000 006E       lcd_puts(string_lcd2);                    //вывод измеренной паузы на LCD
0000ef e7a1      	LDI  R26,LOW(_string_lcd2)
0000f0 e0b1      	LDI  R27,HIGH(_string_lcd2)
0000f1 940e 02eb 	CALL _lcd_puts
                 ; 0000 006F       }                                         //и повторяем все заново
0000f3 cfd9      	RJMP _0x5
                 ; 0000 0070 }
                 _0xA:
0000f4 cfff      	RJMP _0xA
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0000f5 93ba      	ST   -Y,R27
0000f6 93aa      	ST   -Y,R26
0000f7 931a      	ST   -Y,R17
0000f8 930a      	ST   -Y,R16
0000f9 81aa      	LDD  R26,Y+2
0000fa 81bb      	LDD  R27,Y+2+1
0000fb 9612      	ADIW R26,2
0000fc 940e 0396 	CALL __GETW1P
0000fe 9730      	SBIW R30,0
0000ff f159      	BREQ _0x2000010
000100 81aa      	LDD  R26,Y+2
000101 81bb      	LDD  R27,Y+2+1
000102 9614      	ADIW R26,4
000103 940e 0396 	CALL __GETW1P
000105 018f      	MOVW R16,R30
000106 9730      	SBIW R30,0
000107 f061      	BREQ _0x2000012
                +
000108 3002     +CPI R16 , LOW ( 2 )
000109 e0e0     +LDI R30 , HIGH ( 2 )
00010a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00010b f098      	BRLO _0x2000013
00010c 01f8      	MOVW R30,R16
00010d 9731      	SBIW R30,1
00010e 018f      	MOVW R16,R30
                +
00010f 81aa     +LDD R26 , Y + 2
000110 81bb     +LDD R27 , Y + 2 + 1
000111 9614     +ADIW R26 , 4
000112 93ed     +ST X + , R30
000113 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000114 81aa      	LDD  R26,Y+2
000115 81bb      	LDD  R27,Y+2+1
000116 9612      	ADIW R26,2
000117 91ed      	LD   R30,X+
000118 91fd      	LD   R31,X+
000119 9631      	ADIW R30,1
00011a 93fe      	ST   -X,R31
00011b 93ee      	ST   -X,R30
00011c 9731      	SBIW R30,1
00011d 81ac      	LDD  R26,Y+4
00011e 83a0      	STD  Z+0,R26
                 _0x2000013:
00011f 81aa      	LDD  R26,Y+2
000120 81bb      	LDD  R27,Y+2+1
000121 940e 0396 	CALL __GETW1P
000123 23ff      	TST  R31
000124 f02a      	BRMI _0x2000014
000125 91ed      	LD   R30,X+
000126 91fd      	LD   R31,X+
000127 9631      	ADIW R30,1
000128 93fe      	ST   -X,R31
000129 93ee      	ST   -X,R30
                 _0x2000014:
00012a c006      	RJMP _0x2000015
                 _0x2000010:
00012b 81aa      	LDD  R26,Y+2
00012c 81bb      	LDD  R27,Y+2+1
00012d efef      	LDI  R30,LOW(65535)
00012e efff      	LDI  R31,HIGH(65535)
00012f 93ed      	ST   X+,R30
000130 93fc      	ST   X,R31
                 _0x2000015:
000131 8119      	LDD  R17,Y+1
000132 8108      	LDD  R16,Y+0
000133 9625      	ADIW R28,5
000134 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000135 93ba      	ST   -Y,R27
000136 93aa      	ST   -Y,R26
000137 9726      	SBIW R28,6
000138 940e 03a3 	CALL __SAVELOCR6
00013a e010      	LDI  R17,0
00013b 85ac      	LDD  R26,Y+12
00013c 85bd      	LDD  R27,Y+12+1
00013d e0e0      	LDI  R30,LOW(0)
00013e e0f0      	LDI  R31,HIGH(0)
00013f 93ed      	ST   X+,R30
000140 93fc      	ST   X,R31
                 _0x2000016:
000141 89ea      	LDD  R30,Y+18
000142 89fb      	LDD  R31,Y+18+1
000143 9631      	ADIW R30,1
000144 8bea      	STD  Y+18,R30
000145 8bfb      	STD  Y+18+1,R31
000146 9731      	SBIW R30,1
000147 91e4      	LPM  R30,Z
000148 2f2e      	MOV  R18,R30
000149 30e0      	CPI  R30,0
00014a f409      	BRNE PC+2
00014b c115      	RJMP _0x2000018
00014c 2fe1      	MOV  R30,R17
00014d 30e0      	CPI  R30,0
00014e f439      	BRNE _0x200001C
00014f 3225      	CPI  R18,37
000150 f411      	BRNE _0x200001D
000151 e011      	LDI  R17,LOW(1)
000152 c002      	RJMP _0x200001E
                 _0x200001D:
000153 940e 034a 	CALL SUBOPT_0x1
                 _0x200001E:
000155 c10a      	RJMP _0x200001B
                 _0x200001C:
000156 30e1      	CPI  R30,LOW(0x1)
000157 f4a9      	BRNE _0x200001F
000158 3225      	CPI  R18,37
000159 f419      	BRNE _0x2000020
00015a 940e 034a 	CALL SUBOPT_0x1
00015c c102      	RJMP _0x20000CC
                 _0x2000020:
00015d e012      	LDI  R17,LOW(2)
00015e e040      	LDI  R20,LOW(0)
00015f e000      	LDI  R16,LOW(0)
000160 322d      	CPI  R18,45
000161 f411      	BRNE _0x2000021
000162 e001      	LDI  R16,LOW(1)
000163 c0fc      	RJMP _0x200001B
                 _0x2000021:
000164 322b      	CPI  R18,43
000165 f411      	BRNE _0x2000022
000166 e24b      	LDI  R20,LOW(43)
000167 c0f8      	RJMP _0x200001B
                 _0x2000022:
000168 3220      	CPI  R18,32
000169 f411      	BRNE _0x2000023
00016a e240      	LDI  R20,LOW(32)
00016b c0f4      	RJMP _0x200001B
                 _0x2000023:
00016c c002      	RJMP _0x2000024
                 _0x200001F:
00016d 30e2      	CPI  R30,LOW(0x2)
00016e f439      	BRNE _0x2000025
                 _0x2000024:
00016f e050      	LDI  R21,LOW(0)
000170 e013      	LDI  R17,LOW(3)
000171 3320      	CPI  R18,48
000172 f411      	BRNE _0x2000026
000173 6800      	ORI  R16,LOW(128)
000174 c0eb      	RJMP _0x200001B
                 _0x2000026:
000175 c003      	RJMP _0x2000027
                 _0x2000025:
000176 30e3      	CPI  R30,LOW(0x3)
000177 f009      	BREQ PC+2
000178 c0e7      	RJMP _0x200001B
                 _0x2000027:
000179 3320      	CPI  R18,48
00017a f010      	BRLO _0x200002A
00017b 332a      	CPI  R18,58
00017c f008      	BRLO _0x200002B
                 _0x200002A:
00017d c007      	RJMP _0x2000029
                 _0x200002B:
00017e e0aa      	LDI  R26,LOW(10)
00017f 9f5a      	MUL  R21,R26
000180 2d50      	MOV  R21,R0
000181 2fe2      	MOV  R30,R18
000182 53e0      	SUBI R30,LOW(48)
000183 0f5e      	ADD  R21,R30
000184 c0db      	RJMP _0x200001B
                 _0x2000029:
000185 2fe2      	MOV  R30,R18
000186 36e3      	CPI  R30,LOW(0x63)
000187 f449      	BRNE _0x200002F
000188 940e 0351 	CALL SUBOPT_0x2
00018a 89e8      	LDD  R30,Y+16
00018b 89f9      	LDD  R31,Y+16+1
00018c 81a4      	LDD  R26,Z+4
00018d 93aa      	ST   -Y,R26
00018e 940e 0357 	CALL SUBOPT_0x3
000190 c0ce      	RJMP _0x2000030
                 _0x200002F:
000191 37e3      	CPI  R30,LOW(0x73)
000192 f441      	BRNE _0x2000032
000193 940e 0351 	CALL SUBOPT_0x2
000195 940e 035d 	CALL SUBOPT_0x4
000197 940e 032a 	CALL _strlen
000199 2f1e      	MOV  R17,R30
00019a c00a      	RJMP _0x2000033
                 _0x2000032:
00019b 37e0      	CPI  R30,LOW(0x70)
00019c f461      	BRNE _0x2000035
00019d 940e 0351 	CALL SUBOPT_0x2
00019f 940e 035d 	CALL SUBOPT_0x4
0001a1 940e 0336 	CALL _strlenf
0001a3 2f1e      	MOV  R17,R30
0001a4 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0001a5 6002      	ORI  R16,LOW(2)
0001a6 770f      	ANDI R16,LOW(127)
0001a7 e030      	LDI  R19,LOW(0)
0001a8 c034      	RJMP _0x2000036
                 _0x2000035:
0001a9 36e4      	CPI  R30,LOW(0x64)
0001aa f011      	BREQ _0x2000039
0001ab 36e9      	CPI  R30,LOW(0x69)
0001ac f411      	BRNE _0x200003A
                 _0x2000039:
0001ad 6004      	ORI  R16,LOW(4)
0001ae c002      	RJMP _0x200003B
                 _0x200003A:
0001af 37e5      	CPI  R30,LOW(0x75)
0001b0 f431      	BRNE _0x200003C
                 _0x200003B:
0001b1 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0001b2 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001b3 83ee      	STD  Y+6,R30
0001b4 83ff      	STD  Y+6+1,R31
0001b5 e015      	LDI  R17,LOW(5)
0001b6 c00c      	RJMP _0x200003D
                 _0x200003C:
0001b7 35e8      	CPI  R30,LOW(0x58)
0001b8 f411      	BRNE _0x200003F
0001b9 6008      	ORI  R16,LOW(8)
0001ba c003      	RJMP _0x2000040
                 _0x200003F:
0001bb 37e8      	CPI  R30,LOW(0x78)
0001bc f009      	BREQ PC+2
0001bd c0a1      	RJMP _0x2000071
                 _0x2000040:
0001be e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0001bf e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001c0 83ee      	STD  Y+6,R30
0001c1 83ff      	STD  Y+6+1,R31
0001c2 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001c3 ff02      	SBRS R16,2
0001c4 c014      	RJMP _0x2000042
0001c5 940e 0351 	CALL SUBOPT_0x2
0001c7 940e 0367 	CALL SUBOPT_0x5
0001c9 85ab      	LDD  R26,Y+11
0001ca 23aa      	TST  R26
0001cb f43a      	BRPL _0x2000043
0001cc 85ea      	LDD  R30,Y+10
0001cd 85fb      	LDD  R31,Y+10+1
0001ce 940e 0392 	CALL __ANEGW1
0001d0 87ea      	STD  Y+10,R30
0001d1 87fb      	STD  Y+10+1,R31
0001d2 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001d3 3040      	CPI  R20,0
0001d4 f011      	BREQ _0x2000044
0001d5 5f1f      	SUBI R17,-LOW(1)
0001d6 c001      	RJMP _0x2000045
                 _0x2000044:
0001d7 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001d8 c004      	RJMP _0x2000046
                 _0x2000042:
0001d9 940e 0351 	CALL SUBOPT_0x2
0001db 940e 0367 	CALL SUBOPT_0x5
                 _0x2000046:
                 _0x2000036:
0001dd fd00      	SBRC R16,0
0001de c011      	RJMP _0x2000047
                 _0x2000048:
0001df 1715      	CP   R17,R21
0001e0 f478      	BRSH _0x200004A
0001e1 ff07      	SBRS R16,7
0001e2 c008      	RJMP _0x200004B
0001e3 ff02      	SBRS R16,2
0001e4 c004      	RJMP _0x200004C
0001e5 7f0b      	ANDI R16,LOW(251)
0001e6 2f24      	MOV  R18,R20
0001e7 5011      	SUBI R17,LOW(1)
0001e8 c001      	RJMP _0x200004D
                 _0x200004C:
0001e9 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001ea c001      	RJMP _0x200004E
                 _0x200004B:
0001eb e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001ec 940e 034a 	CALL SUBOPT_0x1
0001ee 5051      	SUBI R21,LOW(1)
0001ef cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001f0 2f31      	MOV  R19,R17
0001f1 ff01      	SBRS R16,1
0001f2 c017      	RJMP _0x200004F
                 _0x2000050:
0001f3 3030      	CPI  R19,0
0001f4 f0a1      	BREQ _0x2000052
0001f5 ff03      	SBRS R16,3
0001f6 c006      	RJMP _0x2000053
0001f7 81ee      	LDD  R30,Y+6
0001f8 81ff      	LDD  R31,Y+6+1
0001f9 9125      	LPM  R18,Z+
0001fa 83ee      	STD  Y+6,R30
0001fb 83ff      	STD  Y+6+1,R31
0001fc c005      	RJMP _0x2000054
                 _0x2000053:
0001fd 81ae      	LDD  R26,Y+6
0001fe 81bf      	LDD  R27,Y+6+1
0001ff 912d      	LD   R18,X+
000200 83ae      	STD  Y+6,R26
000201 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000202 940e 034a 	CALL SUBOPT_0x1
000204 3050      	CPI  R21,0
000205 f009      	BREQ _0x2000055
000206 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000207 5031      	SUBI R19,LOW(1)
000208 cfea      	RJMP _0x2000050
                 _0x2000052:
000209 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00020a e320      	LDI  R18,LOW(48)
00020b 81ee      	LDD  R30,Y+6
00020c 81ff      	LDD  R31,Y+6+1
00020d 940e 039a 	CALL __GETW1PF
00020f 87e8      	STD  Y+8,R30
000210 87f9      	STD  Y+8+1,R31
000211 81ee      	LDD  R30,Y+6
000212 81ff      	LDD  R31,Y+6+1
000213 9632      	ADIW R30,2
000214 83ee      	STD  Y+6,R30
000215 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000216 85e8      	LDD  R30,Y+8
000217 85f9      	LDD  R31,Y+8+1
000218 85aa      	LDD  R26,Y+10
000219 85bb      	LDD  R27,Y+10+1
00021a 17ae      	CP   R26,R30
00021b 07bf      	CPC  R27,R31
00021c f050      	BRLO _0x200005C
00021d 5f2f      	SUBI R18,-LOW(1)
00021e 85a8      	LDD  R26,Y+8
00021f 85b9      	LDD  R27,Y+8+1
000220 85ea      	LDD  R30,Y+10
000221 85fb      	LDD  R31,Y+10+1
000222 1bea      	SUB  R30,R26
000223 0bfb      	SBC  R31,R27
000224 87ea      	STD  Y+10,R30
000225 87fb      	STD  Y+10+1,R31
000226 cfef      	RJMP _0x200005A
                 _0x200005C:
000227 332a      	CPI  R18,58
000228 f028      	BRLO _0x200005D
000229 ff03      	SBRS R16,3
00022a c002      	RJMP _0x200005E
00022b 5f29      	SUBI R18,-LOW(7)
00022c c001      	RJMP _0x200005F
                 _0x200005E:
00022d 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00022e fd04      	SBRC R16,4
00022f c01a      	RJMP _0x2000061
000230 3321      	CPI  R18,49
000231 f420      	BRSH _0x2000063
000232 85a8      	LDD  R26,Y+8
000233 85b9      	LDD  R27,Y+8+1
000234 9711      	SBIW R26,1
000235 f409      	BRNE _0x2000062
                 _0x2000063:
000236 c009      	RJMP _0x20000CD
                 _0x2000062:
000237 1753      	CP   R21,R19
000238 f010      	BRLO _0x2000067
000239 ff00      	SBRS R16,0
00023a c001      	RJMP _0x2000068
                 _0x2000067:
00023b c013      	RJMP _0x2000066
                 _0x2000068:
00023c e220      	LDI  R18,LOW(32)
00023d ff07      	SBRS R16,7
00023e c00b      	RJMP _0x2000069
00023f e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000240 6100      	ORI  R16,LOW(16)
000241 ff02      	SBRS R16,2
000242 c007      	RJMP _0x200006A
000243 7f0b      	ANDI R16,LOW(251)
000244 934a      	ST   -Y,R20
000245 940e 0357 	CALL SUBOPT_0x3
000247 3050      	CPI  R21,0
000248 f009      	BREQ _0x200006B
000249 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00024a 940e 034a 	CALL SUBOPT_0x1
00024c 3050      	CPI  R21,0
00024d f009      	BREQ _0x200006C
00024e 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00024f 5031      	SUBI R19,LOW(1)
000250 85a8      	LDD  R26,Y+8
000251 85b9      	LDD  R27,Y+8+1
000252 9712      	SBIW R26,2
000253 f008      	BRLO _0x2000059
000254 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000255 ff00      	SBRS R16,0
000256 c008      	RJMP _0x200006D
                 _0x200006E:
000257 3050      	CPI  R21,0
000258 f031      	BREQ _0x2000070
000259 5051      	SUBI R21,LOW(1)
00025a e2e0      	LDI  R30,LOW(32)
00025b 93ea      	ST   -Y,R30
00025c 940e 0357 	CALL SUBOPT_0x3
00025e cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00025f e010      	LDI  R17,LOW(0)
                 _0x200001B:
000260 cee0      	RJMP _0x2000016
                 _0x2000018:
000261 85ac      	LDD  R26,Y+12
000262 85bd      	LDD  R27,Y+12+1
000263 940e 0396 	CALL __GETW1P
000265 940e 03aa 	CALL __LOADLOCR6
000267 9664      	ADIW R28,20
000268 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000269 92ff      	PUSH R15
00026a 2ef8      	MOV  R15,R24
00026b 9726      	SBIW R28,6
00026c 940e 03a5 	CALL __SAVELOCR4
00026e 940e 036f 	CALL SUBOPT_0x6
000270 9730      	SBIW R30,0
000271 f419      	BRNE _0x2000072
000272 efef      	LDI  R30,LOW(65535)
000273 efff      	LDI  R31,HIGH(65535)
000274 c023      	RJMP _0x2080002
                 _0x2000072:
000275 01de      	MOVW R26,R28
000276 9616      	ADIW R26,6
000277 940e 038e 	CALL __ADDW2R15
000279 018d      	MOVW R16,R26
00027a 940e 036f 	CALL SUBOPT_0x6
00027c 83ee      	STD  Y+6,R30
00027d 83ff      	STD  Y+6+1,R31
00027e e0e0      	LDI  R30,LOW(0)
00027f 87e8      	STD  Y+8,R30
000280 87e9      	STD  Y+8+1,R30
000281 01de      	MOVW R26,R28
000282 961a      	ADIW R26,10
000283 940e 038e 	CALL __ADDW2R15
000285 940e 0396 	CALL __GETW1P
000287 93fa      	ST   -Y,R31
000288 93ea      	ST   -Y,R30
000289 931a      	ST   -Y,R17
00028a 930a      	ST   -Y,R16
00028b efe5      	LDI  R30,LOW(_put_buff_G100)
00028c e0f0      	LDI  R31,HIGH(_put_buff_G100)
00028d 93fa      	ST   -Y,R31
00028e 93ea      	ST   -Y,R30
00028f 01de      	MOVW R26,R28
000290 961a      	ADIW R26,10
000291 dea3      	RCALL __print_G100
000292 019f      	MOVW R18,R30
000293 81ae      	LDD  R26,Y+6
000294 81bf      	LDD  R27,Y+6+1
000295 e0e0      	LDI  R30,LOW(0)
000296 93ec      	ST   X,R30
000297 01f9      	MOVW R30,R18
                 _0x2080002:
000298 940e 03ac 	CALL __LOADLOCR4
00029a 962a      	ADIW R28,10
00029b 90ff      	POP  R15
00029c 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
00029d 93aa      	ST   -Y,R26
00029e b3e2      	IN   R30,0x12
00029f 70ef      	ANDI R30,LOW(0xF)
0002a0 2fae      	MOV  R26,R30
0002a1 81e8      	LD   R30,Y
0002a2 7fe0      	ANDI R30,LOW(0xF0)
0002a3 2bea      	OR   R30,R26
0002a4 bbe2      	OUT  0x12,R30
                +
0002a5 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002a6 958a     +DEC R24
0002a7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002a8 9a93      	SBI  0x12,3
                +
0002a9 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002aa 958a     +DEC R24
0002ab f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002ac 9893      	CBI  0x12,3
                +
0002ad e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002ae 958a     +DEC R24
0002af f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002b0 c077      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002b1 93aa      	ST   -Y,R26
0002b2 81a8      	LD   R26,Y
0002b3 dfe9      	RCALL __lcd_write_nibble_G101
0002b4 81e8          ld    r30,y
0002b5 95e2          swap  r30
0002b6 83e8          st    y,r30
0002b7 81a8      	LD   R26,Y
0002b8 dfe4      	RCALL __lcd_write_nibble_G101
                +
0002b9 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002ba 958a     +DEC R24
0002bb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002bc c06b      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002bd 93aa      	ST   -Y,R26
0002be 81e8      	LD   R30,Y
0002bf e0f0      	LDI  R31,0
0002c0 57ee      	SUBI R30,LOW(-__base_y_G101)
0002c1 4ffe      	SBCI R31,HIGH(-__base_y_G101)
0002c2 81e0      	LD   R30,Z
0002c3 81a9      	LDD  R26,Y+1
0002c4 0fae      	ADD  R26,R30
0002c5 dfeb      	RCALL __lcd_write_data
0002c6 8049      	LDD  R4,Y+1
0002c7 8078      	LDD  R7,Y+0
0002c8 9622      	ADIW R28,2
0002c9 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002ca e0a2      	LDI  R26,LOW(2)
0002cb 940e 0376 	CALL SUBOPT_0x7
0002cd e0ac      	LDI  R26,LOW(12)
0002ce dfe2      	RCALL __lcd_write_data
0002cf e0a1      	LDI  R26,LOW(1)
0002d0 940e 0376 	CALL SUBOPT_0x7
0002d2 e0e0      	LDI  R30,LOW(0)
0002d3 2e7e      	MOV  R7,R30
0002d4 2e4e      	MOV  R4,R30
0002d5 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002d6 93aa      	ST   -Y,R26
0002d7 81a8      	LD   R26,Y
0002d8 30aa      	CPI  R26,LOW(0xA)
0002d9 f011      	BREQ _0x2020005
0002da 1446      	CP   R4,R6
0002db f048      	BRLO _0x2020004
                 _0x2020005:
0002dc e0e0      	LDI  R30,LOW(0)
0002dd 93ea      	ST   -Y,R30
0002de 9473      	INC  R7
0002df 2da7      	MOV  R26,R7
0002e0 dfdc      	RCALL _lcd_gotoxy
0002e1 81a8      	LD   R26,Y
0002e2 30aa      	CPI  R26,LOW(0xA)
0002e3 f409      	BRNE _0x2020007
0002e4 c043      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
0002e5 9443      	INC  R4
0002e6 9a92      	SBI  0x12,2
0002e7 81a8      	LD   R26,Y
0002e8 dfc8      	RCALL __lcd_write_data
0002e9 9892      	CBI  0x12,2
0002ea c03d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002eb 93ba      	ST   -Y,R27
0002ec 93aa      	ST   -Y,R26
0002ed 931a      	ST   -Y,R17
                 _0x2020008:
0002ee 81a9      	LDD  R26,Y+1
0002ef 81ba      	LDD  R27,Y+1+1
0002f0 91ed      	LD   R30,X+
0002f1 83a9      	STD  Y+1,R26
0002f2 83ba      	STD  Y+1+1,R27
0002f3 2f1e      	MOV  R17,R30
0002f4 30e0      	CPI  R30,0
0002f5 f019      	BREQ _0x202000A
0002f6 2fa1      	MOV  R26,R17
0002f7 dfde      	RCALL _lcd_putchar
0002f8 cff5      	RJMP _0x2020008
                 _0x202000A:
0002f9 8118      	LDD  R17,Y+0
0002fa 9623      	ADIW R28,3
0002fb 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002fc 93aa      	ST   -Y,R26
0002fd b3e1      	IN   R30,0x11
0002fe 6fe0      	ORI  R30,LOW(0xF0)
0002ff bbe1      	OUT  0x11,R30
000300 9a8b      	SBI  0x11,3
000301 9a8a      	SBI  0x11,2
000302 9a89      	SBI  0x11,1
000303 9893      	CBI  0x12,3
000304 9892      	CBI  0x12,2
000305 9891      	CBI  0x12,1
000306 8068      	LDD  R6,Y+0
000307 81e8      	LD   R30,Y
000308 58e0      	SUBI R30,-LOW(128)
                +
000309 93e0 0184+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
00030b 81e8      	LD   R30,Y
00030c 54e0      	SUBI R30,-LOW(192)
                +
00030d 93e0 0185+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00030f e1a4      	LDI  R26,LOW(20)
000310 e0b0      	LDI  R27,0
000311 940e 0384 	CALL _delay_ms
000313 940e 037c 	CALL SUBOPT_0x8
000315 940e 037c 	CALL SUBOPT_0x8
000317 940e 037c 	CALL SUBOPT_0x8
000319 e2a0      	LDI  R26,LOW(32)
00031a df82      	RCALL __lcd_write_nibble_G101
                +
00031b ec88     +LDI R24 , LOW ( 200 )
00031c e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00031d 9701     +SBIW R24 , 1
00031e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00031f e2a8      	LDI  R26,LOW(40)
000320 df90      	RCALL __lcd_write_data
000321 e0a4      	LDI  R26,LOW(4)
000322 df8e      	RCALL __lcd_write_data
000323 e8a5      	LDI  R26,LOW(133)
000324 df8c      	RCALL __lcd_write_data
000325 e0a6      	LDI  R26,LOW(6)
000326 df8a      	RCALL __lcd_write_data
000327 dfa2      	RCALL _lcd_clear
                 _0x2080001:
000328 9621      	ADIW R28,1
000329 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00032a 93ba      	ST   -Y,R27
00032b 93aa      	ST   -Y,R26
00032c 91a9          ld   r26,y+
00032d 91b9          ld   r27,y+
00032e 27ee          clr  r30
00032f 27ff          clr  r31
                 strlen0:
000330 916d          ld   r22,x+
000331 2366          tst  r22
000332 f011          breq strlen1
000333 9631          adiw r30,1
000334 cffb          rjmp strlen0
                 strlen1:
000335 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000336 93ba      	ST   -Y,R27
000337 93aa      	ST   -Y,R26
000338 27aa          clr  r26
000339 27bb          clr  r27
00033a 91e9          ld   r30,y+
00033b 91f9          ld   r31,y+
                 strlenf0:
00033c 9005      	lpm  r0,z+
00033d 2000          tst  r0
00033e f011          breq strlenf1
00033f 9611          adiw r26,1
000340 cffb          rjmp strlenf0
                 strlenf1:
000341 01fd          movw r30,r26
000342 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _string_lcd1:
000160           	.BYTE 0x11
                 _string_lcd2:
000171           	.BYTE 0x11
                 __base_y_G101:
000182           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000343 93fa      	ST   -Y,R31
000344 93ea      	ST   -Y,R30
000345 e080      	LDI  R24,0
000346 940e 0269 	CALL _sprintf
000348 9624      	ADIW R28,4
000349 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
00034a 932a      	ST   -Y,R18
00034b 85ad      	LDD  R26,Y+13
00034c 85be      	LDD  R27,Y+13+1
00034d 85ef      	LDD  R30,Y+15
00034e 89f8      	LDD  R31,Y+15+1
00034f 9509      	ICALL
000350 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
000351 89e8      	LDD  R30,Y+16
000352 89f9      	LDD  R31,Y+16+1
000353 9734      	SBIW R30,4
000354 8be8      	STD  Y+16,R30
000355 8bf9      	STD  Y+16+1,R31
000356 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000357 85ad      	LDD  R26,Y+13
000358 85be      	LDD  R27,Y+13+1
000359 85ef      	LDD  R30,Y+15
00035a 89f8      	LDD  R31,Y+15+1
00035b 9509      	ICALL
00035c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
00035d 89a8      	LDD  R26,Y+16
00035e 89b9      	LDD  R27,Y+16+1
00035f 9614      	ADIW R26,4
000360 940e 0396 	CALL __GETW1P
000362 83ee      	STD  Y+6,R30
000363 83ff      	STD  Y+6+1,R31
000364 81ae      	LDD  R26,Y+6
000365 81bf      	LDD  R27,Y+6+1
000366 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000367 89a8      	LDD  R26,Y+16
000368 89b9      	LDD  R27,Y+16+1
000369 9614      	ADIW R26,4
00036a 940e 0396 	CALL __GETW1P
00036c 87ea      	STD  Y+10,R30
00036d 87fb      	STD  Y+10+1,R31
00036e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00036f 01de      	MOVW R26,R28
000370 961c      	ADIW R26,12
000371 940e 038e 	CALL __ADDW2R15
000373 940e 0396 	CALL __GETW1P
000375 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000376 940e 02b1 	CALL __lcd_write_data
000378 e0a3      	LDI  R26,LOW(3)
000379 e0b0      	LDI  R27,0
00037a 940c 0384 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
00037c e3a0      	LDI  R26,LOW(48)
00037d 940e 029d 	CALL __lcd_write_nibble_G101
                +
00037f ec88     +LDI R24 , LOW ( 200 )
000380 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000381 9701     +SBIW R24 , 1
000382 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000383 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000384 9610      	adiw r26,0
000385 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000386 ed80     +LDI R24 , LOW ( 0x7D0 )
000387 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000388 9701     +SBIW R24 , 1
000389 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00038a 95a8      	wdr
00038b 9711      	sbiw r26,1
00038c f7c9      	brne __delay_ms0
                 __delay_ms1:
00038d 9508      	ret
                 
                 __ADDW2R15:
00038e 2400      	CLR  R0
00038f 0daf      	ADD  R26,R15
000390 1db0      	ADC  R27,R0
000391 9508      	RET
                 
                 __ANEGW1:
000392 95f1      	NEG  R31
000393 95e1      	NEG  R30
000394 40f0      	SBCI R31,0
000395 9508      	RET
                 
                 __GETW1P:
000396 91ed      	LD   R30,X+
000397 91fc      	LD   R31,X
000398 9711      	SBIW R26,1
000399 9508      	RET
                 
                 __GETW1PF:
00039a 9005      	LPM  R0,Z+
00039b 91f4      	LPM  R31,Z
00039c 2de0      	MOV  R30,R0
00039d 9508      	RET
                 
                 __PUTPARD1:
00039e 937a      	ST   -Y,R23
00039f 936a      	ST   -Y,R22
0003a0 93fa      	ST   -Y,R31
0003a1 93ea      	ST   -Y,R30
0003a2 9508      	RET
                 
                 __SAVELOCR6:
0003a3 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003a4 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003a5 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003a6 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003a7 931a      	ST   -Y,R17
0003a8 930a      	ST   -Y,R16
0003a9 9508      	RET
                 
                 __LOADLOCR6:
0003aa 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003ab 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003ac 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003ad 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003ae 8119      	LDD  R17,Y+1
0003af 8108      	LD   R16,Y
0003b0 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   1 r2 :   3 r3 :   0 r4 :   4 r5 :   2 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:   6 r23:   2 
r24:  24 r25:   5 r26:  98 r27:  38 r28:  15 r29:   1 r30: 199 r31:  65 
x  :  23 y  : 178 z  :  15 
Registers used: 27 out of 35 (77.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  25 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  31 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  56 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   2 cpi   :  34 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   8 inc   :   2 jmp   :  23 ld    :  27 ldd   :  77 ldi   : 108 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  18 movw  :  14 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   8 out   :  28 pop   :   1 push  :   1 rcall :  14 ret   :  25 
reti  :   1 rjmp  :  63 rol   :   0 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  19 sbr   :   0 sbrc  :   2 
sbrs  :  11 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  69 std   :  31 sts   :   2 sub   :   1 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 57 out of 116 (49.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000762   1798     92   1890   16384  11.5%
[.dseg] 0x000060 0x000186      0     38     38    1024   3.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
