;/*Программа вырисовывания символа на матрице светодиодов. Здесь для организации
;временной задержки используется прерывание по совпадению А таймера TC1, работающего
;в режиме СТС. Переход к новой точке изображения и подсветка светодиодов происходят
;в обработчике этого прерывания*/
;/*****************************************************
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Declare your global variables here
;char A[13] = {0x04,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x40,0x00,0x00,0x00};

	.DSEG
;char B[13] = {0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x80,0x00,0x00};
;char C[13] = {0x00,0x00,0x00,0x01,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x80,0x00};
;char D[13] = {0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x40};
;char i=0;
;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0019 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001A // Place your code here
; 0000 001B i++;                //переводим указатель на следующий элемент всех 4-х массивов
;PCODE: $0000000F VOL: 0
; 0000 001C                     //Счетчик TC1 обнулять не надо, поскольку он сбросится сам (режим CTC)
; 0000 001D if (i==13)	        //Если весь символ прорисовали,
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001E     {
; 0000 001F     PORTA=0x00;     //гасим все светодиоды
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0020     PORTB=0x00;		//и через заданную задержку (0,25 сек)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0021     PORTC=0x00; 	//начинаем все заново
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0022     PORTD=0x00;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0023     i=-1;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0024     }
; 0000 0025 else                //если не весь символ прорисован,
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0026     {               //продолжение подсветки светодиодов
; 0000 0027     PORTA|=A[i];	//С операцией ИЛИ | - происходит вырисовывание знака,
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0028     PORTB|=B[i];	//т.е. остаются включенными ранее зажженные светодиоды
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0029     PORTC|=C[i];	//Без операции ИЛИ (простое присваивание портам
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 002A     PORTD|=D[i];    //элементов массива) - бегущий огонь по контуру символа
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 002B     };
;PCODE: $0000003F VOL: 0
; 0000 002C }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;
;void main(void)
; 0000 002F {
;PCODE: $00000043 VOL: 0
; 0000 0030 // Declare your local variables here
; 0000 0031 // Input/Output Ports initialization
; 0000 0032 // Port A initialization
; 0000 0033 PORTA=0x00;         //POPTA - на вывод данных
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0034 DDRA=0xFF;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0035 
; 0000 0036 // Port B initialization
; 0000 0037 PORTB=0x00;         //POPTB - на вывод данных
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0038 DDRB=0xFF;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0039 
; 0000 003A // Port C initialization
; 0000 003B PORTC=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 003C DDRC=0xFF;          //POPTC - на вывод данных
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 003D 
; 0000 003E // Port D initialization
; 0000 003F PORTD=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0040 DDRD=0xFF;          //POPTD - на вывод данных
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0041 
; 0000 0042 // Timer/Counter 1 initialization
; 0000 0043 // Clock source: System Clock
; 0000 0044 // Clock value: 7,813 kHz
; 0000 0045 // Mode: CTC top=OCR1A
; 0000 0046 // OC1A output: Discon.
; 0000 0047 // OC1B output: Discon.
; 0000 0048 // Noise Canceler: Off
; 0000 0049 // Input Capture on Falling Edge
; 0000 004A // Timer1 Overflow Interrupt: Off
; 0000 004B // Input Capture Interrupt: Off
; 0000 004C // Compare A Match Interrupt: On
; 0000 004D // Compare B Match Interrupt: Off
; 0000 004E TCCR1A=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004F TCCR1B=0x0D;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0050 TCNT1H=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0051 TCNT1L=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0052 ICR1H=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0053 ICR1L=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0054 OCR1AH=0x07;        //При счете от нуля до этой вершины проходит
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0055 OCR1AL=0xA1;        //время t=0x7A1/7813=1953/7813=0.25 сек -
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0056 OCR1BH=0x00;        //задержка подсвечивания очередной точки матрицы
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0057 OCR1BL=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0058 
; 0000 0059 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 005A TIMSK=1<<OCIE1A;    //разрешение прерывания по совпадению A TC1
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 005B 
; 0000 005C // Global enable interrupts
; 0000 005D #asm("sei")         //общее разрешение прерываний
;PCODE: $0000006A VOL: 0
	sei
;PCODE: $0000006B VOL: 0
; 0000 005E 
; 0000 005F while (1)			//бесконечный цикл (фоновая программа)
;PCODE: $0000006C VOL: 0
; 0000 0060     {
; 0000 0061     //Place your code here
; 0000 0062     }				//конец бесконечного цикла (фоновой программы)
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0063 }                   //конец главной функции
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;
