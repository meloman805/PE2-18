;/*Программа считывает 12-разрядный цифровой код, установленный переключателями на входах портов D и C,
;передает его по интерфейсу SPI в ведомый цифро-аналоговый преобразователь ЦАП MCP4921. ЦАП принимает данные
;и выдает на своем выходе VOUT аналоговый эквивалент в виде напряжения Vout=data*Ku*Vref/4096 (Ku=1, Vref=5V)*/
;/************************************************************************************************************
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*************************************************************************************************************/
;#include <mega16.h>             //подключение заголовочного файла выбранного МК
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;//функция передачи байта по SPI-интерфейсу от Master-устройства(МК)
;void SPI_MasterTransmit(char d) //принимаем в функцию байт, в переменную d принимаем байт для отправки по SPI интерфейсу
; 0000 0010   {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0011   SPDR = d;                     //передаем байт в сдвиговый регистр SPDR
;PCODE: $0000000F VOL: 0
;	d -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0012   while(~SPSR & (1<<7));        //ждем пока появится 1 в разряде SPIF (7) регистра SPSR - признак завершения передачи ба ...
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0013   }                             //байт передан устройству Slave, возврат
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;//функция отправки 16 бит данных по SPI интерфейсу - установки напряжения на выходе ЦАП
;void SET_Voltage(unsigned int cd)
; 0000 0017 {
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0018 PORTB&=~(1<<4);                 //на /SS (PB.4) установить 0 вольт для выбора ведомого устройства (ЦАП)
;PCODE: $0000001E VOL: 0
;	cd -> Y+0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0019 //Отправляем по SPI (0x1DDD) первые 4 бита(15-12) конфигурационные,
; 0000 001A //остальные данные(11-0) - код для напряжения, которое будет установлено на выходе ЦАП
; 0000 001B SPI_MasterTransmit((cd>>8)|(1<<4)|(1<<5)); //отправляем старшие(15-8) 8 бит данных, поскольку переменная cd 16-битная,
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 001C //сдвигаем старшие 8 бит вправо(первыми отправляем старшие 8 бит). Присваиваем 4-му биту(конфигурационному)
; 0000 001D //единицу, т.е. выводим ЦАП из режима SHDN. Присваиваем 5 биту 1 - устанавливаем Gain=1
; 0000 001E SPI_MasterTransmit(cd);         //Отправляем по SPI младшие(0-7) 8 бит данных
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 001F PORTB|=(1<<4);                  //на /SS (PB.4) установить +5 вольт, т.е. отключить ведомое устройство
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0020 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;
;void main(void)                 //главная функция
; 0000 0023 {
;PCODE: $0000002D VOL: 0
; 0000 0024 //переменная для хранения цифровых данных, соответствующих напряжению устанавливаемому на выходе ЦАП
; 0000 0025 unsigned int data=0x0000;       //16 бит данных: конфигурационные биты (15-12) плюс данные (11-0),
; 0000 0026                                 //устанавливающие напряжение на выходе ЦАП
; 0000 0027 
; 0000 0028 //Инициализация устройства SPI-Master - микроконтроллера ATmega16
; 0000 0029 DDRB|=(1<<4)|(1<<7)|(1<<5);     //PB4(/SS), PB7(SCK), PB5(MOSI) - выходы
;	data -> R16,R17
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 002A PORTB|=(1<<4);                  //на /SS установить "1" - ведомое SPI-устройство отключено
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 002B SPCR = 0x53;                    //включение SPI интерфейса, режим "Master", частота fclk/128, прерывания запрещены
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 002C SPSR=0x00;                      //SPI2X(0 разряд SPSR)- "0", частота тактового сигнала(SCK) fclk/128*1=62,5кГц
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002D DDRC=0x00;                      //Port С на ввод (младшие 8 бит цифрового кода)
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 002E PORTC=0xFF;                     //подключение ко входам PC внутренних  подтягивающих резисторов (здесь необязательно))
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 002F DDRD=0x00;                      //Port D на ввод (старшие 4 бита цифрового кода)
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0030 PORTD=0x0F;                     //подключение ко входам PD3-PD0 внутренних  подтягивающих резисторов (здесь необязательн ...
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0031 
; 0000 0032 while(1)                        //НАЧАЛО бесконечного цикла фоновой программы
;PCODE: $00000041 VOL: 0
; 0000 0033     {
; 0000 0034     data=(PIND<<8)|PINC;        //считывание преобразуемого цифрового кода из портов D, C в перем. config_data
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0035     SET_Voltage(data);          //Запуск ЦАП на преобразование, установка напряжения на его выходе
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0036     }                           //КОНЕЦ бесконечного цикла фоновой программы
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0037 }                               //КОНЕЦ основной функции
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
