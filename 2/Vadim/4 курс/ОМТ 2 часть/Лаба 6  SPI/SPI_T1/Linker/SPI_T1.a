;/****************************************************
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;//глобальные переменные
;char i=0;
;char array[4]= {0x3f,0x06,0x5b,0x4f};    //массив передаваемых данных

	.DSEG
;
;/*SPI interrupt service routine - подпрограмма обработки прерывания по завершению передачи очередного байта данных по SPI*/
;interrupt [SPI_STC] void spi_isr(void)
; 0000 000F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0010 if (i<5)                                //передача 4 байтов
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0011 {
; 0000 0012 SPDR =array[i];
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0013 i++;
;PCODE: $00000017 VOL: 0
; 0000 0014 }
; 0000 0015 //else SPСR=0x00;                       //Выключение SPI у ведущего МК
; 0000 0016 }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;void main(void)
; 0000 0019 {
;PCODE: $0000001C VOL: 0
; 0000 001A //Declare your local variables here
; 0000 001B 
; 0000 001C //Input/Output Ports initialization
; 0000 001D //Port B initialization (PB4 –SS; PB5 – MOSI; PB7 – SCK)
; 0000 001E //Func7=Out Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 001F PORTB=0x00;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0020 DDRB=0xB0;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0021 
; 0000 0022 //SPI initialization
; 0000 0023 //SPI Type: Master
; 0000 0024 //SPI Clock Rate: 500,000 kHz
; 0000 0025 //SPI Clock Phase: Cycle Start
; 0000 0026 //SPI Clock Polarity: High
; 0000 0027 //SPI Data Order: MSB First
; 0000 0028 SPCR=0xD9;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0029 SPSR=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002A //Global enable interrupts
; 0000 002B #asm("sei")
;PCODE: $00000025 VOL: 0
	sei
;PCODE: $00000026 VOL: 0
; 0000 002C 
; 0000 002D SPDR = 'F';         /*вывод символа'F'=0x46, дальнейшая передача данных
; 0000 002E                     происходит в функции обработки прерывания SPI*/
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 002F while (1)
;PCODE: $00000029 VOL: 0
; 0000 0030     {
; 0000 0031     }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0032 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
