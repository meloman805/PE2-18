;/****************************************************
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;//глобальные переменные
;char i=0;
;char array[4]= {0x3f,0x06,0x5b,0x4f};    //массив передаваемых данных

	.DSEG
;int FI;
;int flag;
;/*SPI interrupt service routine - подпрограмма обработки прерывани€ по завершению приЄма очередного байта данных по SPI* ...
;interrupt [SPI_STC] void spi_isr(void)
; 0000 0010 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0011 unsigned char data;
; 0000 0012 data=SPDR;    //читаем приход€щие байты
;PCODE: $0000000F VOL: 0
;	data -> R17
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0013 if(data=='1') //если пришла 1,значит дальше будет фамили€
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0014 {
; 0000 0015 FI=0xFF;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0016 flag=1;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0017 }
; 0000 0018 if(data=='0') //если пришел 0, значит дальше будет им€
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0019 {
; 0000 001A FI=0x00;
;PCODE: $0000001D VOL: 0
; 0000 001B flag=1;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 001C }
; 0000 001D if(flag==1)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001E {
; 0000 001F if(FI==1)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0020 {
; 0000 0021 PORTD=data;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0022 flag=0;
;PCODE: $00000029 VOL: 0
; 0000 0023 }
; 0000 0024 else
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0025 {
; 0000 0026 PORTC=data;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0027 flag=0;
;PCODE: $0000002E VOL: 0
; 0000 0028 }
;PCODE: $0000002F VOL: 0
; 0000 0029 
; 0000 002A }
; 0000 002B 
; 0000 002C }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;
;void main(void)
; 0000 002F {
;PCODE: $00000035 VOL: 0
; 0000 0030 //Declare your local variables here
; 0000 0031 
; 0000 0032 //Input/Output Ports initialization
; 0000 0033 //Port B initialization (PB4 ЦSS; PB5 Ц MOSI; PB7 Ц SCK)
; 0000 0034 //Func7=Out Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0035 PORTB=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0036 DDRB=0xB0;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0037 
; 0000 0038 PORTD=0xFF;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0039 DDRB=0xFF;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003A PORTC=0xFF;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 003B DDRB=0xFF;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 003C //SPI initialization
; 0000 003D //SPI Type: Master
; 0000 003E //SPI Clock Rate: 500,000 kHz
; 0000 003F //SPI Clock Phase: Cycle Start
; 0000 0040 //SPI Clock Polarity: High
; 0000 0041 //SPI Data Order: MSB First
; 0000 0042 SPCR=0xD9;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0043 SPSR=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0044 //Global enable interrupts
; 0000 0045 #asm("sei")
;PCODE: $00000046 VOL: 0
	sei
;PCODE: $00000047 VOL: 0
; 0000 0046         /*вывод символа'F'=0x46, дальнейша€ передача данных
; 0000 0047                     происходит в функции обработки прерывани€ SPI*/
; 0000 0048 while (1)
;PCODE: $00000048 VOL: 0
; 0000 0049     {
; 0000 004A     }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 004B }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
