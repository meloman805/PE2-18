;/*******************************************************
;Chip type               : ATmega328P
;AVR Core Clock frequency: 16,000000 MHz
;*******************************************************/
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Declare your global variables here
;flash unsigned int samples[512]=              //таблица синуса с 512 отсчетами
;{
;  2048, 2073, 2098, 2123, 2148, 2174, 2199, 2224,
;  2249, 2274, 2299, 2324, 2349, 2373, 2398, 2423,
;  2448, 2472, 2497, 2521, 2546, 2570, 2594, 2618,
;  2643, 2667, 2690, 2714, 2738, 2762, 2785, 2808,
;  2832, 2855, 2878, 2901, 2924, 2946, 2969, 2991,
;  3013, 3036, 3057, 3079, 3101, 3122, 3144, 3165,
;  3186, 3207, 3227, 3248, 3268, 3288, 3308, 3328,
;  3347, 3367, 3386, 3405, 3423, 3442, 3460, 3478,
;  3496, 3514, 3531, 3548, 3565, 3582, 3599, 3615,
;  3631, 3647, 3663, 3678, 3693, 3708, 3722, 3737,
;  3751, 3765, 3778, 3792, 3805, 3817, 3830, 3842,
;  3854, 3866, 3877, 3888, 3899, 3910, 3920, 3930,
;  3940, 3950, 3959, 3968, 3976, 3985, 3993, 4000,
;  4008, 4015, 4022, 4028, 4035, 4041, 4046, 4052,
;  4057, 4061, 4066, 4070, 4074, 4077, 4081, 4084,
;  4086, 4088, 4090, 4092, 4094, 4095, 4095, 4095,
;  4095, 4095, 4095, 4095, 4094, 4092, 4090, 4088,
;  4086, 4084, 4081, 4077, 4074, 4070, 4066, 4061,
;  4057, 4052, 4046, 4041, 4035, 4028, 4022, 4015,
;  4008, 4000, 3993, 3985, 3976, 3968, 3959, 3950,
;  3940, 3930, 3920, 3910, 3899, 3888, 3877, 3866,
;  3854, 3842, 3830, 3817, 3805, 3792, 3778, 3765,
;  3751, 3737, 3722, 3708, 3693, 3678, 3663, 3647,
;  3631, 3615, 3599, 3582, 3565, 3548, 3531, 3514,
;  3496, 3478, 3460, 3442, 3423, 3405, 3386, 3367,
;  3347, 3328, 3308, 3288, 3268, 3248, 3227, 3207,
;  3186, 3165, 3144, 3122, 3101, 3079, 3057, 3036,
;  3013, 2991, 2969, 2946, 2924, 2901, 2878, 2855,
;  2832, 2808, 2785, 2762, 2738, 2714, 2690, 2667,
;  2643, 2618, 2594, 2570, 2546, 2521, 2497, 2472,
;  2448, 2423, 2398, 2373, 2349, 2324, 2299, 2274,
;  2249, 2224, 2199, 2174, 2148, 2123, 2098, 2073,
;  2048, 2023, 1998, 1973, 1948, 1922, 1897, 1872,
;  1847, 1822, 1797, 1772, 1747, 1723, 1698, 1673,
;  1648, 1624, 1599, 1575, 1550, 1526, 1502, 1478,
;  1453, 1429, 1406, 1382, 1358, 1334, 1311, 1288,
;  1264, 1241, 1218, 1195, 1172, 1150, 1127, 1105,
;  1083, 1060, 1039, 1017,  995,  974,  952,  931,
;   910,  889,  869,  848,  828,  808,  788,  768,
;   749,  729,  710,  691,  673,  654,  636,  618,
;   600,  582,  565,  548,  531,  514,  497,  481,
;   465,  449,  433,  418,  403,  388,  374,  359,
;   345,  331,  318,  304,  291,  279,  266,  254,
;   242,  230,  219,  208,  197,  186,  176,  166,
;   156,  146,  137,  128,  120,  111,  103,   96,
;    88,   81,   74,   68,   61,   55,   50,   44,
;    39,   35,   30,   26,   22,   19,   15,   12,
;    10,    8,    6,    4,    2,    1,    1,    0,
;     0,    0,    1,    1,    2,    4,    6,    8,
;    10,   12,   15,   19,   22,   26,   30,   35,
;    39,   44,   50,   55,   61,   68,   74,   81,
;    88,   96,  103,  111,  120,  128,  137,  146,
;   156,  166,  176,  186,  197,  208,  219,  230,
;   242,  254,  266,  279,  291,  304,  318,  331,
;   345,  359,  374,  388,  403,  418,  433,  449,
;   465,  481,  497,  514,  531,  548,  565,  582,
;   600,  618,  636,  654,  673,  691,  710,  729,
;   749,  768,  788,  808,  828,  848,  869,  889,
;   910,  931,  952,  974,  995, 1017, 1039, 1060,
;  1083, 1105, 1127, 1150, 1172, 1195, 1218, 1241,
;  1264, 1288, 1311, 1334, 1358, 1382, 1406, 1429,
;  1453, 1478, 1502, 1526, 1550, 1575, 1599, 1624,
;  1648, 1673, 1698, 1723, 1747, 1772, 1797, 1822,
;  1847, 1872, 1897, 1922, 1948, 1973, 1998, 2023
;};
;
;//flash unsigned int samples[32] =                    //таблица синуса с 32 отсчётами
;//{
;//  2048, 2447, 2831, 3185, 3495, 3750, 3939, 4056,
;//  4095, 4056, 3939, 3750, 3495, 3185, 2831, 2447,
;//  2048, 1648, 1264,  910,  600,  345,  156,   39,
;//     0,   39,  156,  345,  600,  910, 1264, 1648
;//};
;// SPI functions
;//#include <spi.h>
;//Определение линий портов для SPI МК Atmega328p
;#define SS PORTB2
;#define SCK PORTB5
;#define MOSI PORTB3
;//Определение разрядов старшего байта передаваемого в ЦАП слова
;#define AB 7    // Для MCP4921 должен быть 0
;#define BUF 6   // 1 - есть буферизация Vref, 0 - нет буферизации Vref
;#define GA 5    // 1 - GAIN=1, 0 - GAIN=0
;#define SHDN 4  // 1 - выходы ЦАП включены, 0 - выходы в высокоимпедансном состоянии
;
;/*ФУНКЦИЯ ПЕРЕДАЧИ БАЙТА ПО SPI-ИНТЕРФЕЙСУ ОТ MASTER-устройства(МК)*/
;void SPI_MasterTransmit(char d) //в переменную d принимаем байт для отправки по SPI интерфейсу
; 0000 0062   {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0063   SPDR = d;                     //передаем байт в сдвиговый регистр SPDR
;PCODE: $0000000F VOL: 0
;	d -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0064   while(~SPSR & (1<<SPIF));     //ждем пока появится 1 в разряде SPIF (7) регистра
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0065                                 //SPSR - признак завершения передачи байта
; 0000 0066   }                             //байт передан устройству Slave, возврат
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;/*ФУНКЦИЯ ОТПРАВКИ 16 БИТ ДАННЫХ ПО SPI-ИНТЕРФЕЙСУ - установки напряжения на выходе ЦАП*/
;void SET_Voltage(unsigned int cd)
; 0000 006A {
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 006B PORTB&=~(1<<SS);    //на /SS установить 0 для выбора ведомого устройства (ЦАП)
;PCODE: $0000001E VOL: 0
;	cd -> Y+0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 006C 
; 0000 006D //Отправляем по SPI (0x1DDD) первые 4 бита(15-12) конфигурационные,
; 0000 006E //остальные данные(11-0) - код для напряжения, которое будет установлено на выходе ЦАП
; 0000 006F 
; 0000 0070 //Выводим ЦАП из режима SHDN (SHDN=1), устанавливаем Gain=1
; 0000 0071 //поскольку переменная cd 16 битная, сдвигаем старшие 8 бит вправо(первыми отправляем старшие 8 бит).
; 0000 0072 SPI_MasterTransmit((0<<AB)|(0<<BUF)|(1<<GA)|(1<<SHDN)|(cd>>8)); //отправляем старшие(15-8) 8 бит данных:
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0073 //4 конфигурационных бита (биты 7-4) и старшую тетраду данных (биты 3-0)
; 0000 0074 
; 0000 0075 SPI_MasterTransmit(cd);         //Отправляем по SPI младшие(0-7) 8 бит данных
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0076 PORTB|=(1<<SS);                 //на /SS установить 1, т.е. отключить ведомое устройство
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0077 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;
;/*ГЛАВНАЯ ФУНКЦИЯ*/
;void main(void)
; 0000 007B {
;PCODE: $0000002D VOL: 0
; 0000 007C unsigned int i, step=4;
; 0000 007D // Crystal Oscillator division factor: 1
; 0000 007E #pragma optsize-
; 0000 007F CLKPR=(1<<CLKPCE);
;	i -> R16,R17
;	step -> R18,R19
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0080 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0081 #ifdef _OPTIMIZE_SIZE_
; 0000 0082 #pragma optsize+
; 0000 0083 #endif
; 0000 0084 
; 0000 0085 /*НАСТРОЙКА ПЕРИФЕРИИ*/
; 0000 0086 // Input/Output Ports initialization
; 0000 0087 // Port B initialization
; 0000 0088 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 0089 // Выходные линии инт. SPI:   PB5-SCK;               PB3-MOSI;    PB2-/SS
; 0000 008A DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 008B // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=0 Bit1=T Bit0=T
; 0000 008C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 008D 
; 0000 008E // SPI initialization
; 0000 008F // SPI Type: Master
; 0000 0090 // SPI Clock Rate: 2*4000,000 kHz - максимально возможная скорость передачи по SPI для данного МК
; 0000 0091 // SPI Clock Phase: Cycle Start
; 0000 0092 // SPI Clock Polarity: Low
; 0000 0093 // SPI Data Order: MSB First
; 0000 0094 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0095 SPSR=(1<<SPI2X);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0096 
; 0000 0097 while (1)
;PCODE: $0000003C VOL: 0
; 0000 0098       {
; 0000 0099       // Place your code here
; 0000 009A       //ЦИКЛИЧЕСКИЙ ВЫВОД ЗНАЧЕНИЙ МАССИВА СИНУСОВ В ЦАП
; 0000 009B       for (i=0;i<512;i=i+step)
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 009C             {
; 0000 009D              SET_Voltage(samples[i]);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 009E             };
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 009F 
; 0000 00A0       }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 00A1 }
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
