;/*******************************************************
;Chip type               : ATmega16
;AVR Core Clock frequency: 12,000000 MHz
;арефмитическая функция реализованая в МК Atmega16
;PORTC.0
;*******************************************************/
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;    #include <math.h>
;// Переменные в SRAM
;unsigned  char a@0x75;
;unsigned  char b@0x76;
;unsigned  char c,d,f,g,result;
;      int a1,b1;
;// Переменный в FLSASH
;
;flash int x=7;
;
;// Переменные в EEPROM
;
;eeprom int y=25;
;
;unsigned  char _sqrt(unsigned  char x) {
; 0000 0017 unsigned  char _sqrt(unsigned  char x) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0018 int y0 = 0;
; 0000 0019 int y1 = 0xFFFF;
; 0000 001A while (y1 - y0 > 1) {
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	x -> Y+4
;	y0 -> R16,R17
;	y1 -> R18,R19
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 001B int y = (y0 + y1) >> 1;
; 0000 001C int y2 = y * y;
; 0000 001D if (y2 == x) return y;
;PCODE: $0000001A VOL: 0
;	x -> Y+8
;	y -> Y+2
;	y2 -> Y+0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 001E if (y2 > x) y1 = y;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 001F else y0 = y;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0020 }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0021 return (y0 + y1) >> 1;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0022 }
;PCODE: $00000043 VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0026 {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0027 // Place your code here
; 0000 0028 //Обработчик прерывания, увеличивающий counter при клике кнопки
; 0000 0029 
; 0000 002A }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;void main(void)
; 0000 002D {
;PCODE: $00000049 VOL: 0
; 0000 002E // Declare your local variables here
; 0000 002F 
; 0000 0030 // Input/Output Ports initialization
; 0000 0031 // Port A initialization
; 0000 0032 DDRA=0b11111111;    //PORTA - все биты на вывод данных
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0033 PORTA=0b00000000;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0034 
; 0000 0035 // Port C initialization
; 0000 0036 DDRC=0b00000001;        //младший бит PORTC - на вывод
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0037 PORTC=0b00000000;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0038 
; 0000 0039 // External Interrupt(s) initialization
; 0000 003A // INT0: On
; 0000 003B // INT0 Mode: Rising Edge
; 0000 003C // INT1: Off
; 0000 003D // INT2: Off
; 0000 003E GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 003F MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0040 MCUCSR=(0<<ISC2);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0041 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0042     a=4;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0043     b=2;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0044     c=3;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0045     d=4;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0046     f=5;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0047     g=1;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0048     y=8;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0049 
; 0000 004A // Global enable interrupts
; 0000 004B #asm("sei")
;PCODE: $0000006A VOL: 0
	sei
;PCODE: $0000006B VOL: 0
; 0000 004C    result=pow(a,2); //    result=(sqrt(a))+(2*a*g)+(sqrt(g))-(pow((a*b),2));
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 004D       PORTB=result;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 004E        result+=(2*a*g);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 004F         PORTB=result;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0050           result+=g*g;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0051           PORTB=result;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0052               a1=a;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0053               b1=b;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0054             a1=(pow(a*b,0.5));
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0055 
; 0000 0056           result-=a1;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0057             PORTB=result;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0058              delay_ms(250);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0059 while (1)
;PCODE: $0000009D VOL: 0
; 0000 005A 
; 0000 005B       delay_ms(250);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 005D }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
