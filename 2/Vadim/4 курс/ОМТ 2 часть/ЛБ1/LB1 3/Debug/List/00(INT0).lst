
AVRASM ver. 2.1.30  F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1 3\Debug\List\00(INT0).asm Sat Nov 06 14:21:35 2021

F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1 3\Debug\List\00(INT0).asm(1088): warning: Register r5 already defined by the .DEF directive
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1 3\Debug\List\00(INT0).asm(1089): warning: Register r4 already defined by the .DEF directive
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1 3\Debug\List\00(INT0).asm(1090): warning: Register r7 already defined by the .DEF directive
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1 3\Debug\List\00(INT0).asm(1091): warning: Register r6 already defined by the .DEF directive
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1 3\Debug\List\00(INT0).asm(1092): warning: Register r9 already defined by the .DEF directive
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1 3\Debug\List\00(INT0).asm(1093): warning: Register r10 already defined by the .DEF directive
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1 3\Debug\List\00(INT0).asm(1094): warning: Register r11 already defined by the .DEF directive
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1 3\Debug\List\00(INT0).asm(1095): warning: Register r12 already defined by the .DEF directive
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1 3\Debug\List\00(INT0).asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 12,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _c=R5
                 	.DEF _d=R4
                 	.DEF _f=R7
                 	.DEF _g=R6
                 	.DEF _result=R9
                 	.DEF _a1=R10
                 	.DEF _a1_msb=R11
                 	.DEF _b1=R12
                 	.DEF _b1_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0034 	JMP  __RESET
000002 940c 0061 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x2020060:
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1 3\Debug\List\00(INT0).asm(1128): warning: .cseg .db misalignment - padding zero byte
00002a 0001      	.DB  0x1
                 _0x2020000:
00002b 4e2d
00002c 4e41
00002d 4900
00002e 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
F:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1 3\Debug\List\00(INT0).asm(1131): warning: .cseg .db misalignment - padding zero byte
00002f 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000030 0001      	.DW  0x01
000031 0160      	.DW  __seed_G101
000032 0054      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000033 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000034 94f8      	CLI
000035 27ee      	CLR  R30
000036 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000037 e0f1      	LDI  R31,1
000038 bffb      	OUT  GICR,R31
000039 bfeb      	OUT  GICR,R30
00003a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003b e08d      	LDI  R24,(14-2)+1
00003c e0a2      	LDI  R26,2
00003d 27bb      	CLR  R27
                 __CLEAR_REG:
00003e 93ed      	ST   X+,R30
00003f 958a      	DEC  R24
000040 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000041 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000042 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000043 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000044 93ed      	ST   X+,R30
000045 9701      	SBIW R24,1
000046 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000047 e6e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000048 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000049 9185      	LPM  R24,Z+
00004a 9195      	LPM  R25,Z+
00004b 9700      	SBIW R24,0
00004c f061      	BREQ __GLOBAL_INI_END
00004d 91a5      	LPM  R26,Z+
00004e 91b5      	LPM  R27,Z+
00004f 9005      	LPM  R0,Z+
000050 9015      	LPM  R1,Z+
000051 01bf      	MOVW R22,R30
000052 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000053 9005      	LPM  R0,Z+
000054 920d      	ST   X+,R0
000055 9701      	SBIW R24,1
000056 f7e1      	BRNE __GLOBAL_INI_LOOP
000057 01fb      	MOVW R30,R22
000058 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000059 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005a bfed      	OUT  SPL,R30
00005b e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005d e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005e e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005f 940c 0062 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Chip type               : ATmega16
                 ;AVR Core Clock frequency: 12,000000 MHz
                 ;арефмитическая функция реализованая в МК Atmega16
                 ;PORTC.0
                 ;*******************************************************/
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;    #include <math.h>
                 ;// Переменные в SRAM
                 ;unsigned  char a@0x75;
                 ;unsigned  char b@0x76;
                 ;unsigned  char c,d,f,g,result;
                 ;      int a1,b1;
                 ;// Переменный в FLSASH
                 ;
                 ;flash int x=7;
                 ;
                 ;// Переменные в EEPROM
                 ;
                 ;eeprom int y=25;
                 ;
                 ;unsigned  char _sqrt(unsigned  char x) {
                 ; 0000 0017 unsigned  char _sqrt(unsigned  char x) {
                 
                 	.CSEG
                 ; 0000 0018 int y0 = 0;
                 ; 0000 0019 int y1 = 0xFFFF;
                 ; 0000 001A while (y1 - y0 > 1) {
                 ;	x -> Y+4
                 ;	y0 -> R16,R17
                 ;	y1 -> R18,R19
                 ; 0000 001B int y = (y0 + y1) >> 1;
                 ; 0000 001C int y2 = y * y;
                 ; 0000 001D if (y2 == x) return y;
                 ;	x -> Y+8
                 ;	y -> Y+2
                 ;	y2 -> Y+0
                 ; 0000 001E if (y2 > x) y1 = y;
                 ; 0000 001F else y0 = y;
                 ; 0000 0020 }
                 ; 0000 0021 return (y0 + y1) >> 1;
                 ; 0000 0022 }
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0026 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
                 ; 0000 0027 // Place your code here
                 ; 0000 0028 //Обработчик прерывания, увеличивающий counter при клике кнопки
                 ; 0000 0029 
                 ; 0000 002A }
000061 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 002D {
                 _main:
                 ; .FSTART _main
                 ; 0000 002E // Declare your local variables here
                 ; 0000 002F 
                 ; 0000 0030 // Input/Output Ports initialization
                 ; 0000 0031 // Port A initialization
                 ; 0000 0032 DDRA=0b11111111;    //PORTA - все биты на вывод данных
000062 efef      	LDI  R30,LOW(255)
000063 bbea      	OUT  0x1A,R30
                 ; 0000 0033 PORTA=0b00000000;
000064 e0e0      	LDI  R30,LOW(0)
000065 bbeb      	OUT  0x1B,R30
                 ; 0000 0034 
                 ; 0000 0035 // Port C initialization
                 ; 0000 0036 DDRC=0b00000001;        //младший бит PORTC - на вывод
000066 e0e1      	LDI  R30,LOW(1)
000067 bbe4      	OUT  0x14,R30
                 ; 0000 0037 PORTC=0b00000000;
000068 e0e0      	LDI  R30,LOW(0)
000069 bbe5      	OUT  0x15,R30
                 ; 0000 0038 
                 ; 0000 0039 // External Interrupt(s) initialization
                 ; 0000 003A // INT0: On
                 ; 0000 003B // INT0 Mode: Rising Edge
                 ; 0000 003C // INT1: Off
                 ; 0000 003D // INT2: Off
                 ; 0000 003E GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
00006a b7eb      	IN   R30,0x3B
00006b 64e0      	ORI  R30,0x40
00006c bfeb      	OUT  0x3B,R30
                 ; 0000 003F MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
00006d e0e3      	LDI  R30,LOW(3)
00006e bfe5      	OUT  0x35,R30
                 ; 0000 0040 MCUCSR=(0<<ISC2);
00006f e0e0      	LDI  R30,LOW(0)
000070 bfe4      	OUT  0x34,R30
                 ; 0000 0041 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
000071 e4e0      	LDI  R30,LOW(64)
000072 bfea      	OUT  0x3A,R30
                 ; 0000 0042     a=4;
000073 e0e4      	LDI  R30,LOW(4)
000074 93e0 0075 	STS  _a,R30
                 ; 0000 0043     b=2;
000076 e0e2      	LDI  R30,LOW(2)
000077 93e0 0076 	STS  _b,R30
                 ; 0000 0044     c=3;
000079 e0e3      	LDI  R30,LOW(3)
00007a 2e5e      	MOV  R5,R30
                 ; 0000 0045     d=4;
00007b e0e4      	LDI  R30,LOW(4)
00007c 2e4e      	MOV  R4,R30
                 ; 0000 0046     f=5;
00007d e0e5      	LDI  R30,LOW(5)
00007e 2e7e      	MOV  R7,R30
                 ; 0000 0047     g=1;
00007f e0e1      	LDI  R30,LOW(1)
000080 2e6e      	MOV  R6,R30
                 ; 0000 0048     y=8;
000081 e0a0      	LDI  R26,LOW(_y)
000082 e0b0      	LDI  R27,HIGH(_y)
000083 e0e8      	LDI  R30,LOW(8)
000084 e0f0      	LDI  R31,HIGH(8)
000085 940e 04fb 	CALL __EEPROMWRW
                 ; 0000 0049 
                 ; 0000 004A // Global enable interrupts
                 ; 0000 004B #asm("sei")
000087 9478      	sei
                 ; 0000 004C    result=pow(a,2); //    result=(sqrt(a))+(2*a*g)+(sqrt(g))-(pow((a*b),2));
000088 91e0 0075 	LDS  R30,_a
00008a 27ff      	CLR  R31
00008b 2766      	CLR  R22
00008c 2777      	CLR  R23
00008d 940e 0361 	CALL __CDF1
00008f 940e 04e4 	CALL __PUTPARD1
                +
000091 e0a0     +LDI R26 , LOW ( 0x40000000 )
000092 e0b0     +LDI R27 , HIGH ( 0x40000000 )
000093 e080     +LDI R24 , BYTE3 ( 0x40000000 )
000094 e490     +LDI R25 , BYTE4 ( 0x40000000 )
                 	__GETD2N 0x40000000
000095 940e 022b 	CALL _pow
000097 940e 0328 	CALL __CFD1U
000099 2e9e      	MOV  R9,R30
                 ; 0000 004D       PORTB=result;
00009a ba98      	OUT  0x18,R9
                 ; 0000 004E        result+=(2*a*g);
00009b 91e0 0075 	LDS  R30,_a
00009d 0fee      	LSL  R30
00009e 2fae      	MOV  R26,R30
00009f 2de6      	MOV  R30,R6
0000a0 02ea      	MULS R30,R26
0000a1 01f0      	MOVW R30,R0
0000a2 0e9e      	ADD  R9,R30
                 ; 0000 004F         PORTB=result;
0000a3 ba98      	OUT  0x18,R9
                 ; 0000 0050           result+=g*g;
0000a4 2de6      	MOV  R30,R6
0000a5 2da6      	MOV  R26,R6
0000a6 02ea      	MULS R30,R26
0000a7 01f0      	MOVW R30,R0
0000a8 0e9e      	ADD  R9,R30
                 ; 0000 0051           PORTB=result;
0000a9 ba98      	OUT  0x18,R9
                 ; 0000 0052             a1=(pow(a*b,0.5));
0000aa 91a0 0075 	LDS  R26,_a
0000ac 27bb      	CLR  R27
0000ad 91e0 0076 	LDS  R30,_b
0000af e0f0      	LDI  R31,0
0000b0 940e 04bd 	CALL __MULW12
0000b2 940e 027d 	CALL SUBOPT_0x0
0000b4 940e 04e4 	CALL __PUTPARD1
                +
0000b6 e0a0     +LDI R26 , LOW ( 0x3F000000 )
0000b7 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0000b8 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0000b9 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0000ba 940e 022b 	CALL _pow
0000bc 940e 032a 	CALL __CFD1
0000be 015f      	MOVW R10,R30
                 ; 0000 0053           result-=a1;
0000bf 189a      	SUB  R9,R10
                 ; 0000 0054             PORTB=result;
0000c0 ba98      	OUT  0x18,R9
                 ; 0000 0055              delay_ms(250);
0000c1 efaa      	LDI  R26,LOW(250)
0000c2 e0b0      	LDI  R27,0
0000c3 940e 02ce 	CALL _delay_ms
                 ; 0000 0056 while (1)
                 _0x9:
                 ; 0000 0057 
                 ; 0000 0058       delay_ms(250);
0000c5 efaa      	LDI  R26,LOW(250)
0000c6 e0b0      	LDI  R27,0
0000c7 940e 02ce 	CALL _delay_ms
0000c9 cffb      	RJMP _0x9
                 ; 0000 005A }
                 _0xC:
0000ca cfff      	RJMP _0xC
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0000cb 940e 04e9 	CALL __PUTPARD2
0000cd 817b         ldd  r23,y+3
0000ce 816a         ldd  r22,y+2
0000cf 81f9         ldd  r31,y+1
0000d0 81e8         ld   r30,y
0000d1 fb77         bst  r23,7
0000d2 0f77         lsl  r23
0000d3 fd67         sbrc r22,7
0000d4 6071         sbr  r23,1
0000d5 2f97         mov  r25,r23
0000d6 579e         subi r25,0x7e
0000d7 f081         breq __ftrunc0
0000d8 f078         brcs __ftrunc0
0000d9 3198         cpi  r25,24
0000da f490         brsh __ftrunc1
0000db 27aa         clr  r26
0000dc 27bb         clr  r27
0000dd 2788         clr  r24
                 __ftrunc2:
0000de 9408         sec
0000df 9587         ror  r24
0000e0 95b7         ror  r27
0000e1 95a7         ror  r26
0000e2 959a         dec  r25
0000e3 f7d1         brne __ftrunc2
0000e4 23ea         and  r30,r26
0000e5 23fb         and  r31,r27
0000e6 2368         and  r22,r24
0000e7 c005         rjmp __ftrunc1
                 __ftrunc0:
0000e8 94e8         clt
0000e9 2777         clr  r23
0000ea 27ee         clr  r30
0000eb 27ff         clr  r31
0000ec 2766         clr  r22
                 __ftrunc1:
0000ed 776f         cbr  r22,0x80
0000ee 9576         lsr  r23
0000ef f408         brcc __ftrunc3
0000f0 6860         sbr  r22,0x80
                 __ftrunc3:
0000f1 f977         bld  r23,7
0000f2 91a9         ld   r26,y+
0000f3 91b9         ld   r27,y+
0000f4 9189         ld   r24,y+
0000f5 9199         ld   r25,y+
0000f6 17ea         cp   r30,r26
0000f7 07fb         cpc  r31,r27
0000f8 0768         cpc  r22,r24
0000f9 0779         cpc  r23,r25
0000fa fb97         bst  r25,7
0000fb 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
0000fc 940e 04e9 	CALL __PUTPARD2
0000fe 940e 04da 	CALL __GETD2S0
000100 940e 00cb 	CALL _ftrunc
000102 940e 04df 	CALL __PUTD1S0
000104 f419          brne __floor1
                 __floor0:
000105 940e 0282 	CALL SUBOPT_0x1
000107 c005      	RJMP _0x2080004
                 __floor1:
000108 f7e6          brtc __floor0
000109 940e 0282 	CALL SUBOPT_0x1
00010b 940e 0285 	CALL SUBOPT_0x2
                 _0x2080004:
00010d 9624      	ADIW R28,4
00010e 9508      	RET
                 ; .FEND
                 _log:
                 ; .FSTART _log
00010f 940e 04e9 	CALL __PUTPARD2
000111 9724      	SBIW R28,4
000112 931a      	ST   -Y,R17
000113 930a      	ST   -Y,R16
000114 940e 028c 	CALL SUBOPT_0x3
000116 940e 0518 	CALL __CPD02
000118 f02c      	BRLT _0x200000C
                +
000119 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
00011a efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
00011b e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
00011c ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
00011d c071      	RJMP _0x2080003
                 _0x200000C:
00011e 940e 0291 	CALL SUBOPT_0x4
000120 940e 04e4 	CALL __PUTPARD1
000122 b7ad      	IN   R26,SPL
000123 b7be      	IN   R27,SPH
000124 9711      	SBIW R26,1
000125 931f      	PUSH R17
000126 930f      	PUSH R16
000127 940e 02d8 	CALL _frexp
000129 910f      	POP  R16
00012a 911f      	POP  R17
00012b 940e 0296 	CALL SUBOPT_0x5
00012d 940e 028c 	CALL SUBOPT_0x3
                +
00012f efe3     +LDI R30 , LOW ( 0x3F3504F3 )
000130 e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
000131 e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
000132 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
000133 940e 047e 	CALL __CMPF12
000135 f440      	BRSH _0x200000D
000136 940e 029b 	CALL SUBOPT_0x6
000138 940e 039b 	CALL __ADDF12
00013a 940e 0296 	CALL SUBOPT_0x5
                +
00013c 5001     +SUBI R16 , LOW ( 1 )
00013d 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x200000D:
00013e 940e 0291 	CALL SUBOPT_0x4
000140 940e 0285 	CALL SUBOPT_0x2
000142 937f      	PUSH R23
000143 936f      	PUSH R22
000144 93ff      	PUSH R31
000145 93ef      	PUSH R30
000146 940e 0291 	CALL SUBOPT_0x4
                +
000148 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000149 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
00014a e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00014b e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00014c 940e 039b 	CALL __ADDF12
00014e 91af      	POP  R26
00014f 91bf      	POP  R27
000150 918f      	POP  R24
000151 919f      	POP  R25
000152 940e 0439 	CALL __DIVF21
000154 940e 0296 	CALL SUBOPT_0x5
000156 940e 029b 	CALL SUBOPT_0x6
000158 940e 029d 	CALL SUBOPT_0x7
                +
00015a e2a6     +LDI R26 , LOW ( 0x3F654226 )
00015b e4b2     +LDI R27 , HIGH ( 0x3F654226 )
00015c e685     +LDI R24 , BYTE3 ( 0x3F654226 )
00015d e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
00015e 940e 02a4 	CALL SUBOPT_0x8
                +
000160 e4ee     +LDI R30 , LOW ( 0x4054114E )
000161 e1f1     +LDI R31 , HIGH ( 0x4054114E )
000162 e564     +LDI R22 , BYTE3 ( 0x4054114E )
000163 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
000164 940e 02a9 	CALL SUBOPT_0x9
000166 940e 028c 	CALL SUBOPT_0x3
000168 940e 03eb 	CALL __MULF12
00016a 937f      	PUSH R23
00016b 936f      	PUSH R22
00016c 93ff      	PUSH R31
00016d 93ef      	PUSH R30
00016e 940e 02ae 	CALL SUBOPT_0xA
                +
000170 e4ad     +LDI R26 , LOW ( 0x3FD4114D )
000171 e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
000172 ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
000173 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
000174 940e 0394 	CALL __SUBF12
000176 91af      	POP  R26
000177 91bf      	POP  R27
000178 918f      	POP  R24
000179 919f      	POP  R25
00017a 940e 0439 	CALL __DIVF21
00017c 937f      	PUSH R23
00017d 936f      	PUSH R22
00017e 93ff      	PUSH R31
00017f 93ef      	PUSH R30
000180 01f8      	MOVW R30,R16
000181 940e 027d 	CALL SUBOPT_0x0
                +
000183 e1a8     +LDI R26 , LOW ( 0x3F317218 )
000184 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
000185 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
000186 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
000187 940e 03eb 	CALL __MULF12
000189 91af      	POP  R26
00018a 91bf      	POP  R27
00018b 918f      	POP  R24
00018c 919f      	POP  R25
00018d 940e 039b 	CALL __ADDF12
                 _0x2080003:
00018f 8119      	LDD  R17,Y+1
000190 8108      	LDD  R16,Y+0
000191 962a      	ADIW R28,10
000192 9508      	RET
                 ; .FEND
                 _exp:
                 ; .FSTART _exp
000193 940e 04e9 	CALL __PUTPARD2
000195 9728      	SBIW R28,8
000196 931a      	ST   -Y,R17
000197 930a      	ST   -Y,R16
000198 940e 02b3 	CALL SUBOPT_0xB
                +
00019a e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
00019b eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
00019c ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
00019d ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
00019e 940e 047e 	CALL __CMPF12
0001a0 f418      	BRSH _0x200000F
0001a1 940e 02b8 	CALL SUBOPT_0xC
0001a3 c083      	RJMP _0x2080002
                 _0x200000F:
                +
0001a4 85ea     +LDD R30 , Y + 10
0001a5 85fb     +LDD R31 , Y + 10 + 1
0001a6 856c     +LDD R22 , Y + 10 + 2
0001a7 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
0001a8 940e 0514 	CALL __CPD10
0001aa f429      	BRNE _0x2000010
                +
0001ab e0e0     +LDI R30 , LOW ( 0x3F800000 )
0001ac e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0001ad e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0001ae e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0001af c077      	RJMP _0x2080002
                 _0x2000010:
0001b0 940e 02b3 	CALL SUBOPT_0xB
                +
0001b2 e1e8     +LDI R30 , LOW ( 0x42B17218 )
0001b3 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
0001b4 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
0001b5 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
0001b6 940e 047e 	CALL __CMPF12
0001b8 f009      	BREQ PC+2
0001b9 f408      	BRCC PC+2
0001ba c005      	RJMP _0x2000011
                +
0001bb efef     +LDI R30 , LOW ( 0x7F7FFFFF )
0001bc efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
0001bd e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
0001be e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
0001bf c067      	RJMP _0x2080002
                 _0x2000011:
0001c0 940e 02b3 	CALL SUBOPT_0xB
                +
0001c2 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
0001c3 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
0001c4 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
0001c5 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
0001c6 940e 03eb 	CALL __MULF12
                +
0001c8 87ea     +STD Y + 10 , R30
0001c9 87fb     +STD Y + 10 + 1 , R31
0001ca 876c     +STD Y + 10 + 2 , R22
0001cb 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
0001cc 940e 02b3 	CALL SUBOPT_0xB
0001ce df2d      	RCALL _floor
0001cf 940e 032a 	CALL __CFD1
0001d1 018f      	MOVW R16,R30
0001d2 940e 02b3 	CALL SUBOPT_0xB
0001d4 940e 027d 	CALL SUBOPT_0x0
0001d6 940e 02a9 	CALL SUBOPT_0x9
0001d8 01df      	MOVW R26,R30
0001d9 01cb      	MOVW R24,R22
                +
0001da e0e0     +LDI R30 , LOW ( 0x3F000000 )
0001db e0f0     +LDI R31 , HIGH ( 0x3F000000 )
0001dc e060     +LDI R22 , BYTE3 ( 0x3F000000 )
0001dd e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
0001de 940e 02a9 	CALL SUBOPT_0x9
0001e0 940e 0296 	CALL SUBOPT_0x5
0001e2 940e 029b 	CALL SUBOPT_0x6
0001e4 940e 029d 	CALL SUBOPT_0x7
                +
0001e6 e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
0001e7 e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
0001e8 e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
0001e9 e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
0001ea 940e 03eb 	CALL __MULF12
                +
0001ec eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
0001ed eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
0001ee ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
0001ef e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
0001f0 940e 039b 	CALL __ADDF12
0001f2 940e 028c 	CALL SUBOPT_0x3
0001f4 940e 03eb 	CALL __MULF12
0001f6 940e 0296 	CALL SUBOPT_0x5
0001f8 940e 02ae 	CALL SUBOPT_0xA
                +
0001fa e2a8     +LDI R26 , LOW ( 0x41A68D28 )
0001fb e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
0001fc ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
0001fd e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
0001fe 940e 039b 	CALL __ADDF12
                +
000200 83ea     +STD Y + 2 , R30
000201 83fb     +STD Y + 2 + 1 , R31
000202 836c     +STD Y + 2 + 2 , R22
000203 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000204 940e 0291 	CALL SUBOPT_0x4
                +
000206 81aa     +LDD R26 , Y + 2
000207 81bb     +LDD R27 , Y + 2 + 1
000208 818c     +LDD R24 , Y + 2 + 2
000209 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00020a 940e 039b 	CALL __ADDF12
                +
00020c efa3     +LDI R26 , LOW ( 0x3FB504F3 )
00020d e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
00020e eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
00020f e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
000210 940e 03eb 	CALL __MULF12
000212 937f      	PUSH R23
000213 936f      	PUSH R22
000214 93ff      	PUSH R31
000215 93ef      	PUSH R30
000216 940e 028c 	CALL SUBOPT_0x3
000218 940e 02ae 	CALL SUBOPT_0xA
00021a 940e 0394 	CALL __SUBF12
00021c 91af      	POP  R26
00021d 91bf      	POP  R27
00021e 918f      	POP  R24
00021f 919f      	POP  R25
000220 940e 0439 	CALL __DIVF21
000222 940e 04e4 	CALL __PUTPARD1
000224 01d8      	MOVW R26,R16
000225 940e 02e9 	CALL _ldexp
                 _0x2080002:
000227 8119      	LDD  R17,Y+1
000228 8108      	LDD  R16,Y+0
000229 962e      	ADIW R28,14
00022a 9508      	RET
                 ; .FEND
                 _pow:
                 ; .FSTART _pow
00022b 940e 04e9 	CALL __PUTPARD2
00022d 9724      	SBIW R28,4
00022e 940e 02bd 	CALL SUBOPT_0xD
000230 940e 0514 	CALL __CPD10
000232 f419      	BRNE _0x2000012
000233 940e 02b8 	CALL SUBOPT_0xC
000235 c045      	RJMP _0x2080001
                 _0x2000012:
                +
000236 85a8     +LDD R26 , Y + 8
000237 85b9     +LDD R27 , Y + 8 + 1
000238 858a     +LDD R24 , Y + 8 + 2
000239 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
00023a 940e 0518 	CALL __CPD02
00023c f494      	BRGE _0x2000013
00023d 940e 02c2 	CALL SUBOPT_0xE
00023f 940e 0514 	CALL __CPD10
000241 f429      	BRNE _0x2000014
                +
000242 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000243 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000244 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000245 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000246 c034      	RJMP _0x2080001
                 _0x2000014:
                +
000247 85a8     +LDD R26 , Y + 8
000248 85b9     +LDD R27 , Y + 8 + 1
000249 858a     +LDD R24 , Y + 8 + 2
00024a 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
00024b 940e 02c7 	CALL SUBOPT_0xF
00024d df45      	RCALL _exp
00024e c02c      	RJMP _0x2080001
                 _0x2000013:
00024f 940e 02c2 	CALL SUBOPT_0xE
000251 01de      	MOVW R26,R28
000252 940e 032a 	CALL __CFD1
000254 940e 04d0 	CALL __PUTDP1
000256 940e 0282 	CALL SUBOPT_0x1
000258 940e 0361 	CALL __CDF1
00025a 01df      	MOVW R26,R30
00025b 01cb      	MOVW R24,R22
00025c 940e 02c2 	CALL SUBOPT_0xE
00025e 940e 051e 	CALL __CPD12
000260 f019      	BREQ _0x2000015
000261 940e 02b8 	CALL SUBOPT_0xC
000263 c017      	RJMP _0x2080001
                 _0x2000015:
000264 940e 02bd 	CALL SUBOPT_0xD
000266 940e 02f5 	CALL __ANEGF1
000268 01df      	MOVW R26,R30
000269 01cb      	MOVW R24,R22
00026a 940e 02c7 	CALL SUBOPT_0xF
00026c df26      	RCALL _exp
                +
00026d 87e8     +STD Y + 8 , R30
00026e 87f9     +STD Y + 8 + 1 , R31
00026f 876a     +STD Y + 8 + 2 , R22
000270 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
000271 81e8      	LD   R30,Y
000272 70e1      	ANDI R30,LOW(0x1)
000273 f419      	BRNE _0x2000016
000274 940e 02bd 	CALL SUBOPT_0xD
000276 c004      	RJMP _0x2080001
                 _0x2000016:
000277 940e 02bd 	CALL SUBOPT_0xD
000279 940e 02f5 	CALL __ANEGF1
                 _0x2080001:
00027b 962c      	ADIW R28,12
00027c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.ORG 0x75
                 _a:
000075           	.BYTE 0x1
                 
                 	.ORG 0x160
                 
                 	.ORG 0x76
                 _b:
000076           	.BYTE 0x1
                 
                 	.ORG 0x160
                 
                 	.ESEG
                 _y:
000000 19
000001 00        	.DB  0x19,0x0
                 
                 	.DSEG
                 __seed_G101:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00027d 940e 04b0 	CALL __CWD1
00027f 940e 0361 	CALL __CDF1
000281 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000282 940e 04d5 	CALL __GETD1S0
000284 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
                +
000285 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000286 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000287 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000288 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000289 940e 0394 	CALL __SUBF12
00028b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3:
                +
00028c 81ae     +LDD R26 , Y + 6
00028d 81bf     +LDD R27 , Y + 6 + 1
00028e 8588     +LDD R24 , Y + 6 + 2
00028f 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000290 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
                +
000291 81ee     +LDD R30 , Y + 6
000292 81ff     +LDD R31 , Y + 6 + 1
000293 8568     +LDD R22 , Y + 6 + 2
000294 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
000295 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
                +
000296 83ee     +STD Y + 6 , R30
000297 83ff     +STD Y + 6 + 1 , R31
000298 8768     +STD Y + 6 + 2 , R22
000299 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
00029a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00029b dff5      	RCALL SUBOPT_0x4
00029c cfef      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
00029d 940e 03eb 	CALL __MULF12
                +
00029f 83ea     +STD Y + 2 , R30
0002a0 83fb     +STD Y + 2 + 1 , R31
0002a1 836c     +STD Y + 2 + 2 , R22
0002a2 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0002a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0002a4 940e 03eb 	CALL __MULF12
0002a6 01df      	MOVW R26,R30
0002a7 01cb      	MOVW R24,R22
0002a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0002a9 940e 04ee 	CALL __SWAPD12
0002ab 940e 0394 	CALL __SUBF12
0002ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
                +
0002ae 81ea     +LDD R30 , Y + 2
0002af 81fb     +LDD R31 , Y + 2 + 1
0002b0 816c     +LDD R22 , Y + 2 + 2
0002b1 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0002b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
                +
0002b3 85aa     +LDD R26 , Y + 10
0002b4 85bb     +LDD R27 , Y + 10 + 1
0002b5 858c     +LDD R24 , Y + 10 + 2
0002b6 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
0002b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
                +
0002b8 e0e0     +LDI R30 , LOW ( 0x0 )
0002b9 e0f0     +LDI R31 , HIGH ( 0x0 )
0002ba e060     +LDI R22 , BYTE3 ( 0x0 )
0002bb e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0002bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
                +
0002bd 85e8     +LDD R30 , Y + 8
0002be 85f9     +LDD R31 , Y + 8 + 1
0002bf 856a     +LDD R22 , Y + 8 + 2
0002c0 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
0002c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
                +
0002c2 81ec     +LDD R30 , Y + 4
0002c3 81fd     +LDD R31 , Y + 4 + 1
0002c4 816e     +LDD R22 , Y + 4 + 2
0002c5 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0002c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
0002c7 940e 010f 	CALL _log
                +
0002c9 81ac     +LDD R26 , Y + 4
0002ca 81bd     +LDD R27 , Y + 4 + 1
0002cb 818e     +LDD R24 , Y + 4 + 2
0002cc 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0002cd cfd6      	RJMP SUBOPT_0x8
                 
                 
                 	.CSEG
                 _delay_ms:
0002ce 9610      	adiw r26,0
0002cf f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002d0 eb88     +LDI R24 , LOW ( 0xBB8 )
0002d1 e09b     +LDI R25 , HIGH ( 0xBB8 )
                +__DELAY_USW_LOOP :
0002d2 9701     +SBIW R24 , 1
0002d3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xBB8
0002d4 95a8      	wdr
0002d5 9711      	sbiw r26,1
0002d6 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002d7 9508      	ret
                 
                 _frexp:
0002d8 91e9      	LD   R30,Y+
0002d9 91f9      	LD   R31,Y+
0002da 9169      	LD   R22,Y+
0002db 9179      	LD   R23,Y+
0002dc fb77      	BST  R23,7
0002dd 0f66      	LSL  R22
0002de 1f77      	ROL  R23
0002df 2788      	CLR  R24
0002e0 577e      	SUBI R23,0x7E
0002e1 0b88      	SBC  R24,R24
0002e2 937d      	ST   X+,R23
0002e3 938c      	ST   X,R24
0002e4 e77e      	LDI  R23,0x7E
0002e5 9576      	LSR  R23
0002e6 9567      	ROR  R22
0002e7 f06e      	BRTS __ANEGF1
0002e8 9508      	RET
                 
                 _ldexp:
0002e9 91e9      	LD   R30,Y+
0002ea 91f9      	LD   R31,Y+
0002eb 9169      	LD   R22,Y+
0002ec 9179      	LD   R23,Y+
0002ed fb77      	BST  R23,7
0002ee 0f66      	LSL  R22
0002ef 1f77      	ROL  R23
0002f0 0f7a      	ADD  R23,R26
0002f1 9576      	LSR  R23
0002f2 9567      	ROR  R22
0002f3 f00e      	BRTS __ANEGF1
0002f4 9508      	RET
                 
                 __ANEGF1:
0002f5 9730      	SBIW R30,0
0002f6 4060      	SBCI R22,0
0002f7 4070      	SBCI R23,0
0002f8 f009      	BREQ __ANEGF10
0002f9 5870      	SUBI R23,0x80
                 __ANEGF10:
0002fa 9508      	RET
                 
                 __ROUND_REPACK:
0002fb 2355      	TST  R21
0002fc f442      	BRPL __REPACK
0002fd 3850      	CPI  R21,0x80
0002fe f411      	BRNE __ROUND_REPACK0
0002ff ffe0      	SBRS R30,0
000300 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000301 9631      	ADIW R30,1
000302 1f69      	ADC  R22,R25
000303 1f79      	ADC  R23,R25
000304 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000305 e850      	LDI  R21,0x80
000306 2757      	EOR  R21,R23
000307 f411      	BRNE __REPACK0
000308 935f      	PUSH R21
000309 c0cf      	RJMP __ZERORES
                 __REPACK0:
00030a 3f5f      	CPI  R21,0xFF
00030b f031      	BREQ __REPACK1
00030c 0f66      	LSL  R22
00030d 0c00      	LSL  R0
00030e 9557      	ROR  R21
00030f 9567      	ROR  R22
000310 2f75      	MOV  R23,R21
000311 9508      	RET
                 __REPACK1:
000312 935f      	PUSH R21
000313 2000      	TST  R0
000314 f00a      	BRMI __REPACK2
000315 c0cf      	RJMP __MAXRES
                 __REPACK2:
000316 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000317 e850      	LDI  R21,0x80
000318 2e19      	MOV  R1,R25
000319 2215      	AND  R1,R21
00031a 0f88      	LSL  R24
00031b 1f99      	ROL  R25
00031c 2795      	EOR  R25,R21
00031d 0f55      	LSL  R21
00031e 9587      	ROR  R24
                 
                 __UNPACK1:
00031f e850      	LDI  R21,0x80
000320 2e07      	MOV  R0,R23
000321 2205      	AND  R0,R21
000322 0f66      	LSL  R22
000323 1f77      	ROL  R23
000324 2775      	EOR  R23,R21
000325 0f55      	LSL  R21
000326 9567      	ROR  R22
000327 9508      	RET
                 
                 __CFD1U:
000328 9468      	SET
000329 c001      	RJMP __CFD1U0
                 __CFD1:
00032a 94e8      	CLT
                 __CFD1U0:
00032b 935f      	PUSH R21
00032c dff2      	RCALL __UNPACK1
00032d 3870      	CPI  R23,0x80
00032e f018      	BRLO __CFD10
00032f 3f7f      	CPI  R23,0xFF
000330 f408      	BRCC __CFD10
000331 c0a7      	RJMP __ZERORES
                 __CFD10:
000332 e156      	LDI  R21,22
000333 1b57      	SUB  R21,R23
000334 f4aa      	BRPL __CFD11
000335 9551      	NEG  R21
000336 3058      	CPI  R21,8
000337 f40e      	BRTC __CFD19
000338 3059      	CPI  R21,9
                 __CFD19:
000339 f030      	BRLO __CFD17
00033a efef      	SER  R30
00033b efff      	SER  R31
00033c ef6f      	SER  R22
00033d e77f      	LDI  R23,0x7F
00033e f977      	BLD  R23,7
00033f c01a      	RJMP __CFD15
                 __CFD17:
000340 2777      	CLR  R23
000341 2355      	TST  R21
000342 f0b9      	BREQ __CFD15
                 __CFD18:
000343 0fee      	LSL  R30
000344 1fff      	ROL  R31
000345 1f66      	ROL  R22
000346 1f77      	ROL  R23
000347 955a      	DEC  R21
000348 f7d1      	BRNE __CFD18
000349 c010      	RJMP __CFD15
                 __CFD11:
00034a 2777      	CLR  R23
                 __CFD12:
00034b 3058      	CPI  R21,8
00034c f028      	BRLO __CFD13
00034d 2fef      	MOV  R30,R31
00034e 2ff6      	MOV  R31,R22
00034f 2f67      	MOV  R22,R23
000350 5058      	SUBI R21,8
000351 cff9      	RJMP __CFD12
                 __CFD13:
000352 2355      	TST  R21
000353 f031      	BREQ __CFD15
                 __CFD14:
000354 9576      	LSR  R23
000355 9567      	ROR  R22
000356 95f7      	ROR  R31
000357 95e7      	ROR  R30
000358 955a      	DEC  R21
000359 f7d1      	BRNE __CFD14
                 __CFD15:
00035a 2000      	TST  R0
00035b f40a      	BRPL __CFD16
00035c d145      	RCALL __ANEGD1
                 __CFD16:
00035d 915f      	POP  R21
00035e 9508      	RET
                 
                 __CDF1U:
00035f 9468      	SET
000360 c001      	RJMP __CDF1U0
                 __CDF1:
000361 94e8      	CLT
                 __CDF1U0:
000362 9730      	SBIW R30,0
000363 4060      	SBCI R22,0
000364 4070      	SBCI R23,0
000365 f0b1      	BREQ __CDF10
000366 2400      	CLR  R0
000367 f026      	BRTS __CDF11
000368 2377      	TST  R23
000369 f412      	BRPL __CDF11
00036a 9400      	COM  R0
00036b d136      	RCALL __ANEGD1
                 __CDF11:
00036c 2e17      	MOV  R1,R23
00036d e17e      	LDI  R23,30
00036e 2011      	TST  R1
                 __CDF12:
00036f f032      	BRMI __CDF13
000370 957a      	DEC  R23
000371 0fee      	LSL  R30
000372 1fff      	ROL  R31
000373 1f66      	ROL  R22
000374 1c11      	ROL  R1
000375 cff9      	RJMP __CDF12
                 __CDF13:
000376 2fef      	MOV  R30,R31
000377 2ff6      	MOV  R31,R22
000378 2d61      	MOV  R22,R1
000379 935f      	PUSH R21
00037a df8a      	RCALL __REPACK
00037b 915f      	POP  R21
                 __CDF10:
00037c 9508      	RET
                 
                 __SWAPACC:
00037d 934f      	PUSH R20
00037e 01af      	MOVW R20,R30
00037f 01fd      	MOVW R30,R26
000380 01da      	MOVW R26,R20
000381 01ab      	MOVW R20,R22
000382 01bc      	MOVW R22,R24
000383 01ca      	MOVW R24,R20
000384 2d40      	MOV  R20,R0
000385 2c01      	MOV  R0,R1
000386 2e14      	MOV  R1,R20
000387 914f      	POP  R20
000388 9508      	RET
                 
                 __UADD12:
000389 0fea      	ADD  R30,R26
00038a 1ffb      	ADC  R31,R27
00038b 1f68      	ADC  R22,R24
00038c 9508      	RET
                 
                 __NEGMAN1:
00038d 95e0      	COM  R30
00038e 95f0      	COM  R31
00038f 9560      	COM  R22
000390 5fef      	SUBI R30,-1
000391 4fff      	SBCI R31,-1
000392 4f6f      	SBCI R22,-1
000393 9508      	RET
                 
                 __SUBF12:
000394 935f      	PUSH R21
000395 df81      	RCALL __UNPACK
000396 3890      	CPI  R25,0x80
000397 f171      	BREQ __ADDF129
000398 e850      	LDI  R21,0x80
000399 2615      	EOR  R1,R21
                 
00039a c004      	RJMP __ADDF120
                 
                 __ADDF12:
00039b 935f      	PUSH R21
00039c df7a      	RCALL __UNPACK
00039d 3890      	CPI  R25,0x80
00039e f139      	BREQ __ADDF129
                 
                 __ADDF120:
00039f 3870      	CPI  R23,0x80
0003a0 f121      	BREQ __ADDF128
                 __ADDF121:
0003a1 2f57      	MOV  R21,R23
0003a2 1b59      	SUB  R21,R25
0003a3 f12b      	BRVS __ADDF1211
0003a4 f412      	BRPL __ADDF122
0003a5 dfd7      	RCALL __SWAPACC
0003a6 cffa      	RJMP __ADDF121
                 __ADDF122:
0003a7 3158      	CPI  R21,24
0003a8 f018      	BRLO __ADDF123
0003a9 27aa      	CLR  R26
0003aa 27bb      	CLR  R27
0003ab 2788      	CLR  R24
                 __ADDF123:
0003ac 3058      	CPI  R21,8
0003ad f028      	BRLO __ADDF124
0003ae 2fab      	MOV  R26,R27
0003af 2fb8      	MOV  R27,R24
0003b0 2788      	CLR  R24
0003b1 5058      	SUBI R21,8
0003b2 cff9      	RJMP __ADDF123
                 __ADDF124:
0003b3 2355      	TST  R21
0003b4 f029      	BREQ __ADDF126
                 __ADDF125:
0003b5 9586      	LSR  R24
0003b6 95b7      	ROR  R27
0003b7 95a7      	ROR  R26
0003b8 955a      	DEC  R21
0003b9 f7d9      	BRNE __ADDF125
                 __ADDF126:
0003ba 2d50      	MOV  R21,R0
0003bb 2551      	EOR  R21,R1
0003bc f072      	BRMI __ADDF127
0003bd dfcb      	RCALL __UADD12
0003be f438      	BRCC __ADDF129
0003bf 9567      	ROR  R22
0003c0 95f7      	ROR  R31
0003c1 95e7      	ROR  R30
0003c2 9573      	INC  R23
0003c3 f413      	BRVC __ADDF129
0003c4 c020      	RJMP __MAXRES
                 __ADDF128:
0003c5 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0003c6 df3e      	RCALL __REPACK
0003c7 915f      	POP  R21
0003c8 9508      	RET
                 __ADDF1211:
0003c9 f7d8      	BRCC __ADDF128
0003ca cffb      	RJMP __ADDF129
                 __ADDF127:
0003cb 1bea      	SUB  R30,R26
0003cc 0bfb      	SBC  R31,R27
0003cd 0b68      	SBC  R22,R24
0003ce f051      	BREQ __ZERORES
0003cf f410      	BRCC __ADDF1210
0003d0 9400      	COM  R0
0003d1 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0003d2 2366      	TST  R22
0003d3 f392      	BRMI __ADDF129
0003d4 0fee      	LSL  R30
0003d5 1fff      	ROL  R31
0003d6 1f66      	ROL  R22
0003d7 957a      	DEC  R23
0003d8 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0003d9 27ee      	CLR  R30
0003da 27ff      	CLR  R31
0003db 2766      	CLR  R22
0003dc 2777      	CLR  R23
0003dd 915f      	POP  R21
0003de 9508      	RET
                 
                 __MINRES:
0003df efef      	SER  R30
0003e0 efff      	SER  R31
0003e1 e76f      	LDI  R22,0x7F
0003e2 ef7f      	SER  R23
0003e3 915f      	POP  R21
0003e4 9508      	RET
                 
                 __MAXRES:
0003e5 efef      	SER  R30
0003e6 efff      	SER  R31
0003e7 e76f      	LDI  R22,0x7F
0003e8 e77f      	LDI  R23,0x7F
0003e9 915f      	POP  R21
0003ea 9508      	RET
                 
                 __MULF12:
0003eb 935f      	PUSH R21
0003ec df2a      	RCALL __UNPACK
0003ed 3870      	CPI  R23,0x80
0003ee f351      	BREQ __ZERORES
0003ef 3890      	CPI  R25,0x80
0003f0 f341      	BREQ __ZERORES
0003f1 2401      	EOR  R0,R1
0003f2 9408      	SEC
0003f3 1f79      	ADC  R23,R25
0003f4 f423      	BRVC __MULF124
0003f5 f31c      	BRLT __ZERORES
                 __MULF125:
0003f6 2000      	TST  R0
0003f7 f33a      	BRMI __MINRES
0003f8 cfec      	RJMP __MAXRES
                 __MULF124:
0003f9 920f      	PUSH R0
0003fa 931f      	PUSH R17
0003fb 932f      	PUSH R18
0003fc 933f      	PUSH R19
0003fd 934f      	PUSH R20
0003fe 2711      	CLR  R17
0003ff 2722      	CLR  R18
000400 2799      	CLR  R25
000401 9f68      	MUL  R22,R24
000402 01a0      	MOVW R20,R0
000403 9f8f      	MUL  R24,R31
000404 2d30      	MOV  R19,R0
000405 0d41      	ADD  R20,R1
000406 1f59      	ADC  R21,R25
000407 9f6b      	MUL  R22,R27
000408 0d30      	ADD  R19,R0
000409 1d41      	ADC  R20,R1
00040a 1f59      	ADC  R21,R25
00040b 9f8e      	MUL  R24,R30
00040c d027      	RCALL __MULF126
00040d 9fbf      	MUL  R27,R31
00040e d025      	RCALL __MULF126
00040f 9f6a      	MUL  R22,R26
000410 d023      	RCALL __MULF126
000411 9fbe      	MUL  R27,R30
000412 d01d      	RCALL __MULF127
000413 9faf      	MUL  R26,R31
000414 d01b      	RCALL __MULF127
000415 9fae      	MUL  R26,R30
000416 0d11      	ADD  R17,R1
000417 1f29      	ADC  R18,R25
000418 1f39      	ADC  R19,R25
000419 1f49      	ADC  R20,R25
00041a 1f59      	ADC  R21,R25
00041b 2fe3      	MOV  R30,R19
00041c 2ff4      	MOV  R31,R20
00041d 2f65      	MOV  R22,R21
00041e 2f52      	MOV  R21,R18
00041f 914f      	POP  R20
000420 913f      	POP  R19
000421 912f      	POP  R18
000422 911f      	POP  R17
000423 900f      	POP  R0
000424 2366      	TST  R22
000425 f02a      	BRMI __MULF122
000426 0f55      	LSL  R21
000427 1fee      	ROL  R30
000428 1fff      	ROL  R31
000429 1f66      	ROL  R22
00042a c002      	RJMP __MULF123
                 __MULF122:
00042b 9573      	INC  R23
00042c f24b      	BRVS __MULF125
                 __MULF123:
00042d decd      	RCALL __ROUND_REPACK
00042e 915f      	POP  R21
00042f 9508      	RET
                 
                 __MULF127:
000430 0d10      	ADD  R17,R0
000431 1d21      	ADC  R18,R1
000432 1f39      	ADC  R19,R25
000433 c002      	RJMP __MULF128
                 __MULF126:
000434 0d20      	ADD  R18,R0
000435 1d31      	ADC  R19,R1
                 __MULF128:
000436 1f49      	ADC  R20,R25
000437 1f59      	ADC  R21,R25
000438 9508      	RET
                 
                 __DIVF21:
000439 935f      	PUSH R21
00043a dedc      	RCALL __UNPACK
00043b 3870      	CPI  R23,0x80
00043c f421      	BRNE __DIVF210
00043d 2011      	TST  R1
                 __DIVF211:
00043e f40a      	BRPL __DIVF219
00043f cf9f      	RJMP __MINRES
                 __DIVF219:
000440 cfa4      	RJMP __MAXRES
                 __DIVF210:
000441 3890      	CPI  R25,0x80
000442 f409      	BRNE __DIVF218
                 __DIVF217:
000443 cf95      	RJMP __ZERORES
                 __DIVF218:
000444 2401      	EOR  R0,R1
000445 9408      	SEC
000446 0b97      	SBC  R25,R23
000447 f41b      	BRVC __DIVF216
000448 f3d4      	BRLT __DIVF217
000449 2000      	TST  R0
00044a cff3      	RJMP __DIVF211
                 __DIVF216:
00044b 2f79      	MOV  R23,R25
00044c 931f      	PUSH R17
00044d 932f      	PUSH R18
00044e 933f      	PUSH R19
00044f 934f      	PUSH R20
000450 2411      	CLR  R1
000451 2711      	CLR  R17
000452 2722      	CLR  R18
000453 2733      	CLR  R19
000454 2744      	CLR  R20
000455 2755      	CLR  R21
000456 e290      	LDI  R25,32
                 __DIVF212:
000457 17ae      	CP   R26,R30
000458 07bf      	CPC  R27,R31
000459 0786      	CPC  R24,R22
00045a 0741      	CPC  R20,R17
00045b f030      	BRLO __DIVF213
00045c 1bae      	SUB  R26,R30
00045d 0bbf      	SBC  R27,R31
00045e 0b86      	SBC  R24,R22
00045f 0b41      	SBC  R20,R17
000460 9408      	SEC
000461 c001      	RJMP __DIVF214
                 __DIVF213:
000462 9488      	CLC
                 __DIVF214:
000463 1f55      	ROL  R21
000464 1f22      	ROL  R18
000465 1f33      	ROL  R19
000466 1c11      	ROL  R1
000467 1faa      	ROL  R26
000468 1fbb      	ROL  R27
000469 1f88      	ROL  R24
00046a 1f44      	ROL  R20
00046b 959a      	DEC  R25
00046c f751      	BRNE __DIVF212
00046d 01f9      	MOVW R30,R18
00046e 2d61      	MOV  R22,R1
00046f 914f      	POP  R20
000470 913f      	POP  R19
000471 912f      	POP  R18
000472 911f      	POP  R17
000473 2366      	TST  R22
000474 f032      	BRMI __DIVF215
000475 0f55      	LSL  R21
000476 1fee      	ROL  R30
000477 1fff      	ROL  R31
000478 1f66      	ROL  R22
000479 957a      	DEC  R23
00047a f243      	BRVS __DIVF217
                 __DIVF215:
00047b de7f      	RCALL __ROUND_REPACK
00047c 915f      	POP  R21
00047d 9508      	RET
                 
                 __CMPF12:
00047e 2399      	TST  R25
00047f f09a      	BRMI __CMPF120
000480 2377      	TST  R23
000481 f042      	BRMI __CMPF121
000482 1797      	CP   R25,R23
000483 f048      	BRLO __CMPF122
000484 f429      	BRNE __CMPF121
000485 17ae      	CP   R26,R30
000486 07bf      	CPC  R27,R31
000487 0786      	CPC  R24,R22
000488 f020      	BRLO __CMPF122
000489 f031      	BREQ __CMPF123
                 __CMPF121:
00048a 9498      	CLZ
00048b 9488      	CLC
00048c 9508      	RET
                 __CMPF122:
00048d 9498      	CLZ
00048e 9408      	SEC
00048f 9508      	RET
                 __CMPF123:
000490 9418      	SEZ
000491 9488      	CLC
000492 9508      	RET
                 __CMPF120:
000493 2377      	TST  R23
000494 f7c2      	BRPL __CMPF122
000495 1797      	CP   R25,R23
000496 f398      	BRLO __CMPF121
000497 f7a9      	BRNE __CMPF122
000498 17ea      	CP   R30,R26
000499 07fb      	CPC  R31,R27
00049a 0768      	CPC  R22,R24
00049b f388      	BRLO __CMPF122
00049c f399      	BREQ __CMPF123
00049d cfec      	RJMP __CMPF121
                 
                 __ANEGW1:
00049e 95f1      	NEG  R31
00049f 95e1      	NEG  R30
0004a0 40f0      	SBCI R31,0
0004a1 9508      	RET
                 
                 __ANEGD1:
0004a2 95f0      	COM  R31
0004a3 9560      	COM  R22
0004a4 9570      	COM  R23
0004a5 95e1      	NEG  R30
0004a6 4fff      	SBCI R31,-1
0004a7 4f6f      	SBCI R22,-1
0004a8 4f7f      	SBCI R23,-1
0004a9 9508      	RET
                 
                 __CBD1:
0004aa 2ffe      	MOV  R31,R30
0004ab 0fff      	ADD  R31,R31
0004ac 0bff      	SBC  R31,R31
0004ad 2f6f      	MOV  R22,R31
0004ae 2f7f      	MOV  R23,R31
0004af 9508      	RET
                 
                 __CWD1:
0004b0 2f6f      	MOV  R22,R31
0004b1 0f66      	ADD  R22,R22
0004b2 0b66      	SBC  R22,R22
0004b3 2f76      	MOV  R23,R22
0004b4 9508      	RET
                 
                 __MULW12U:
0004b5 9ffa      	MUL  R31,R26
0004b6 2df0      	MOV  R31,R0
0004b7 9feb      	MUL  R30,R27
0004b8 0df0      	ADD  R31,R0
0004b9 9fea      	MUL  R30,R26
0004ba 2de0      	MOV  R30,R0
0004bb 0df1      	ADD  R31,R1
0004bc 9508      	RET
                 
                 __MULW12:
0004bd d004      	RCALL __CHKSIGNW
0004be dff6      	RCALL __MULW12U
0004bf f40e      	BRTC __MULW121
0004c0 dfdd      	RCALL __ANEGW1
                 __MULW121:
0004c1 9508      	RET
                 
                 __CHKSIGNW:
0004c2 94e8      	CLT
0004c3 fff7      	SBRS R31,7
0004c4 c002      	RJMP __CHKSW1
0004c5 dfd8      	RCALL __ANEGW1
0004c6 9468      	SET
                 __CHKSW1:
0004c7 ffb7      	SBRS R27,7
0004c8 c006      	RJMP __CHKSW2
0004c9 95a0      	COM  R26
0004ca 95b0      	COM  R27
0004cb 9611      	ADIW R26,1
0004cc f800      	BLD  R0,0
0004cd 9403      	INC  R0
0004ce fa00      	BST  R0,0
                 __CHKSW2:
0004cf 9508      	RET
                 
                 __PUTDP1:
0004d0 93ed      	ST   X+,R30
0004d1 93fd      	ST   X+,R31
0004d2 936d      	ST   X+,R22
0004d3 937c      	ST   X,R23
0004d4 9508      	RET
                 
                 __GETD1S0:
0004d5 81e8      	LD   R30,Y
0004d6 81f9      	LDD  R31,Y+1
0004d7 816a      	LDD  R22,Y+2
0004d8 817b      	LDD  R23,Y+3
0004d9 9508      	RET
                 
                 __GETD2S0:
0004da 81a8      	LD   R26,Y
0004db 81b9      	LDD  R27,Y+1
0004dc 818a      	LDD  R24,Y+2
0004dd 819b      	LDD  R25,Y+3
0004de 9508      	RET
                 
                 __PUTD1S0:
0004df 83e8      	ST   Y,R30
0004e0 83f9      	STD  Y+1,R31
0004e1 836a      	STD  Y+2,R22
0004e2 837b      	STD  Y+3,R23
0004e3 9508      	RET
                 
                 __PUTPARD1:
0004e4 937a      	ST   -Y,R23
0004e5 936a      	ST   -Y,R22
0004e6 93fa      	ST   -Y,R31
0004e7 93ea      	ST   -Y,R30
0004e8 9508      	RET
                 
                 __PUTPARD2:
0004e9 939a      	ST   -Y,R25
0004ea 938a      	ST   -Y,R24
0004eb 93ba      	ST   -Y,R27
0004ec 93aa      	ST   -Y,R26
0004ed 9508      	RET
                 
                 __SWAPD12:
0004ee 2e18      	MOV  R1,R24
0004ef 2f86      	MOV  R24,R22
0004f0 2d61      	MOV  R22,R1
0004f1 2e19      	MOV  R1,R25
0004f2 2f97      	MOV  R25,R23
0004f3 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0004f4 2e1b      	MOV  R1,R27
0004f5 2fbf      	MOV  R27,R31
0004f6 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0004f7 2e1a      	MOV  R1,R26
0004f8 2fae      	MOV  R26,R30
0004f9 2de1      	MOV  R30,R1
0004fa 9508      	RET
                 
                 __EEPROMWRW:
0004fb d007      	RCALL __EEPROMWRB
0004fc 9611      	ADIW R26,1
0004fd 93ef      	PUSH R30
0004fe 2fef      	MOV  R30,R31
0004ff d003      	RCALL __EEPROMWRB
000500 91ef      	POP  R30
000501 9711      	SBIW R26,1
000502 9508      	RET
                 
                 __EEPROMWRB:
000503 9be1      	SBIS EECR,EEWE
000504 c002      	RJMP __EEPROMWRB1
000505 95a8      	WDR
000506 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000507 b79f      	IN   R25,SREG
000508 94f8      	CLI
000509 bbae      	OUT  EEARL,R26
00050a bbbf      	OUT  EEARH,R27
00050b 9ae0      	SBI  EECR,EERE
00050c b38d      	IN   R24,EEDR
00050d 17e8      	CP   R30,R24
00050e f019      	BREQ __EEPROMWRB0
00050f bbed      	OUT  EEDR,R30
000510 9ae2      	SBI  EECR,EEMWE
000511 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000512 bf9f      	OUT  SREG,R25
000513 9508      	RET
                 
                 __CPD10:
000514 9730      	SBIW R30,0
000515 4060      	SBCI R22,0
000516 4070      	SBCI R23,0
000517 9508      	RET
                 
                 __CPD02:
000518 2400      	CLR  R0
000519 160a      	CP   R0,R26
00051a 060b      	CPC  R0,R27
00051b 0608      	CPC  R0,R24
00051c 0609      	CPC  R0,R25
00051d 9508      	RET
                 
                 __CPD12:
00051e 17ea      	CP   R30,R26
00051f 07fb      	CPC  R31,R27
000520 0768      	CPC  R22,R24
000521 0779      	CPC  R23,R25
000522 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  39 r1 :  31 r2 :   0 r3 :   0 r4 :   1 r5 :   1 r6 :   4 r7 :   1 
r8 :   0 r9 :   8 r10:   2 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  10 r17:  17 r18:  12 r19:  12 r20:  22 r21:  63 r22: 102 r23: 100 
r24:  69 r25:  67 r26:  76 r27:  57 r28:   9 r29:   1 r30: 149 r31:  89 
x  :   9 y  : 109 z  :   7 
Registers used: 27 out of 35 (77.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :  13 
adiw  :   8 and   :   5 andi  :   1 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   1 break :   0 breq  :  20 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   3 brmi  :   9 brne  :  21 brpl  :   7 brsh  :   3 brtc  :   3 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   5 call  : 115 
cbi   :   0 cbr   :   1 clc   :   3 clh   :   0 cli   :   2 cln   :   0 
clr   :  35 cls   :   0 clt   :   4 clv   :   0 clz   :   2 com   :  10 
cp    :   9 cpc   :  16 cpi   :  17 cpse  :   0 dec   :   9 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   3 jmp   :  22 ld    :  16 ldd   :  57 ldi   : 136 
lds   :   4 lpm   :   7 lsl   :  15 lsr   :   5 mov   :  54 movw  :  26 
mul   :  12 muls  :   2 mulsu :   0 neg   :   4 nop   :   0 or    :   0 
ori   :   1 out   :  22 pop   :  37 push  :  37 rcall :  30 ret   :  59 
reti  :   1 rjmp  :  46 rol   :  26 ror   :  17 sbc   :   9 sbci  :  13 
sbi   :   3 sbic  :   0 sbis  :   1 sbiw  :  13 sbr   :   2 sbrc  :   1 
sbrs  :   3 sec   :   5 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  22 std   :  23 sts   :   2 sub   :   5 subi  :   7 swap  :   0 
tst   :  17 wdr   :   2 
Instructions used: 79 out of 116 (68.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a46   2610     20   2630   16384  16.1%
[.dseg] 0x000060 0x000164      0      6      6    1024   0.6%
[.eseg] 0x000000 0x000002      0      2      2     512   0.4%

Assembly complete, 0 errors, 11 warnings
