
AVRASM ver. 2.1.30  C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1\Debug\List\00(INT0).asm Mon Sep 13 22:25:27 2021

C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1\Debug\List\00(INT0).asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1\Debug\List\00(INT0).asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1\Debug\List\00(INT0).asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1\Debug\List\00(INT0).asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1\Debug\List\00(INT0).asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1\Debug\List\00(INT0).asm(1093): warning: Register r10 already defined by the .DEF directive
C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1\Debug\List\00(INT0).asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1\Debug\List\00(INT0).asm(1095): warning: Register r12 already defined by the .DEF directive
C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1\Debug\List\00(INT0).asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 12,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _c=R5
                 	.DEF _d=R4
                 	.DEF _f=R7
                 	.DEF _g=R6
                 	.DEF _result=R9
                 	.DEF _a1=R10
                 	.DEF _a1_msb=R11
                 	.DEF _b1=R12
                 	.DEF _b1_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0034 	JMP  __RESET
000002 940c 0061 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x2020060:
C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1\Debug\List\00(INT0).asm(1128): warning: .cseg .db misalignment - padding zero byte
00002a 0001      	.DB  0x1
                 _0x2020000:
00002b 4e2d
00002c 4e41
00002d 4900
00002e 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Uchoba\PE2-18\2\Vadim\4 курс\ОМТ 2 часть\ЛБ1\LB1\Debug\List\00(INT0).asm(1131): warning: .cseg .db misalignment - padding zero byte
00002f 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000030 0001      	.DW  0x01
000031 0160      	.DW  __seed_G101
000032 0054      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000033 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000034 94f8      	CLI
000035 27ee      	CLR  R30
000036 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000037 e0f1      	LDI  R31,1
000038 bffb      	OUT  GICR,R31
000039 bfeb      	OUT  GICR,R30
00003a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003b e08d      	LDI  R24,(14-2)+1
00003c e0a2      	LDI  R26,2
00003d 27bb      	CLR  R27
                 __CLEAR_REG:
00003e 93ed      	ST   X+,R30
00003f 958a      	DEC  R24
000040 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000041 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000042 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000043 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000044 93ed      	ST   X+,R30
000045 9701      	SBIW R24,1
000046 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000047 e6e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000048 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000049 9185      	LPM  R24,Z+
00004a 9195      	LPM  R25,Z+
00004b 9700      	SBIW R24,0
00004c f061      	BREQ __GLOBAL_INI_END
00004d 91a5      	LPM  R26,Z+
00004e 91b5      	LPM  R27,Z+
00004f 9005      	LPM  R0,Z+
000050 9015      	LPM  R1,Z+
000051 01bf      	MOVW R22,R30
000052 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000053 9005      	LPM  R0,Z+
000054 920d      	ST   X+,R0
000055 9701      	SBIW R24,1
000056 f7e1      	BRNE __GLOBAL_INI_LOOP
000057 01fb      	MOVW R30,R22
000058 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000059 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005a bfed      	OUT  SPL,R30
00005b e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005d e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005e e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005f 940c 0062 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Chip type               : ATmega16
                 ;AVR Core Clock frequency: 12,000000 MHz
                 ;арефмитическая функция реализованая в МК Atmega16
                 ;PORTC.0
                 ;*******************************************************/
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;    #include <math.h>
                 ;// Переменные в SRAM
                 ;unsigned  char a@0x75;
                 ;unsigned  char b@0x76;
                 ;unsigned  char c,d,f,g,result;
                 ;      int a1,b1;
                 ;// Переменный в FLSASH
                 ;
                 ;flash int x=7;
                 ;
                 ;// Переменные в EEPROM
                 ;
                 ;eeprom int y=25;
                 ;
                 ;unsigned  char _sqrt(unsigned  char x) {
                 ; 0000 0017 unsigned  char _sqrt(unsigned  char x) {
                 
                 	.CSEG
                 ; 0000 0018 int y0 = 0;
                 ; 0000 0019 int y1 = 0xFFFF;
                 ; 0000 001A while (y1 - y0 > 1) {
                 ;	x -> Y+4
                 ;	y0 -> R16,R17
                 ;	y1 -> R18,R19
                 ; 0000 001B int y = (y0 + y1) >> 1;
                 ; 0000 001C int y2 = y * y;
                 ; 0000 001D if (y2 == x) return y;
                 ;	x -> Y+8
                 ;	y -> Y+2
                 ;	y2 -> Y+0
                 ; 0000 001E if (y2 > x) y1 = y;
                 ; 0000 001F else y0 = y;
                 ; 0000 0020 }
                 ; 0000 0021 return (y0 + y1) >> 1;
                 ; 0000 0022 }
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0026 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
                 ; 0000 0027 // Place your code here
                 ; 0000 0028 //Обработчик прерывания, увеличивающий counter при клике кнопки
                 ; 0000 0029 
                 ; 0000 002A }
000061 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 002D {
                 _main:
                 ; .FSTART _main
                 ; 0000 002E // Declare your local variables here
                 ; 0000 002F 
                 ; 0000 0030 // Input/Output Ports initialization
                 ; 0000 0031 // Port A initialization
                 ; 0000 0032 DDRA=0b11111111;    //PORTA - все биты на вывод данных
000062 efef      	LDI  R30,LOW(255)
000063 bbea      	OUT  0x1A,R30
                 ; 0000 0033 PORTA=0b00000000;
000064 e0e0      	LDI  R30,LOW(0)
000065 bbeb      	OUT  0x1B,R30
                 ; 0000 0034 
                 ; 0000 0035 // Port C initialization
                 ; 0000 0036 DDRC=0b00000001;        //младший бит PORTC - на вывод
000066 e0e1      	LDI  R30,LOW(1)
000067 bbe4      	OUT  0x14,R30
                 ; 0000 0037 PORTC=0b00000000;
000068 e0e0      	LDI  R30,LOW(0)
000069 bbe5      	OUT  0x15,R30
                 ; 0000 0038 
                 ; 0000 0039 // External Interrupt(s) initialization
                 ; 0000 003A // INT0: On
                 ; 0000 003B // INT0 Mode: Rising Edge
                 ; 0000 003C // INT1: Off
                 ; 0000 003D // INT2: Off
                 ; 0000 003E GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
00006a b7eb      	IN   R30,0x3B
00006b 64e0      	ORI  R30,0x40
00006c bfeb      	OUT  0x3B,R30
                 ; 0000 003F MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
00006d e0e3      	LDI  R30,LOW(3)
00006e bfe5      	OUT  0x35,R30
                 ; 0000 0040 MCUCSR=(0<<ISC2);
00006f e0e0      	LDI  R30,LOW(0)
000070 bfe4      	OUT  0x34,R30
                 ; 0000 0041 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
000071 e4e0      	LDI  R30,LOW(64)
000072 bfea      	OUT  0x3A,R30
                 ; 0000 0042     a=4;
000073 e0e4      	LDI  R30,LOW(4)
000074 93e0 0075 	STS  _a,R30
                 ; 0000 0043     b=2;
000076 e0e2      	LDI  R30,LOW(2)
000077 93e0 0076 	STS  _b,R30
                 ; 0000 0044     c=3;
000079 e0e3      	LDI  R30,LOW(3)
00007a 2e5e      	MOV  R5,R30
                 ; 0000 0045     d=4;
00007b e0e4      	LDI  R30,LOW(4)
00007c 2e4e      	MOV  R4,R30
                 ; 0000 0046     f=5;
00007d e0e5      	LDI  R30,LOW(5)
00007e 2e7e      	MOV  R7,R30
                 ; 0000 0047     g=1;
00007f e0e1      	LDI  R30,LOW(1)
000080 2e6e      	MOV  R6,R30
                 ; 0000 0048     y=8;
000081 e0a0      	LDI  R26,LOW(_y)
000082 e0b0      	LDI  R27,HIGH(_y)
000083 e0e8      	LDI  R30,LOW(8)
000084 e0f0      	LDI  R31,HIGH(8)
000085 940e 0501 	CALL __EEPROMWRW
                 ; 0000 0049 
                 ; 0000 004A // Global enable interrupts
                 ; 0000 004B #asm("sei")
000087 9478      	sei
                 ; 0000 004C    result=pow(a,2); //    result=(sqrt(a))+(2*a*g)+(sqrt(g))-(pow((a*b),2));
000088 91e0 0075 	LDS  R30,_a
00008a 27ff      	CLR  R31
00008b 2766      	CLR  R22
00008c 2777      	CLR  R23
00008d 940e 0367 	CALL __CDF1
00008f 940e 04ea 	CALL __PUTPARD1
                +
000091 e0a0     +LDI R26 , LOW ( 0x40000000 )
000092 e0b0     +LDI R27 , HIGH ( 0x40000000 )
000093 e080     +LDI R24 , BYTE3 ( 0x40000000 )
000094 e490     +LDI R25 , BYTE4 ( 0x40000000 )
                 	__GETD2N 0x40000000
000095 940e 0231 	CALL _pow
000097 940e 032e 	CALL __CFD1U
000099 2e9e      	MOV  R9,R30
                 ; 0000 004D       PORTB=result;
00009a ba98      	OUT  0x18,R9
                 ; 0000 004E        result+=(2*a*g);
00009b 91e0 0075 	LDS  R30,_a
00009d 0fee      	LSL  R30
00009e 2fae      	MOV  R26,R30
00009f 2de6      	MOV  R30,R6
0000a0 02ea      	MULS R30,R26
0000a1 01f0      	MOVW R30,R0
0000a2 0e9e      	ADD  R9,R30
                 ; 0000 004F         PORTB=result;
0000a3 ba98      	OUT  0x18,R9
                 ; 0000 0050           result+=g*g;
0000a4 2de6      	MOV  R30,R6
0000a5 2da6      	MOV  R26,R6
0000a6 02ea      	MULS R30,R26
0000a7 01f0      	MOVW R30,R0
0000a8 0e9e      	ADD  R9,R30
                 ; 0000 0051           PORTB=result;
0000a9 ba98      	OUT  0x18,R9
                 ; 0000 0052               a1=a;
0000aa 90a0 0075 	LDS  R10,_a
0000ac 24bb      	CLR  R11
                 ; 0000 0053               b1=b;
0000ad 90c0 0076 	LDS  R12,_b
0000af 24dd      	CLR  R13
                 ; 0000 0054             a1=(pow(a*b,0.5));
0000b0 91a0 0075 	LDS  R26,_a
0000b2 27bb      	CLR  R27
0000b3 91e0 0076 	LDS  R30,_b
0000b5 e0f0      	LDI  R31,0
0000b6 940e 04c3 	CALL __MULW12
0000b8 940e 0283 	CALL SUBOPT_0x0
0000ba 940e 04ea 	CALL __PUTPARD1
                +
0000bc e0a0     +LDI R26 , LOW ( 0x3F000000 )
0000bd e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0000be e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0000bf e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0000c0 940e 0231 	CALL _pow
0000c2 940e 0330 	CALL __CFD1
0000c4 015f      	MOVW R10,R30
                 ; 0000 0055 
                 ; 0000 0056           result-=a1;
0000c5 189a      	SUB  R9,R10
                 ; 0000 0057             PORTB=result;
0000c6 ba98      	OUT  0x18,R9
                 ; 0000 0058              delay_ms(250);
0000c7 efaa      	LDI  R26,LOW(250)
0000c8 e0b0      	LDI  R27,0
0000c9 940e 02d4 	CALL _delay_ms
                 ; 0000 0059 while (1)
                 _0x9:
                 ; 0000 005A 
                 ; 0000 005B       delay_ms(250);
0000cb efaa      	LDI  R26,LOW(250)
0000cc e0b0      	LDI  R27,0
0000cd 940e 02d4 	CALL _delay_ms
0000cf cffb      	RJMP _0x9
                 ; 0000 005D }
                 _0xC:
0000d0 cfff      	RJMP _0xC
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0000d1 940e 04ef 	CALL __PUTPARD2
0000d3 817b         ldd  r23,y+3
0000d4 816a         ldd  r22,y+2
0000d5 81f9         ldd  r31,y+1
0000d6 81e8         ld   r30,y
0000d7 fb77         bst  r23,7
0000d8 0f77         lsl  r23
0000d9 fd67         sbrc r22,7
0000da 6071         sbr  r23,1
0000db 2f97         mov  r25,r23
0000dc 579e         subi r25,0x7e
0000dd f081         breq __ftrunc0
0000de f078         brcs __ftrunc0
0000df 3198         cpi  r25,24
0000e0 f490         brsh __ftrunc1
0000e1 27aa         clr  r26
0000e2 27bb         clr  r27
0000e3 2788         clr  r24
                 __ftrunc2:
0000e4 9408         sec
0000e5 9587         ror  r24
0000e6 95b7         ror  r27
0000e7 95a7         ror  r26
0000e8 959a         dec  r25
0000e9 f7d1         brne __ftrunc2
0000ea 23ea         and  r30,r26
0000eb 23fb         and  r31,r27
0000ec 2368         and  r22,r24
0000ed c005         rjmp __ftrunc1
                 __ftrunc0:
0000ee 94e8         clt
0000ef 2777         clr  r23
0000f0 27ee         clr  r30
0000f1 27ff         clr  r31
0000f2 2766         clr  r22
                 __ftrunc1:
0000f3 776f         cbr  r22,0x80
0000f4 9576         lsr  r23
0000f5 f408         brcc __ftrunc3
0000f6 6860         sbr  r22,0x80
                 __ftrunc3:
0000f7 f977         bld  r23,7
0000f8 91a9         ld   r26,y+
0000f9 91b9         ld   r27,y+
0000fa 9189         ld   r24,y+
0000fb 9199         ld   r25,y+
0000fc 17ea         cp   r30,r26
0000fd 07fb         cpc  r31,r27
0000fe 0768         cpc  r22,r24
0000ff 0779         cpc  r23,r25
000100 fb97         bst  r25,7
000101 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000102 940e 04ef 	CALL __PUTPARD2
000104 940e 04e0 	CALL __GETD2S0
000106 940e 00d1 	CALL _ftrunc
000108 940e 04e5 	CALL __PUTD1S0
00010a f419          brne __floor1
                 __floor0:
00010b 940e 0288 	CALL SUBOPT_0x1
00010d c005      	RJMP _0x2080004
                 __floor1:
00010e f7e6          brtc __floor0
00010f 940e 0288 	CALL SUBOPT_0x1
000111 940e 028b 	CALL SUBOPT_0x2
                 _0x2080004:
000113 9624      	ADIW R28,4
000114 9508      	RET
                 ; .FEND
                 _log:
                 ; .FSTART _log
000115 940e 04ef 	CALL __PUTPARD2
000117 9724      	SBIW R28,4
000118 931a      	ST   -Y,R17
000119 930a      	ST   -Y,R16
00011a 940e 0292 	CALL SUBOPT_0x3
00011c 940e 051e 	CALL __CPD02
00011e f02c      	BRLT _0x200000C
                +
00011f efef     +LDI R30 , LOW ( 0xFF7FFFFF )
000120 efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
000121 e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
000122 ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
000123 c071      	RJMP _0x2080003
                 _0x200000C:
000124 940e 0297 	CALL SUBOPT_0x4
000126 940e 04ea 	CALL __PUTPARD1
000128 b7ad      	IN   R26,SPL
000129 b7be      	IN   R27,SPH
00012a 9711      	SBIW R26,1
00012b 931f      	PUSH R17
00012c 930f      	PUSH R16
00012d 940e 02de 	CALL _frexp
00012f 910f      	POP  R16
000130 911f      	POP  R17
000131 940e 029c 	CALL SUBOPT_0x5
000133 940e 0292 	CALL SUBOPT_0x3
                +
000135 efe3     +LDI R30 , LOW ( 0x3F3504F3 )
000136 e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
000137 e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
000138 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
000139 940e 0484 	CALL __CMPF12
00013b f440      	BRSH _0x200000D
00013c 940e 02a1 	CALL SUBOPT_0x6
00013e 940e 03a1 	CALL __ADDF12
000140 940e 029c 	CALL SUBOPT_0x5
                +
000142 5001     +SUBI R16 , LOW ( 1 )
000143 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x200000D:
000144 940e 0297 	CALL SUBOPT_0x4
000146 940e 028b 	CALL SUBOPT_0x2
000148 937f      	PUSH R23
000149 936f      	PUSH R22
00014a 93ff      	PUSH R31
00014b 93ef      	PUSH R30
00014c 940e 0297 	CALL SUBOPT_0x4
                +
00014e e0a0     +LDI R26 , LOW ( 0x3F800000 )
00014f e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000150 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000151 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000152 940e 03a1 	CALL __ADDF12
000154 91af      	POP  R26
000155 91bf      	POP  R27
000156 918f      	POP  R24
000157 919f      	POP  R25
000158 940e 043f 	CALL __DIVF21
00015a 940e 029c 	CALL SUBOPT_0x5
00015c 940e 02a1 	CALL SUBOPT_0x6
00015e 940e 02a3 	CALL SUBOPT_0x7
                +
000160 e2a6     +LDI R26 , LOW ( 0x3F654226 )
000161 e4b2     +LDI R27 , HIGH ( 0x3F654226 )
000162 e685     +LDI R24 , BYTE3 ( 0x3F654226 )
000163 e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
000164 940e 02aa 	CALL SUBOPT_0x8
                +
000166 e4ee     +LDI R30 , LOW ( 0x4054114E )
000167 e1f1     +LDI R31 , HIGH ( 0x4054114E )
000168 e564     +LDI R22 , BYTE3 ( 0x4054114E )
000169 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
00016a 940e 02af 	CALL SUBOPT_0x9
00016c 940e 0292 	CALL SUBOPT_0x3
00016e 940e 03f1 	CALL __MULF12
000170 937f      	PUSH R23
000171 936f      	PUSH R22
000172 93ff      	PUSH R31
000173 93ef      	PUSH R30
000174 940e 02b4 	CALL SUBOPT_0xA
                +
000176 e4ad     +LDI R26 , LOW ( 0x3FD4114D )
000177 e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
000178 ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
000179 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
00017a 940e 039a 	CALL __SUBF12
00017c 91af      	POP  R26
00017d 91bf      	POP  R27
00017e 918f      	POP  R24
00017f 919f      	POP  R25
000180 940e 043f 	CALL __DIVF21
000182 937f      	PUSH R23
000183 936f      	PUSH R22
000184 93ff      	PUSH R31
000185 93ef      	PUSH R30
000186 01f8      	MOVW R30,R16
000187 940e 0283 	CALL SUBOPT_0x0
                +
000189 e1a8     +LDI R26 , LOW ( 0x3F317218 )
00018a e7b2     +LDI R27 , HIGH ( 0x3F317218 )
00018b e381     +LDI R24 , BYTE3 ( 0x3F317218 )
00018c e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
00018d 940e 03f1 	CALL __MULF12
00018f 91af      	POP  R26
000190 91bf      	POP  R27
000191 918f      	POP  R24
000192 919f      	POP  R25
000193 940e 03a1 	CALL __ADDF12
                 _0x2080003:
000195 8119      	LDD  R17,Y+1
000196 8108      	LDD  R16,Y+0
000197 962a      	ADIW R28,10
000198 9508      	RET
                 ; .FEND
                 _exp:
                 ; .FSTART _exp
000199 940e 04ef 	CALL __PUTPARD2
00019b 9728      	SBIW R28,8
00019c 931a      	ST   -Y,R17
00019d 930a      	ST   -Y,R16
00019e 940e 02b9 	CALL SUBOPT_0xB
                +
0001a0 e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
0001a1 eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
0001a2 ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
0001a3 ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
0001a4 940e 0484 	CALL __CMPF12
0001a6 f418      	BRSH _0x200000F
0001a7 940e 02be 	CALL SUBOPT_0xC
0001a9 c083      	RJMP _0x2080002
                 _0x200000F:
                +
0001aa 85ea     +LDD R30 , Y + 10
0001ab 85fb     +LDD R31 , Y + 10 + 1
0001ac 856c     +LDD R22 , Y + 10 + 2
0001ad 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
0001ae 940e 051a 	CALL __CPD10
0001b0 f429      	BRNE _0x2000010
                +
0001b1 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0001b2 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0001b3 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0001b4 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0001b5 c077      	RJMP _0x2080002
                 _0x2000010:
0001b6 940e 02b9 	CALL SUBOPT_0xB
                +
0001b8 e1e8     +LDI R30 , LOW ( 0x42B17218 )
0001b9 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
0001ba eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
0001bb e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
0001bc 940e 0484 	CALL __CMPF12
0001be f009      	BREQ PC+2
0001bf f408      	BRCC PC+2
0001c0 c005      	RJMP _0x2000011
                +
0001c1 efef     +LDI R30 , LOW ( 0x7F7FFFFF )
0001c2 efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
0001c3 e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
0001c4 e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
0001c5 c067      	RJMP _0x2080002
                 _0x2000011:
0001c6 940e 02b9 	CALL SUBOPT_0xB
                +
0001c8 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
0001c9 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
0001ca eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
0001cb e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
0001cc 940e 03f1 	CALL __MULF12
                +
0001ce 87ea     +STD Y + 10 , R30
0001cf 87fb     +STD Y + 10 + 1 , R31
0001d0 876c     +STD Y + 10 + 2 , R22
0001d1 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
0001d2 940e 02b9 	CALL SUBOPT_0xB
0001d4 df2d      	RCALL _floor
0001d5 940e 0330 	CALL __CFD1
0001d7 018f      	MOVW R16,R30
0001d8 940e 02b9 	CALL SUBOPT_0xB
0001da 940e 0283 	CALL SUBOPT_0x0
0001dc 940e 02af 	CALL SUBOPT_0x9
0001de 01df      	MOVW R26,R30
0001df 01cb      	MOVW R24,R22
                +
0001e0 e0e0     +LDI R30 , LOW ( 0x3F000000 )
0001e1 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
0001e2 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
0001e3 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
0001e4 940e 02af 	CALL SUBOPT_0x9
0001e6 940e 029c 	CALL SUBOPT_0x5
0001e8 940e 02a1 	CALL SUBOPT_0x6
0001ea 940e 02a3 	CALL SUBOPT_0x7
                +
0001ec e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
0001ed e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
0001ee e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
0001ef e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
0001f0 940e 03f1 	CALL __MULF12
                +
0001f2 eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
0001f3 eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
0001f4 ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
0001f5 e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
0001f6 940e 03a1 	CALL __ADDF12
0001f8 940e 0292 	CALL SUBOPT_0x3
0001fa 940e 03f1 	CALL __MULF12
0001fc 940e 029c 	CALL SUBOPT_0x5
0001fe 940e 02b4 	CALL SUBOPT_0xA
                +
000200 e2a8     +LDI R26 , LOW ( 0x41A68D28 )
000201 e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
000202 ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
000203 e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
000204 940e 03a1 	CALL __ADDF12
                +
000206 83ea     +STD Y + 2 , R30
000207 83fb     +STD Y + 2 + 1 , R31
000208 836c     +STD Y + 2 + 2 , R22
000209 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
00020a 940e 0297 	CALL SUBOPT_0x4
                +
00020c 81aa     +LDD R26 , Y + 2
00020d 81bb     +LDD R27 , Y + 2 + 1
00020e 818c     +LDD R24 , Y + 2 + 2
00020f 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000210 940e 03a1 	CALL __ADDF12
                +
000212 efa3     +LDI R26 , LOW ( 0x3FB504F3 )
000213 e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
000214 eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
000215 e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
000216 940e 03f1 	CALL __MULF12
000218 937f      	PUSH R23
000219 936f      	PUSH R22
00021a 93ff      	PUSH R31
00021b 93ef      	PUSH R30
00021c 940e 0292 	CALL SUBOPT_0x3
00021e 940e 02b4 	CALL SUBOPT_0xA
000220 940e 039a 	CALL __SUBF12
000222 91af      	POP  R26
000223 91bf      	POP  R27
000224 918f      	POP  R24
000225 919f      	POP  R25
000226 940e 043f 	CALL __DIVF21
000228 940e 04ea 	CALL __PUTPARD1
00022a 01d8      	MOVW R26,R16
00022b 940e 02ef 	CALL _ldexp
                 _0x2080002:
00022d 8119      	LDD  R17,Y+1
00022e 8108      	LDD  R16,Y+0
00022f 962e      	ADIW R28,14
000230 9508      	RET
                 ; .FEND
                 _pow:
                 ; .FSTART _pow
000231 940e 04ef 	CALL __PUTPARD2
000233 9724      	SBIW R28,4
000234 940e 02c3 	CALL SUBOPT_0xD
000236 940e 051a 	CALL __CPD10
000238 f419      	BRNE _0x2000012
000239 940e 02be 	CALL SUBOPT_0xC
00023b c045      	RJMP _0x2080001
                 _0x2000012:
                +
00023c 85a8     +LDD R26 , Y + 8
00023d 85b9     +LDD R27 , Y + 8 + 1
00023e 858a     +LDD R24 , Y + 8 + 2
00023f 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000240 940e 051e 	CALL __CPD02
000242 f494      	BRGE _0x2000013
000243 940e 02c8 	CALL SUBOPT_0xE
000245 940e 051a 	CALL __CPD10
000247 f429      	BRNE _0x2000014
                +
000248 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000249 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
00024a e860     +LDI R22 , BYTE3 ( 0x3F800000 )
00024b e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
00024c c034      	RJMP _0x2080001
                 _0x2000014:
                +
00024d 85a8     +LDD R26 , Y + 8
00024e 85b9     +LDD R27 , Y + 8 + 1
00024f 858a     +LDD R24 , Y + 8 + 2
000250 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000251 940e 02cd 	CALL SUBOPT_0xF
000253 df45      	RCALL _exp
000254 c02c      	RJMP _0x2080001
                 _0x2000013:
000255 940e 02c8 	CALL SUBOPT_0xE
000257 01de      	MOVW R26,R28
000258 940e 0330 	CALL __CFD1
00025a 940e 04d6 	CALL __PUTDP1
00025c 940e 0288 	CALL SUBOPT_0x1
00025e 940e 0367 	CALL __CDF1
000260 01df      	MOVW R26,R30
000261 01cb      	MOVW R24,R22
000262 940e 02c8 	CALL SUBOPT_0xE
000264 940e 0524 	CALL __CPD12
000266 f019      	BREQ _0x2000015
000267 940e 02be 	CALL SUBOPT_0xC
000269 c017      	RJMP _0x2080001
                 _0x2000015:
00026a 940e 02c3 	CALL SUBOPT_0xD
00026c 940e 02fb 	CALL __ANEGF1
00026e 01df      	MOVW R26,R30
00026f 01cb      	MOVW R24,R22
000270 940e 02cd 	CALL SUBOPT_0xF
000272 df26      	RCALL _exp
                +
000273 87e8     +STD Y + 8 , R30
000274 87f9     +STD Y + 8 + 1 , R31
000275 876a     +STD Y + 8 + 2 , R22
000276 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
000277 81e8      	LD   R30,Y
000278 70e1      	ANDI R30,LOW(0x1)
000279 f419      	BRNE _0x2000016
00027a 940e 02c3 	CALL SUBOPT_0xD
00027c c004      	RJMP _0x2080001
                 _0x2000016:
00027d 940e 02c3 	CALL SUBOPT_0xD
00027f 940e 02fb 	CALL __ANEGF1
                 _0x2080001:
000281 962c      	ADIW R28,12
000282 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.ORG 0x75
                 _a:
000075           	.BYTE 0x1
                 
                 	.ORG 0x160
                 
                 	.ORG 0x76
                 _b:
000076           	.BYTE 0x1
                 
                 	.ORG 0x160
                 
                 	.ESEG
                 _y:
000000 19
000001 00        	.DB  0x19,0x0
                 
                 	.DSEG
                 __seed_G101:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000283 940e 04b6 	CALL __CWD1
000285 940e 0367 	CALL __CDF1
000287 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000288 940e 04db 	CALL __GETD1S0
00028a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
                +
00028b e0a0     +LDI R26 , LOW ( 0x3F800000 )
00028c e0b0     +LDI R27 , HIGH ( 0x3F800000 )
00028d e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00028e e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00028f 940e 039a 	CALL __SUBF12
000291 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3:
                +
000292 81ae     +LDD R26 , Y + 6
000293 81bf     +LDD R27 , Y + 6 + 1
000294 8588     +LDD R24 , Y + 6 + 2
000295 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000296 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
                +
000297 81ee     +LDD R30 , Y + 6
000298 81ff     +LDD R31 , Y + 6 + 1
000299 8568     +LDD R22 , Y + 6 + 2
00029a 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
00029b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
                +
00029c 83ee     +STD Y + 6 , R30
00029d 83ff     +STD Y + 6 + 1 , R31
00029e 8768     +STD Y + 6 + 2 , R22
00029f 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
0002a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0002a1 dff5      	RCALL SUBOPT_0x4
0002a2 cfef      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
0002a3 940e 03f1 	CALL __MULF12
                +
0002a5 83ea     +STD Y + 2 , R30
0002a6 83fb     +STD Y + 2 + 1 , R31
0002a7 836c     +STD Y + 2 + 2 , R22
0002a8 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0002a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0002aa 940e 03f1 	CALL __MULF12
0002ac 01df      	MOVW R26,R30
0002ad 01cb      	MOVW R24,R22
0002ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0002af 940e 04f4 	CALL __SWAPD12
0002b1 940e 039a 	CALL __SUBF12
0002b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
                +
0002b4 81ea     +LDD R30 , Y + 2
0002b5 81fb     +LDD R31 , Y + 2 + 1
0002b6 816c     +LDD R22 , Y + 2 + 2
0002b7 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0002b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
                +
0002b9 85aa     +LDD R26 , Y + 10
0002ba 85bb     +LDD R27 , Y + 10 + 1
0002bb 858c     +LDD R24 , Y + 10 + 2
0002bc 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
0002bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
                +
0002be e0e0     +LDI R30 , LOW ( 0x0 )
0002bf e0f0     +LDI R31 , HIGH ( 0x0 )
0002c0 e060     +LDI R22 , BYTE3 ( 0x0 )
0002c1 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0002c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
                +
0002c3 85e8     +LDD R30 , Y + 8
0002c4 85f9     +LDD R31 , Y + 8 + 1
0002c5 856a     +LDD R22 , Y + 8 + 2
0002c6 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
0002c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
                +
0002c8 81ec     +LDD R30 , Y + 4
0002c9 81fd     +LDD R31 , Y + 4 + 1
0002ca 816e     +LDD R22 , Y + 4 + 2
0002cb 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0002cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
0002cd 940e 0115 	CALL _log
                +
0002cf 81ac     +LDD R26 , Y + 4
0002d0 81bd     +LDD R27 , Y + 4 + 1
0002d1 818e     +LDD R24 , Y + 4 + 2
0002d2 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0002d3 cfd6      	RJMP SUBOPT_0x8
                 
                 
                 	.CSEG
                 _delay_ms:
0002d4 9610      	adiw r26,0
0002d5 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002d6 eb88     +LDI R24 , LOW ( 0xBB8 )
0002d7 e09b     +LDI R25 , HIGH ( 0xBB8 )
                +__DELAY_USW_LOOP :
0002d8 9701     +SBIW R24 , 1
0002d9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xBB8
0002da 95a8      	wdr
0002db 9711      	sbiw r26,1
0002dc f7c9      	brne __delay_ms0
                 __delay_ms1:
0002dd 9508      	ret
                 
                 _frexp:
0002de 91e9      	LD   R30,Y+
0002df 91f9      	LD   R31,Y+
0002e0 9169      	LD   R22,Y+
0002e1 9179      	LD   R23,Y+
0002e2 fb77      	BST  R23,7
0002e3 0f66      	LSL  R22
0002e4 1f77      	ROL  R23
0002e5 2788      	CLR  R24
0002e6 577e      	SUBI R23,0x7E
0002e7 0b88      	SBC  R24,R24
0002e8 937d      	ST   X+,R23
0002e9 938c      	ST   X,R24
0002ea e77e      	LDI  R23,0x7E
0002eb 9576      	LSR  R23
0002ec 9567      	ROR  R22
0002ed f06e      	BRTS __ANEGF1
0002ee 9508      	RET
                 
                 _ldexp:
0002ef 91e9      	LD   R30,Y+
0002f0 91f9      	LD   R31,Y+
0002f1 9169      	LD   R22,Y+
0002f2 9179      	LD   R23,Y+
0002f3 fb77      	BST  R23,7
0002f4 0f66      	LSL  R22
0002f5 1f77      	ROL  R23
0002f6 0f7a      	ADD  R23,R26
0002f7 9576      	LSR  R23
0002f8 9567      	ROR  R22
0002f9 f00e      	BRTS __ANEGF1
0002fa 9508      	RET
                 
                 __ANEGF1:
0002fb 9730      	SBIW R30,0
0002fc 4060      	SBCI R22,0
0002fd 4070      	SBCI R23,0
0002fe f009      	BREQ __ANEGF10
0002ff 5870      	SUBI R23,0x80
                 __ANEGF10:
000300 9508      	RET
                 
                 __ROUND_REPACK:
000301 2355      	TST  R21
000302 f442      	BRPL __REPACK
000303 3850      	CPI  R21,0x80
000304 f411      	BRNE __ROUND_REPACK0
000305 ffe0      	SBRS R30,0
000306 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000307 9631      	ADIW R30,1
000308 1f69      	ADC  R22,R25
000309 1f79      	ADC  R23,R25
00030a f06b      	BRVS __REPACK1
                 
                 __REPACK:
00030b e850      	LDI  R21,0x80
00030c 2757      	EOR  R21,R23
00030d f411      	BRNE __REPACK0
00030e 935f      	PUSH R21
00030f c0cf      	RJMP __ZERORES
                 __REPACK0:
000310 3f5f      	CPI  R21,0xFF
000311 f031      	BREQ __REPACK1
000312 0f66      	LSL  R22
000313 0c00      	LSL  R0
000314 9557      	ROR  R21
000315 9567      	ROR  R22
000316 2f75      	MOV  R23,R21
000317 9508      	RET
                 __REPACK1:
000318 935f      	PUSH R21
000319 2000      	TST  R0
00031a f00a      	BRMI __REPACK2
00031b c0cf      	RJMP __MAXRES
                 __REPACK2:
00031c c0c8      	RJMP __MINRES
                 
                 __UNPACK:
00031d e850      	LDI  R21,0x80
00031e 2e19      	MOV  R1,R25
00031f 2215      	AND  R1,R21
000320 0f88      	LSL  R24
000321 1f99      	ROL  R25
000322 2795      	EOR  R25,R21
000323 0f55      	LSL  R21
000324 9587      	ROR  R24
                 
                 __UNPACK1:
000325 e850      	LDI  R21,0x80
000326 2e07      	MOV  R0,R23
000327 2205      	AND  R0,R21
000328 0f66      	LSL  R22
000329 1f77      	ROL  R23
00032a 2775      	EOR  R23,R21
00032b 0f55      	LSL  R21
00032c 9567      	ROR  R22
00032d 9508      	RET
                 
                 __CFD1U:
00032e 9468      	SET
00032f c001      	RJMP __CFD1U0
                 __CFD1:
000330 94e8      	CLT
                 __CFD1U0:
000331 935f      	PUSH R21
000332 dff2      	RCALL __UNPACK1
000333 3870      	CPI  R23,0x80
000334 f018      	BRLO __CFD10
000335 3f7f      	CPI  R23,0xFF
000336 f408      	BRCC __CFD10
000337 c0a7      	RJMP __ZERORES
                 __CFD10:
000338 e156      	LDI  R21,22
000339 1b57      	SUB  R21,R23
00033a f4aa      	BRPL __CFD11
00033b 9551      	NEG  R21
00033c 3058      	CPI  R21,8
00033d f40e      	BRTC __CFD19
00033e 3059      	CPI  R21,9
                 __CFD19:
00033f f030      	BRLO __CFD17
000340 efef      	SER  R30
000341 efff      	SER  R31
000342 ef6f      	SER  R22
000343 e77f      	LDI  R23,0x7F
000344 f977      	BLD  R23,7
000345 c01a      	RJMP __CFD15
                 __CFD17:
000346 2777      	CLR  R23
000347 2355      	TST  R21
000348 f0b9      	BREQ __CFD15
                 __CFD18:
000349 0fee      	LSL  R30
00034a 1fff      	ROL  R31
00034b 1f66      	ROL  R22
00034c 1f77      	ROL  R23
00034d 955a      	DEC  R21
00034e f7d1      	BRNE __CFD18
00034f c010      	RJMP __CFD15
                 __CFD11:
000350 2777      	CLR  R23
                 __CFD12:
000351 3058      	CPI  R21,8
000352 f028      	BRLO __CFD13
000353 2fef      	MOV  R30,R31
000354 2ff6      	MOV  R31,R22
000355 2f67      	MOV  R22,R23
000356 5058      	SUBI R21,8
000357 cff9      	RJMP __CFD12
                 __CFD13:
000358 2355      	TST  R21
000359 f031      	BREQ __CFD15
                 __CFD14:
00035a 9576      	LSR  R23
00035b 9567      	ROR  R22
00035c 95f7      	ROR  R31
00035d 95e7      	ROR  R30
00035e 955a      	DEC  R21
00035f f7d1      	BRNE __CFD14
                 __CFD15:
000360 2000      	TST  R0
000361 f40a      	BRPL __CFD16
000362 d145      	RCALL __ANEGD1
                 __CFD16:
000363 915f      	POP  R21
000364 9508      	RET
                 
                 __CDF1U:
000365 9468      	SET
000366 c001      	RJMP __CDF1U0
                 __CDF1:
000367 94e8      	CLT
                 __CDF1U0:
000368 9730      	SBIW R30,0
000369 4060      	SBCI R22,0
00036a 4070      	SBCI R23,0
00036b f0b1      	BREQ __CDF10
00036c 2400      	CLR  R0
00036d f026      	BRTS __CDF11
00036e 2377      	TST  R23
00036f f412      	BRPL __CDF11
000370 9400      	COM  R0
000371 d136      	RCALL __ANEGD1
                 __CDF11:
000372 2e17      	MOV  R1,R23
000373 e17e      	LDI  R23,30
000374 2011      	TST  R1
                 __CDF12:
000375 f032      	BRMI __CDF13
000376 957a      	DEC  R23
000377 0fee      	LSL  R30
000378 1fff      	ROL  R31
000379 1f66      	ROL  R22
00037a 1c11      	ROL  R1
00037b cff9      	RJMP __CDF12
                 __CDF13:
00037c 2fef      	MOV  R30,R31
00037d 2ff6      	MOV  R31,R22
00037e 2d61      	MOV  R22,R1
00037f 935f      	PUSH R21
000380 df8a      	RCALL __REPACK
000381 915f      	POP  R21
                 __CDF10:
000382 9508      	RET
                 
                 __SWAPACC:
000383 934f      	PUSH R20
000384 01af      	MOVW R20,R30
000385 01fd      	MOVW R30,R26
000386 01da      	MOVW R26,R20
000387 01ab      	MOVW R20,R22
000388 01bc      	MOVW R22,R24
000389 01ca      	MOVW R24,R20
00038a 2d40      	MOV  R20,R0
00038b 2c01      	MOV  R0,R1
00038c 2e14      	MOV  R1,R20
00038d 914f      	POP  R20
00038e 9508      	RET
                 
                 __UADD12:
00038f 0fea      	ADD  R30,R26
000390 1ffb      	ADC  R31,R27
000391 1f68      	ADC  R22,R24
000392 9508      	RET
                 
                 __NEGMAN1:
000393 95e0      	COM  R30
000394 95f0      	COM  R31
000395 9560      	COM  R22
000396 5fef      	SUBI R30,-1
000397 4fff      	SBCI R31,-1
000398 4f6f      	SBCI R22,-1
000399 9508      	RET
                 
                 __SUBF12:
00039a 935f      	PUSH R21
00039b df81      	RCALL __UNPACK
00039c 3890      	CPI  R25,0x80
00039d f171      	BREQ __ADDF129
00039e e850      	LDI  R21,0x80
00039f 2615      	EOR  R1,R21
                 
0003a0 c004      	RJMP __ADDF120
                 
                 __ADDF12:
0003a1 935f      	PUSH R21
0003a2 df7a      	RCALL __UNPACK
0003a3 3890      	CPI  R25,0x80
0003a4 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0003a5 3870      	CPI  R23,0x80
0003a6 f121      	BREQ __ADDF128
                 __ADDF121:
0003a7 2f57      	MOV  R21,R23
0003a8 1b59      	SUB  R21,R25
0003a9 f12b      	BRVS __ADDF1211
0003aa f412      	BRPL __ADDF122
0003ab dfd7      	RCALL __SWAPACC
0003ac cffa      	RJMP __ADDF121
                 __ADDF122:
0003ad 3158      	CPI  R21,24
0003ae f018      	BRLO __ADDF123
0003af 27aa      	CLR  R26
0003b0 27bb      	CLR  R27
0003b1 2788      	CLR  R24
                 __ADDF123:
0003b2 3058      	CPI  R21,8
0003b3 f028      	BRLO __ADDF124
0003b4 2fab      	MOV  R26,R27
0003b5 2fb8      	MOV  R27,R24
0003b6 2788      	CLR  R24
0003b7 5058      	SUBI R21,8
0003b8 cff9      	RJMP __ADDF123
                 __ADDF124:
0003b9 2355      	TST  R21
0003ba f029      	BREQ __ADDF126
                 __ADDF125:
0003bb 9586      	LSR  R24
0003bc 95b7      	ROR  R27
0003bd 95a7      	ROR  R26
0003be 955a      	DEC  R21
0003bf f7d9      	BRNE __ADDF125
                 __ADDF126:
0003c0 2d50      	MOV  R21,R0
0003c1 2551      	EOR  R21,R1
0003c2 f072      	BRMI __ADDF127
0003c3 dfcb      	RCALL __UADD12
0003c4 f438      	BRCC __ADDF129
0003c5 9567      	ROR  R22
0003c6 95f7      	ROR  R31
0003c7 95e7      	ROR  R30
0003c8 9573      	INC  R23
0003c9 f413      	BRVC __ADDF129
0003ca c020      	RJMP __MAXRES
                 __ADDF128:
0003cb dfb7      	RCALL __SWAPACC
                 __ADDF129:
0003cc df3e      	RCALL __REPACK
0003cd 915f      	POP  R21
0003ce 9508      	RET
                 __ADDF1211:
0003cf f7d8      	BRCC __ADDF128
0003d0 cffb      	RJMP __ADDF129
                 __ADDF127:
0003d1 1bea      	SUB  R30,R26
0003d2 0bfb      	SBC  R31,R27
0003d3 0b68      	SBC  R22,R24
0003d4 f051      	BREQ __ZERORES
0003d5 f410      	BRCC __ADDF1210
0003d6 9400      	COM  R0
0003d7 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0003d8 2366      	TST  R22
0003d9 f392      	BRMI __ADDF129
0003da 0fee      	LSL  R30
0003db 1fff      	ROL  R31
0003dc 1f66      	ROL  R22
0003dd 957a      	DEC  R23
0003de f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0003df 27ee      	CLR  R30
0003e0 27ff      	CLR  R31
0003e1 2766      	CLR  R22
0003e2 2777      	CLR  R23
0003e3 915f      	POP  R21
0003e4 9508      	RET
                 
                 __MINRES:
0003e5 efef      	SER  R30
0003e6 efff      	SER  R31
0003e7 e76f      	LDI  R22,0x7F
0003e8 ef7f      	SER  R23
0003e9 915f      	POP  R21
0003ea 9508      	RET
                 
                 __MAXRES:
0003eb efef      	SER  R30
0003ec efff      	SER  R31
0003ed e76f      	LDI  R22,0x7F
0003ee e77f      	LDI  R23,0x7F
0003ef 915f      	POP  R21
0003f0 9508      	RET
                 
                 __MULF12:
0003f1 935f      	PUSH R21
0003f2 df2a      	RCALL __UNPACK
0003f3 3870      	CPI  R23,0x80
0003f4 f351      	BREQ __ZERORES
0003f5 3890      	CPI  R25,0x80
0003f6 f341      	BREQ __ZERORES
0003f7 2401      	EOR  R0,R1
0003f8 9408      	SEC
0003f9 1f79      	ADC  R23,R25
0003fa f423      	BRVC __MULF124
0003fb f31c      	BRLT __ZERORES
                 __MULF125:
0003fc 2000      	TST  R0
0003fd f33a      	BRMI __MINRES
0003fe cfec      	RJMP __MAXRES
                 __MULF124:
0003ff 920f      	PUSH R0
000400 931f      	PUSH R17
000401 932f      	PUSH R18
000402 933f      	PUSH R19
000403 934f      	PUSH R20
000404 2711      	CLR  R17
000405 2722      	CLR  R18
000406 2799      	CLR  R25
000407 9f68      	MUL  R22,R24
000408 01a0      	MOVW R20,R0
000409 9f8f      	MUL  R24,R31
00040a 2d30      	MOV  R19,R0
00040b 0d41      	ADD  R20,R1
00040c 1f59      	ADC  R21,R25
00040d 9f6b      	MUL  R22,R27
00040e 0d30      	ADD  R19,R0
00040f 1d41      	ADC  R20,R1
000410 1f59      	ADC  R21,R25
000411 9f8e      	MUL  R24,R30
000412 d027      	RCALL __MULF126
000413 9fbf      	MUL  R27,R31
000414 d025      	RCALL __MULF126
000415 9f6a      	MUL  R22,R26
000416 d023      	RCALL __MULF126
000417 9fbe      	MUL  R27,R30
000418 d01d      	RCALL __MULF127
000419 9faf      	MUL  R26,R31
00041a d01b      	RCALL __MULF127
00041b 9fae      	MUL  R26,R30
00041c 0d11      	ADD  R17,R1
00041d 1f29      	ADC  R18,R25
00041e 1f39      	ADC  R19,R25
00041f 1f49      	ADC  R20,R25
000420 1f59      	ADC  R21,R25
000421 2fe3      	MOV  R30,R19
000422 2ff4      	MOV  R31,R20
000423 2f65      	MOV  R22,R21
000424 2f52      	MOV  R21,R18
000425 914f      	POP  R20
000426 913f      	POP  R19
000427 912f      	POP  R18
000428 911f      	POP  R17
000429 900f      	POP  R0
00042a 2366      	TST  R22
00042b f02a      	BRMI __MULF122
00042c 0f55      	LSL  R21
00042d 1fee      	ROL  R30
00042e 1fff      	ROL  R31
00042f 1f66      	ROL  R22
000430 c002      	RJMP __MULF123
                 __MULF122:
000431 9573      	INC  R23
000432 f24b      	BRVS __MULF125
                 __MULF123:
000433 decd      	RCALL __ROUND_REPACK
000434 915f      	POP  R21
000435 9508      	RET
                 
                 __MULF127:
000436 0d10      	ADD  R17,R0
000437 1d21      	ADC  R18,R1
000438 1f39      	ADC  R19,R25
000439 c002      	RJMP __MULF128
                 __MULF126:
00043a 0d20      	ADD  R18,R0
00043b 1d31      	ADC  R19,R1
                 __MULF128:
00043c 1f49      	ADC  R20,R25
00043d 1f59      	ADC  R21,R25
00043e 9508      	RET
                 
                 __DIVF21:
00043f 935f      	PUSH R21
000440 dedc      	RCALL __UNPACK
000441 3870      	CPI  R23,0x80
000442 f421      	BRNE __DIVF210
000443 2011      	TST  R1
                 __DIVF211:
000444 f40a      	BRPL __DIVF219
000445 cf9f      	RJMP __MINRES
                 __DIVF219:
000446 cfa4      	RJMP __MAXRES
                 __DIVF210:
000447 3890      	CPI  R25,0x80
000448 f409      	BRNE __DIVF218
                 __DIVF217:
000449 cf95      	RJMP __ZERORES
                 __DIVF218:
00044a 2401      	EOR  R0,R1
00044b 9408      	SEC
00044c 0b97      	SBC  R25,R23
00044d f41b      	BRVC __DIVF216
00044e f3d4      	BRLT __DIVF217
00044f 2000      	TST  R0
000450 cff3      	RJMP __DIVF211
                 __DIVF216:
000451 2f79      	MOV  R23,R25
000452 931f      	PUSH R17
000453 932f      	PUSH R18
000454 933f      	PUSH R19
000455 934f      	PUSH R20
000456 2411      	CLR  R1
000457 2711      	CLR  R17
000458 2722      	CLR  R18
000459 2733      	CLR  R19
00045a 2744      	CLR  R20
00045b 2755      	CLR  R21
00045c e290      	LDI  R25,32
                 __DIVF212:
00045d 17ae      	CP   R26,R30
00045e 07bf      	CPC  R27,R31
00045f 0786      	CPC  R24,R22
000460 0741      	CPC  R20,R17
000461 f030      	BRLO __DIVF213
000462 1bae      	SUB  R26,R30
000463 0bbf      	SBC  R27,R31
000464 0b86      	SBC  R24,R22
000465 0b41      	SBC  R20,R17
000466 9408      	SEC
000467 c001      	RJMP __DIVF214
                 __DIVF213:
000468 9488      	CLC
                 __DIVF214:
000469 1f55      	ROL  R21
00046a 1f22      	ROL  R18
00046b 1f33      	ROL  R19
00046c 1c11      	ROL  R1
00046d 1faa      	ROL  R26
00046e 1fbb      	ROL  R27
00046f 1f88      	ROL  R24
000470 1f44      	ROL  R20
000471 959a      	DEC  R25
000472 f751      	BRNE __DIVF212
000473 01f9      	MOVW R30,R18
000474 2d61      	MOV  R22,R1
000475 914f      	POP  R20
000476 913f      	POP  R19
000477 912f      	POP  R18
000478 911f      	POP  R17
000479 2366      	TST  R22
00047a f032      	BRMI __DIVF215
00047b 0f55      	LSL  R21
00047c 1fee      	ROL  R30
00047d 1fff      	ROL  R31
00047e 1f66      	ROL  R22
00047f 957a      	DEC  R23
000480 f243      	BRVS __DIVF217
                 __DIVF215:
000481 de7f      	RCALL __ROUND_REPACK
000482 915f      	POP  R21
000483 9508      	RET
                 
                 __CMPF12:
000484 2399      	TST  R25
000485 f09a      	BRMI __CMPF120
000486 2377      	TST  R23
000487 f042      	BRMI __CMPF121
000488 1797      	CP   R25,R23
000489 f048      	BRLO __CMPF122
00048a f429      	BRNE __CMPF121
00048b 17ae      	CP   R26,R30
00048c 07bf      	CPC  R27,R31
00048d 0786      	CPC  R24,R22
00048e f020      	BRLO __CMPF122
00048f f031      	BREQ __CMPF123
                 __CMPF121:
000490 9498      	CLZ
000491 9488      	CLC
000492 9508      	RET
                 __CMPF122:
000493 9498      	CLZ
000494 9408      	SEC
000495 9508      	RET
                 __CMPF123:
000496 9418      	SEZ
000497 9488      	CLC
000498 9508      	RET
                 __CMPF120:
000499 2377      	TST  R23
00049a f7c2      	BRPL __CMPF122
00049b 1797      	CP   R25,R23
00049c f398      	BRLO __CMPF121
00049d f7a9      	BRNE __CMPF122
00049e 17ea      	CP   R30,R26
00049f 07fb      	CPC  R31,R27
0004a0 0768      	CPC  R22,R24
0004a1 f388      	BRLO __CMPF122
0004a2 f399      	BREQ __CMPF123
0004a3 cfec      	RJMP __CMPF121
                 
                 __ANEGW1:
0004a4 95f1      	NEG  R31
0004a5 95e1      	NEG  R30
0004a6 40f0      	SBCI R31,0
0004a7 9508      	RET
                 
                 __ANEGD1:
0004a8 95f0      	COM  R31
0004a9 9560      	COM  R22
0004aa 9570      	COM  R23
0004ab 95e1      	NEG  R30
0004ac 4fff      	SBCI R31,-1
0004ad 4f6f      	SBCI R22,-1
0004ae 4f7f      	SBCI R23,-1
0004af 9508      	RET
                 
                 __CBD1:
0004b0 2ffe      	MOV  R31,R30
0004b1 0fff      	ADD  R31,R31
0004b2 0bff      	SBC  R31,R31
0004b3 2f6f      	MOV  R22,R31
0004b4 2f7f      	MOV  R23,R31
0004b5 9508      	RET
                 
                 __CWD1:
0004b6 2f6f      	MOV  R22,R31
0004b7 0f66      	ADD  R22,R22
0004b8 0b66      	SBC  R22,R22
0004b9 2f76      	MOV  R23,R22
0004ba 9508      	RET
                 
                 __MULW12U:
0004bb 9ffa      	MUL  R31,R26
0004bc 2df0      	MOV  R31,R0
0004bd 9feb      	MUL  R30,R27
0004be 0df0      	ADD  R31,R0
0004bf 9fea      	MUL  R30,R26
0004c0 2de0      	MOV  R30,R0
0004c1 0df1      	ADD  R31,R1
0004c2 9508      	RET
                 
                 __MULW12:
0004c3 d004      	RCALL __CHKSIGNW
0004c4 dff6      	RCALL __MULW12U
0004c5 f40e      	BRTC __MULW121
0004c6 dfdd      	RCALL __ANEGW1
                 __MULW121:
0004c7 9508      	RET
                 
                 __CHKSIGNW:
0004c8 94e8      	CLT
0004c9 fff7      	SBRS R31,7
0004ca c002      	RJMP __CHKSW1
0004cb dfd8      	RCALL __ANEGW1
0004cc 9468      	SET
                 __CHKSW1:
0004cd ffb7      	SBRS R27,7
0004ce c006      	RJMP __CHKSW2
0004cf 95a0      	COM  R26
0004d0 95b0      	COM  R27
0004d1 9611      	ADIW R26,1
0004d2 f800      	BLD  R0,0
0004d3 9403      	INC  R0
0004d4 fa00      	BST  R0,0
                 __CHKSW2:
0004d5 9508      	RET
                 
                 __PUTDP1:
0004d6 93ed      	ST   X+,R30
0004d7 93fd      	ST   X+,R31
0004d8 936d      	ST   X+,R22
0004d9 937c      	ST   X,R23
0004da 9508      	RET
                 
                 __GETD1S0:
0004db 81e8      	LD   R30,Y
0004dc 81f9      	LDD  R31,Y+1
0004dd 816a      	LDD  R22,Y+2
0004de 817b      	LDD  R23,Y+3
0004df 9508      	RET
                 
                 __GETD2S0:
0004e0 81a8      	LD   R26,Y
0004e1 81b9      	LDD  R27,Y+1
0004e2 818a      	LDD  R24,Y+2
0004e3 819b      	LDD  R25,Y+3
0004e4 9508      	RET
                 
                 __PUTD1S0:
0004e5 83e8      	ST   Y,R30
0004e6 83f9      	STD  Y+1,R31
0004e7 836a      	STD  Y+2,R22
0004e8 837b      	STD  Y+3,R23
0004e9 9508      	RET
                 
                 __PUTPARD1:
0004ea 937a      	ST   -Y,R23
0004eb 936a      	ST   -Y,R22
0004ec 93fa      	ST   -Y,R31
0004ed 93ea      	ST   -Y,R30
0004ee 9508      	RET
                 
                 __PUTPARD2:
0004ef 939a      	ST   -Y,R25
0004f0 938a      	ST   -Y,R24
0004f1 93ba      	ST   -Y,R27
0004f2 93aa      	ST   -Y,R26
0004f3 9508      	RET
                 
                 __SWAPD12:
0004f4 2e18      	MOV  R1,R24
0004f5 2f86      	MOV  R24,R22
0004f6 2d61      	MOV  R22,R1
0004f7 2e19      	MOV  R1,R25
0004f8 2f97      	MOV  R25,R23
0004f9 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0004fa 2e1b      	MOV  R1,R27
0004fb 2fbf      	MOV  R27,R31
0004fc 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0004fd 2e1a      	MOV  R1,R26
0004fe 2fae      	MOV  R26,R30
0004ff 2de1      	MOV  R30,R1
000500 9508      	RET
                 
                 __EEPROMWRW:
000501 d007      	RCALL __EEPROMWRB
000502 9611      	ADIW R26,1
000503 93ef      	PUSH R30
000504 2fef      	MOV  R30,R31
000505 d003      	RCALL __EEPROMWRB
000506 91ef      	POP  R30
000507 9711      	SBIW R26,1
000508 9508      	RET
                 
                 __EEPROMWRB:
000509 9be1      	SBIS EECR,EEWE
00050a c002      	RJMP __EEPROMWRB1
00050b 95a8      	WDR
00050c cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
00050d b79f      	IN   R25,SREG
00050e 94f8      	CLI
00050f bbae      	OUT  EEARL,R26
000510 bbbf      	OUT  EEARH,R27
000511 9ae0      	SBI  EECR,EERE
000512 b38d      	IN   R24,EEDR
000513 17e8      	CP   R30,R24
000514 f019      	BREQ __EEPROMWRB0
000515 bbed      	OUT  EEDR,R30
000516 9ae2      	SBI  EECR,EEMWE
000517 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000518 bf9f      	OUT  SREG,R25
000519 9508      	RET
                 
                 __CPD10:
00051a 9730      	SBIW R30,0
00051b 4060      	SBCI R22,0
00051c 4070      	SBCI R23,0
00051d 9508      	RET
                 
                 __CPD02:
00051e 2400      	CLR  R0
00051f 160a      	CP   R0,R26
000520 060b      	CPC  R0,R27
000521 0608      	CPC  R0,R24
000522 0609      	CPC  R0,R25
000523 9508      	RET
                 
                 __CPD12:
000524 17ea      	CP   R30,R26
000525 07fb      	CPC  R31,R27
000526 0768      	CPC  R22,R24
000527 0779      	CPC  R23,R25
000528 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  39 r1 :  31 r2 :   0 r3 :   0 r4 :   1 r5 :   1 r6 :   4 r7 :   1 
r8 :   0 r9 :   8 r10:   3 r11:   1 r12:   1 r13:   1 r14:   0 r15:   0 
r16:  10 r17:  17 r18:  12 r19:  12 r20:  22 r21:  63 r22: 102 r23: 100 
r24:  69 r25:  67 r26:  76 r27:  57 r28:   9 r29:   1 r30: 149 r31:  89 
x  :   9 y  : 109 z  :   7 
Registers used: 30 out of 35 (85.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :  13 
adiw  :   8 and   :   5 andi  :   1 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   1 break :   0 breq  :  20 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   3 brmi  :   9 brne  :  21 brpl  :   7 brsh  :   3 brtc  :   3 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   5 call  : 115 
cbi   :   0 cbr   :   1 clc   :   3 clh   :   0 cli   :   2 cln   :   0 
clr   :  37 cls   :   0 clt   :   4 clv   :   0 clz   :   2 com   :  10 
cp    :   9 cpc   :  16 cpi   :  17 cpse  :   0 dec   :   9 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   3 jmp   :  22 ld    :  16 ldd   :  57 ldi   : 136 
lds   :   6 lpm   :   7 lsl   :  15 lsr   :   5 mov   :  54 movw  :  26 
mul   :  12 muls  :   2 mulsu :   0 neg   :   4 nop   :   0 or    :   0 
ori   :   1 out   :  22 pop   :  37 push  :  37 rcall :  30 ret   :  59 
reti  :   1 rjmp  :  46 rol   :  26 ror   :  17 sbc   :   9 sbci  :  13 
sbi   :   3 sbic  :   0 sbis  :   1 sbiw  :  13 sbr   :   2 sbrc  :   1 
sbrs  :   3 sec   :   5 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  22 std   :  23 sts   :   2 sub   :   5 subi  :   7 swap  :   0 
tst   :  17 wdr   :   2 
Instructions used: 79 out of 116 (68.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a52   2622     20   2642   16384  16.1%
[.dseg] 0x000060 0x000164      0      6      6    1024   0.6%
[.eseg] 0x000000 0x000002      0      2      2     512   0.4%

Assembly complete, 0 errors, 11 warnings
