
AVRASM ver. 2.1.30  D:\02_PROJECTS(Proteus7)\Counter(Ñ)_INT_7SEG_CÑ_mpx\Debug\List\Counter_INT.asm Sat Apr 25 19:47:32 2020

D:\02_PROJECTS(Proteus7)\Counter(Ñ)_INT_7SEG_CÑ_mpx\Debug\List\Counter_INT.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\02_PROJECTS(Proteus7)\Counter(Ñ)_INT_7SEG_CÑ_mpx\Debug\List\Counter_INT.asm(1089): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 12,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _counter=R4
                 	.DEF _counter_msb=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0037 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0064 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _GRAPH_HEX:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f
00002f 7c77
000030 5e39
000031 7179      	.DB  0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000032 0000      	.DB  0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000033 0002      	.DW  0x02
000034 0004      	.DW  0x04
000035 0064      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000036 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000037 94f8      	CLI
000038 27ee      	CLR  R30
000039 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003a e0f1      	LDI  R31,1
00003b bffb      	OUT  GICR,R31
00003c bfeb      	OUT  GICR,R30
00003d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003e e08d      	LDI  R24,(14-2)+1
00003f e0a2      	LDI  R26,2
000040 27bb      	CLR  R27
                 __CLEAR_REG:
000041 93ed      	ST   X+,R30
000042 958a      	DEC  R24
000043 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000044 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000045 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000046 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000047 93ed      	ST   X+,R30
000048 9701      	SBIW R24,1
000049 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004a e6e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004c 9185      	LPM  R24,Z+
00004d 9195      	LPM  R25,Z+
00004e 9700      	SBIW R24,0
00004f f061      	BREQ __GLOBAL_INI_END
000050 91a5      	LPM  R26,Z+
000051 91b5      	LPM  R27,Z+
000052 9005      	LPM  R0,Z+
000053 9015      	LPM  R1,Z+
000054 01bf      	MOVW R22,R30
000055 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000056 9005      	LPM  R0,Z+
000057 920d      	ST   X+,R0
000058 9701      	SBIW R24,1
000059 f7e1      	BRNE __GLOBAL_INI_LOOP
00005a 01fb      	MOVW R30,R22
00005b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005d bfed      	OUT  SPL,R30
00005e e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000060 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000061 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000062 940c 00a7 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Chip type               : ATmega16
                 ;AVR Core Clock frequency: 12,000000 MHz
                 ;*******************************************************/
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;// Declare your global variables here
                 ;//áèáëèîòåêà ãðàôèêè 16 øåñòíàäöàòåðè÷íûõ öèôð (çíàêîãåíåðàòîð)
                 ;//////////////////////////0////1////2////3////4////5////6////7////8////9////A////B////C////D////E////F///
                 ;flash char GRAPH_HEX[16]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7C,0x39,0x5E,0x79,0x71};
                 ;unsigned int counter=0;     //ñ÷¸ò÷èê ñîáûòèé (êëèêîâ êíîïêè)
                 ;//ìàññèâ äëÿ öèôð ÷åòûðåõðàçðÿäíîãî øåñòíàäöàòåðè÷íîãî ÷èñëà
                 ;unsigned char DIGITS[4]={0,0,0,0};
                 ;// External Interrupt 1 service routine Îáðàáîò÷èê âíåøíåãî ïðåðûâàíèÿ INT1
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0010 {
                 
                 	.CSEG
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000064 920a      	ST   -Y,R0
000065 921a      	ST   -Y,R1
000066 92fa      	ST   -Y,R15
000067 936a      	ST   -Y,R22
000068 937a      	ST   -Y,R23
000069 938a      	ST   -Y,R24
00006a 939a      	ST   -Y,R25
00006b 93aa      	ST   -Y,R26
00006c 93ba      	ST   -Y,R27
00006d 93ea      	ST   -Y,R30
00006e 93fa      	ST   -Y,R31
00006f b7ef      	IN   R30,SREG
000070 93ea      	ST   -Y,R30
                 ; 0000 0011 // Place your code here
                 ; 0000 0012 int i;
                 ; 0000 0013 delay_ms(3);                //àíòèäðåáåçãîâàÿ çàäåðæêà
000071 931a      	ST   -Y,R17
000072 930a      	ST   -Y,R16
                 ;	i -> R16,R17
000073 e0a3      	LDI  R26,LOW(3)
000074 e0b0      	LDI  R27,0
000075 940e 00dc 	CALL _delay_ms
                 ; 0000 0014 counter++;                  //èíêðåìåíò ñ÷¸ò÷èêà
000077 01f2      	MOVW R30,R4
000078 9631      	ADIW R30,1
000079 012f      	MOVW R4,R30
                 ; 0000 0015 //Íàõîæäåíèå âñåõ öèôð øåñòíàäöàòåðè÷íîãî ÷èñëà è çàïèñü èõ â ìàññèâ DIGITS[4], íà÷èíàÿ ñî ñòàðøåé
                 ; 0000 0016 for (i=0;i<4;i++)
                +
00007a e000     +LDI R16 , LOW ( 0 )
00007b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4:
                +
00007c 3004     +CPI R16 , LOW ( 4 )
00007d e0e0     +LDI R30 , HIGH ( 4 )
00007e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
00007f f4a4      	BRGE _0x5
                 ; 0000 0017     {
                 ; 0000 0018     DIGITS[i]=(((char)(counter>>(4*(3-i)))) & 0b00001111);  //íàõîæäåíèå î÷åðåäíîé öèôðû øåñòíàäöàòèðè÷íîãî ÷èñëà
000080 01f8      	MOVW R30,R16
000081 5ae0      	SUBI R30,LOW(-_DIGITS)
000082 4ffe      	SBCI R31,HIGH(-_DIGITS)
000083 01bf      	MOVW R22,R30
000084 e0e3      	LDI  R30,LOW(3)
000085 e0f0      	LDI  R31,HIGH(3)
000086 1be0      	SUB  R30,R16
000087 0bf1      	SBC  R31,R17
000088 940e 00f7 	CALL __LSLW2
00008a 01d2      	MOVW R26,R4
00008b 940e 00ee 	CALL __LSRW12
00008d e0f0      	LDI  R31,0
00008e 70ef      	ANDI R30,LOW(0xF)
00008f 01db      	MOVW R26,R22
000090 93ec      	ST   X,R30
                 ; 0000 0019     };
                +
000091 5f0f     +SUBI R16 , LOW ( - 1 )
000092 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000093 cfe8      	RJMP _0x4
                 _0x5:
                 ; 0000 001A GIFR|=0b10000000;       //ñáðîñ ôëàãà ïðåðûâàíèÿ INT1, êîòîðûé óñòàíîâèòñÿ ïîâòîðíî èç-çà äðåáåçãà
000094 b7ea      	IN   R30,0x3A
000095 68e0      	ORI  R30,0x80
000096 bfea      	OUT  0x3A,R30
                 ; 0000 001B }
000097 9109      	LD   R16,Y+
000098 9119      	LD   R17,Y+
000099 91e9      	LD   R30,Y+
00009a bfef      	OUT  SREG,R30
00009b 91f9      	LD   R31,Y+
00009c 91e9      	LD   R30,Y+
00009d 91b9      	LD   R27,Y+
00009e 91a9      	LD   R26,Y+
00009f 9199      	LD   R25,Y+
0000a0 9189      	LD   R24,Y+
0000a1 9179      	LD   R23,Y+
0000a2 9169      	LD   R22,Y+
0000a3 90f9      	LD   R15,Y+
0000a4 9019      	LD   R1,Y+
0000a5 9009      	LD   R0,Y+
0000a6 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 001E {
                 _main:
                 ; .FSTART _main
                 ; 0000 001F // Declare your local variables here
                 ; 0000 0020 
                 ; 0000 0021 // Port B initialization Ìëàäøàÿ òåòðàäà - íà âûâîä äëÿ âêëþ÷åíèÿ êàòîäíûõ êëþ÷åé (âûáîðà çíàêîìåñò)
                 ; 0000 0022 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0023 DDRB=0b00001111;
0000a7 e0ef      	LDI  R30,LOW(15)
0000a8 bbe7      	OUT  0x17,R30
                 ; 0000 0024 PORTB=0;
0000a9 e0e0      	LDI  R30,LOW(0)
0000aa bbe8      	OUT  0x18,R30
                 ; 0000 0025 
                 ; 0000 0026 // Port C initialization Íà âûâîä äëÿ çàæèãàíèÿ ñåãìåíòîâ ãðàôèêè çíàêà
                 ; 0000 0027 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0028 DDRC=0b11111111;
0000ab efef      	LDI  R30,LOW(255)
0000ac bbe4      	OUT  0x14,R30
                 ; 0000 0029 PORTC=0;
0000ad e0e0      	LDI  R30,LOW(0)
0000ae bbe5      	OUT  0x15,R30
                 ; 0000 002A 
                 ; 0000 002B // External Interrupt(s) initialization
                 ; 0000 002C // INT0: Off
                 ; 0000 002D // INT1: On
                 ; 0000 002E // INT1 Mode: Falling Edge
                 ; 0000 002F // INT2: Off
                 ; 0000 0030 GICR|=(1<<INT1) | (0<<INT0) | (0<<INT2);
0000af b7eb      	IN   R30,0x3B
0000b0 68e0      	ORI  R30,0x80
0000b1 bfeb      	OUT  0x3B,R30
                 ; 0000 0031 MCUCR=(1<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000b2 e0e8      	LDI  R30,LOW(8)
0000b3 bfe5      	OUT  0x35,R30
                 ; 0000 0032 MCUCSR=(0<<ISC2);
0000b4 e0e0      	LDI  R30,LOW(0)
0000b5 bfe4      	OUT  0x34,R30
                 ; 0000 0033 //GIFR=(1<<INTF1) | (0<<INTF0) | (0<<INTF2);
                 ; 0000 0034 
                 ; 0000 0035 // Global enable interrupts
                 ; 0000 0036 #asm("sei")
0000b6 9478      	sei
                 ; 0000 0037 
                 ; 0000 0038 while (1)
                 _0x6:
                 ; 0000 0039       {
                 ; 0000 003A       // Place your code here
                 ; 0000 003B       unsigned char i;                      //èíäåêñ ýëåìåíòà ìàññèâà øåñòíàäöàòåðè÷íûõ öèôð
                 ; 0000 003C       for (i=0; i<4; i++)                   //îòîáðàæåíèå ïî î÷åðåäè âñåõ öèôð ÷èñëà
0000b7 9721      	SBIW R28,1
                 ;	i -> Y+0
0000b8 e0e0      	LDI  R30,LOW(0)
0000b9 83e8      	ST   Y,R30
                 _0xA:
0000ba 81a8      	LD   R26,Y
0000bb 30a4      	CPI  R26,LOW(0x4)
0000bc f4e0      	BRSH _0xB
                 ; 0000 003D             {
                 ; 0000 003E             PORTB=0b1000>>i;                //Àêòèâèçèðóåì î÷åðåäíîé îáùèé êàòîä
0000bd 81e8      	LD   R30,Y
0000be e0a8      	LDI  R26,LOW(8)
0000bf 940e 00e6 	CALL __LSRB12
0000c1 bbe8      	OUT  0x18,R30
                 ; 0000 003F             PORTC=GRAPH_HEX[DIGITS[i]];     //Êîä 7-ñåã. äèñïëåÿ äëÿ î÷åðåäíîãî çíàêîìåñòà (î÷åðåäíàÿ öèôðà)
0000c2 81e8      	LD   R30,Y
0000c3 e0f0      	LDI  R31,0
0000c4 5ae0      	SUBI R30,LOW(-_DIGITS)
0000c5 4ffe      	SBCI R31,HIGH(-_DIGITS)
0000c6 81e0      	LD   R30,Z
0000c7 e0f0      	LDI  R31,0
0000c8 5aec      	SUBI R30,LOW(-_GRAPH_HEX*2)
0000c9 4fff      	SBCI R31,HIGH(-_GRAPH_HEX*2)
0000ca 9004      	LPM  R0,Z
0000cb ba05      	OUT  0x15,R0
                 ; 0000 0040             delay_ms(3);                    //Çàäåðæêà äëÿ ïîäñâåòêè î÷åðåäíîãî çíàêîìåñòà
0000cc e0a3      	LDI  R26,LOW(3)
0000cd e0b0      	LDI  R27,0
0000ce 940e 00dc 	CALL _delay_ms
                 ; 0000 0041             PORTB=0x00;                     //Ãàøåíèå òåêóùåãî çíàêîìåñòà (íóæíî òîëüêî äëÿ èíä. PROTEUS)
0000d0 e0e0      	LDI  R30,LOW(0)
0000d1 bbe8      	OUT  0x18,R30
                 ; 0000 0042             //PORTC=0;                        //Äëÿ ðåàëüíûõ â ãàøåíèè íåò íåîáõîäèìîñòè (åñëè òîëüêî
                 ; 0000 0043             delay_us(5);                    //íå ñòîèò çàäà÷à ðåãóëèðîâêè ÿðêîñòè ñâå÷åíèÿ èíäèêàòîðà)
                +
0000d2 e184     +LDI R24 , LOW ( 20 )
                +__DELAY_USB_LOOP :
0000d3 958a     +DEC R24
0000d4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 20
                 ; 0000 0044             }
0000d5 81e8      	LD   R30,Y
0000d6 5fef      	SUBI R30,-LOW(1)
0000d7 83e8      	ST   Y,R30
0000d8 cfe1      	RJMP _0xA
                 _0xB:
                 ; 0000 0045       }
0000d9 9621      	ADIW R28,1
0000da cfdc      	RJMP _0x6
                 ; 0000 0046 }
                 _0xC:
0000db cfff      	RJMP _0xC
                 ; .FEND
                 
                 	.DSEG
                 _DIGITS:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
0000dc 9610      	adiw r26,0
0000dd f039      	breq __delay_ms1
                 __delay_ms0:
                +
0000de eb88     +LDI R24 , LOW ( 0xBB8 )
0000df e09b     +LDI R25 , HIGH ( 0xBB8 )
                +__DELAY_USW_LOOP :
0000e0 9701     +SBIW R24 , 1
0000e1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xBB8
0000e2 95a8      	wdr
0000e3 9711      	sbiw r26,1
0000e4 f7c9      	brne __delay_ms0
                 __delay_ms1:
0000e5 9508      	ret
                 
                 __LSRB12:
0000e6 23ee      	TST  R30
0000e7 2e0e      	MOV  R0,R30
0000e8 2fea      	MOV  R30,R26
0000e9 f019      	BREQ __LSRB12R
                 __LSRB12L:
0000ea 95e6      	LSR  R30
0000eb 940a      	DEC  R0
0000ec f7e9      	BRNE __LSRB12L
                 __LSRB12R:
0000ed 9508      	RET
                 
                 __LSRW12:
0000ee 23ee      	TST  R30
0000ef 2e0e      	MOV  R0,R30
0000f0 01fd      	MOVW R30,R26
0000f1 f021      	BREQ __LSRW12R
                 __LSRW12L:
0000f2 95f6      	LSR  R31
0000f3 95e7      	ROR  R30
0000f4 940a      	DEC  R0
0000f5 f7e1      	BRNE __LSRW12L
                 __LSRW12R:
0000f6 9508      	RET
                 
                 __LSLW2:
0000f7 0fee      	LSL  R30
0000f8 1fff      	ROL  R31
0000f9 0fee      	LSL  R30
0000fa 1fff      	ROL  R31
0000fb 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  12 r1 :   3 r2 :   0 r3 :   0 r4 :   3 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   7 r17:   6 r18:   0 r19:   0 r20:   0 r21:   0 r22:   6 r23:   2 
r24:  13 r25:   5 r26:  16 r27:   6 r28:   3 r29:   1 r30:  73 r31:  16 
x  :   4 y  :  34 z  :   9 
Registers used: 19 out of 35 (54.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   3 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   8 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   5 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   1 cpi   :   2 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   0 jmp   :  22 ld    :  19 ldd   :   0 ldi   :  36 
lds   :   0 lpm   :   9 lsl   :   2 lsr   :   2 mov   :   3 movw  :  10 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   2 out   :  18 pop   :   0 push  :   0 rcall :   0 ret   :   4 
reti  :   1 rjmp  :   5 rol   :   2 ror   :   1 sbc   :   1 sbci  :   4 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  20 std   :   0 sts   :   0 sub   :   1 subi  :   5 swap  :   0 
tst   :   2 wdr   :   1 
Instructions used: 37 out of 116 (31.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0001f8    478     26    504   16384   3.1%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 2 warnings
