;/*******************************************************
;Chip type               : ATmega16
;AVR Core Clock frequency: 12,000000 MHz
;арефмитическая функция реализованая в МК Atmega16
;PORTC.0
;*******************************************************/
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;    #include <math.h>
;// Переменные в SRAM
;unsigned  char a@0x75;
;unsigned  char b@0x76;
;unsigned  char c,d,f,g,result;
;      int a1,b1;
;// Переменный в FLSASH
;
;flash int x=240;
;
;// Переменные в EEPROM
;
;eeprom int y=25;
;
;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 001B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001C // Place your code here
; 0000 001D //Обработчик прерывания, увеличивающий counter при клике кнопки
; 0000 001E 
; 0000 001F }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;void main(void)
; 0000 0022 {
;PCODE: $00000012 VOL: 0
; 0000 0023 // Declare your local variables here
; 0000 0024 
; 0000 0025 // Input/Output Ports initialization
; 0000 0026 // Port A initialization
; 0000 0027 DDRA=0b11111111;    //PORTA - все биты на вывод данных
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0028 PORTA=0b00000000;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0029 
; 0000 002A // Port C initialization
; 0000 002B DDRC=0b00000001;        //младший бит PORTC - на вывод
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002C PORTC=0b00000000;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002D 
; 0000 002E // External Interrupt(s) initialization
; 0000 002F // INT0: On
; 0000 0030 // INT0 Mode: Rising Edge
; 0000 0031 // INT1: Off
; 0000 0032 // INT2: Off
; 0000 0033 GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0034 MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0035 MCUCSR=(0<<ISC2);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0036 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0037     a=240;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0038     b=2;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0039     c=6;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003A     d=22;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003B     f=1;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003C     g=0;
;PCODE: $0000002E VOL: 0
; 0000 003D     y=8;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003E 
; 0000 003F // Global enable interrupts
; 0000 0040 #asm("sei")
;PCODE: $00000032 VOL: 0
	sei
;PCODE: $00000033 VOL: 0
; 0000 0041    a1=tan(x); //    вычисляем tg(x)
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0042       b1=    tan(a);   //    вычисляем tg(a)
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0043        result=a1+b1;   //    вычисляем tg(x)+tg(a)
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0044         PORTB=result;//выводим промежуточный результат
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0045           result=result/b;  //делим на два при помощи побитового сдвига вправо на 1
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0046            PORTB=result; //выводим ответ в порт
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0047              delay_ms(250);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0048 while (1)
;PCODE: $0000004C VOL: 0
; 0000 0049 
; 0000 004A       delay_ms(250);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 004C }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
